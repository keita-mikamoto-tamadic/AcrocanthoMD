
AcrocanthoMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009950  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08009b28  08009b28  0000ab28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b50  08009b50  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000000  08009b50  08009b50  0000b05c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b50  08009b50  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009b50  08009b50  0000ab50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08009b58  08009b58  0000ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009b60  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000005c  08009bbc  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08009bbc  0000b50c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe53  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004200  00000000  00000000  0002aedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  0002f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143d  00000000  00000000  00030b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dca4  00000000  00000000  00031f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dca8  00000000  00000000  0005fc09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f436  00000000  00000000  0007d8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019cce7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007724  00000000  00000000  0019cd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001a4450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b10 	.word	0x08009b10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08009b10 	.word	0x08009b10

08000218 <_ZN3AngC1ER19__I2C_HandleTypeDef>:
#include "main.h"
#include "param.h"

extern Ang ang;

Ang::Ang(I2C_HandleTypeDef& i2cHandle)
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	711a      	strb	r2, [r3, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f04f 0200 	mov.w	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	739a      	strb	r2, [r3, #14]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2200      	movs	r2, #0
 8000240:	73da      	strb	r2, [r3, #15]
    data(std::make_unique<angData>()) {}
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	3310      	adds	r3, #16
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f8e7 	bl	800041a <_ZSt11make_uniqueI7angDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4618      	mov	r0, r3
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <_ZN3Ang4readEv>:

void Ang::read() {
 8000256:	b580      	push	{r7, lr}
 8000258:	b084      	sub	sp, #16
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
  if (!readStart) {
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	791b      	ldrb	r3, [r3, #4]
 8000262:	f083 0301 	eor.w	r3, r3, #1
 8000266:	b2db      	uxtb	r3, r3
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00c      	beq.n	8000286 <_ZN3Ang4readEv+0x30>
    uint8_t readRegAddr = 0x0C;
 800026c:	230c      	movs	r3, #12
 800026e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit_DMA(&hi2c1, AS5600ADDR, &readRegAddr, 1);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	6818      	ldr	r0, [r3, #0]
 8000274:	f107 020f 	add.w	r2, r7, #15
 8000278:	2301      	movs	r3, #1
 800027a:	216c      	movs	r1, #108	@ 0x6c
 800027c:	f005 fad0 	bl	8005820 <HAL_I2C_Master_Transmit_DMA>
    readStart = true;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2201      	movs	r2, #1
 8000284:	711a      	strb	r2, [r3, #4]
  }
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <_ZN3Ang7receiveEv>:

void Ang::receive() {
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	ed2d 8b02 	vpush	{d8}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  if (i2c_tx_complete) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	7b9b      	ldrb	r3, [r3, #14]
 80002a0:	b25b      	sxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	bf14      	ite	ne
 80002a6:	2301      	movne	r3, #1
 80002a8:	2300      	moveq	r3, #0
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d00b      	beq.n	80002c8 <_ZN3Ang7receiveEv+0x38>
    HAL_I2C_Master_Receive_DMA(&hi2c1, AS5600ADDR, rawAng, 2);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f103 020c 	add.w	r2, r3, #12
 80002ba:	2302      	movs	r3, #2
 80002bc:	216c      	movs	r1, #108	@ 0x6c
 80002be:	f005 fbc3 	bl	8005a48 <HAL_I2C_Master_Receive_DMA>
    i2c_tx_complete = false;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2200      	movs	r2, #0
 80002c6:	739a      	strb	r2, [r3, #14]
  }
  
  if (i2c_rx_complete) {
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7bdb      	ldrb	r3, [r3, #15]
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	bf14      	ite	ne
 80002d2:	2301      	movne	r3, #1
 80002d4:	2300      	moveq	r3, #0
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d02c      	beq.n	8000336 <_ZN3Ang7receiveEv+0xa6>
    uint16_t temp_ = static_cast<uint16_t>(rawAng[0] << 8) | rawAng[1];
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	7b1b      	ldrb	r3, [r3, #12]
 80002e0:	021b      	lsls	r3, r3, #8
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	7b52      	ldrb	r2, [r2, #13]
 80002e8:	4313      	orrs	r3, r2
 80002ea:	81fb      	strh	r3, [r7, #14]
    data->mechAng = static_cast<float>(temp_) / 4096.9f;
 80002ec:	89fb      	ldrh	r3, [r7, #14]
 80002ee:	ee07 3a90 	vmov	s15, r3
 80002f2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3310      	adds	r3, #16
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f8a7 	bl	800044e <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 8000300:	4603      	mov	r3, r0
 8000302:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000344 <_ZN3Ang7receiveEv+0xb4>
 8000306:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800030a:	edc3 7a01 	vstr	s15, [r3, #4]
    data->actAng = data->mechAng;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3310      	adds	r3, #16
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f89b 	bl	800044e <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 8000318:	4604      	mov	r4, r0
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	3310      	adds	r3, #16
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f895 	bl	800044e <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 8000324:	4602      	mov	r2, r0
 8000326:	6863      	ldr	r3, [r4, #4]
 8000328:	6093      	str	r3, [r2, #8]
    
    readStart = false;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2200      	movs	r2, #0
 800032e:	711a      	strb	r2, [r3, #4]
    i2c_rx_complete = false;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2200      	movs	r2, #0
 8000334:	73da      	strb	r2, [r3, #15]
  }
}
 8000336:	bf00      	nop
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	ecbd 8b02 	vpop	{d8}
 8000340:	bd90      	pop	{r4, r7, pc}
 8000342:	bf00      	nop
 8000344:	45800733 	.word	0x45800733

08000348 <_ZNK3Ang14prepareCanDataEPhj>:

void Ang::prepareCanData(uint8_t* buffer, size_t bufferSize) const {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]

  memcpy(buffer, &(data->actAng), sizeof(data->actAng));
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3310      	adds	r3, #16
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f878 	bl	800044e <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>
 800035e:	4603      	mov	r3, r0
 8000360:	3308      	adds	r3, #8
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	601a      	str	r2, [r3, #0]
}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <_ZN3Ang19i2cMasterTxCallbackEv>:

void Ang::i2cMasterTxCallback() {
 8000372:	b480      	push	{r7}
 8000374:	b083      	sub	sp, #12
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
  i2c_tx_complete = true;    
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2201      	movs	r2, #1
 800037e:	739a      	strb	r2, [r3, #14]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <_ZN3Ang19i2cMasterRxCallbackEv>:

void Ang::i2cMasterRxCallback() {
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  i2c_rx_complete = true;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2201      	movs	r2, #1
 8000398:	73da      	strb	r2, [r3, #15]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
	...

080003a8 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  ang.i2cMasterTxCallback();
 80003b0:	4803      	ldr	r0, [pc, #12]	@ (80003c0 <HAL_I2C_MasterTxCpltCallback+0x18>)
 80003b2:	f7ff ffde 	bl	8000372 <_ZN3Ang19i2cMasterTxCallbackEv>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	200003a0 	.word	0x200003a0

080003c4 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  ang.i2cMasterRxCallback();
 80003cc:	4803      	ldr	r0, [pc, #12]	@ (80003dc <HAL_I2C_MasterRxCpltCallback+0x18>)
 80003ce:	f7ff ffdd 	bl	800038c <_ZN3Ang19i2cMasterRxCallbackEv>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200003a0 	.word	0x200003a0

080003e0 <_ZN7angDataC1Ev>:

#include "main.h"

#include <memory>

struct angData{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f04f 0200 	mov.w	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f04f 0200 	mov.w	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f04f 0200 	mov.w	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	731a      	strb	r2, [r3, #12]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	735a      	strb	r2, [r3, #13]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4618      	mov	r0, r3
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <_ZSt11make_uniqueI7angDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 800041a:	b590      	push	{r4, r7, lr}
 800041c:	b083      	sub	sp, #12
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000422:	2010      	movs	r0, #16
 8000424:	f009 f9c0 	bl	80097a8 <_Znwj>
 8000428:	4603      	mov	r3, r0
 800042a:	461c      	mov	r4, r3
 800042c:	4622      	mov	r2, r4
 800042e:	2300      	movs	r3, #0
 8000430:	6013      	str	r3, [r2, #0]
 8000432:	6053      	str	r3, [r2, #4]
 8000434:	6093      	str	r3, [r2, #8]
 8000436:	60d3      	str	r3, [r2, #12]
 8000438:	4620      	mov	r0, r4
 800043a:	f7ff ffd1 	bl	80003e0 <_ZN7angDataC1Ev>
 800043e:	4621      	mov	r1, r4
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 f820 	bl	8000486 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	bd90      	pop	{r4, r7, pc}

0800044e <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
	return get();
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f000 f831 	bl	80004be <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EE3getEv>
 800045c:	4603      	mov	r3, r0
      }
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <_ZNSt15__uniq_ptr_dataI7angDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
 800046e:	6039      	str	r1, [r7, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	683a      	ldr	r2, [r7, #0]
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f82e 	bl	80004d8 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EEC1EPS0_>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
 800048e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6839      	ldr	r1, [r7, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ffe6 	bl	8000466 <_ZNSt15__uniq_ptr_dataI7angDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4618      	mov	r0, r3
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 f826 	bl	8000500 <_ZSt3getILj0EJP7angDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80004b4:	4603      	mov	r3, r0
 80004b6:	4618      	mov	r0, r3
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <_ZNKSt10unique_ptrI7angDataSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 f826 	bl	800051a <_ZNKSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE6_M_ptrEv>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 f826 	bl	8000536 <_ZNSt5tupleIJP7angDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff ffda 	bl	80004a4 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE6_M_ptrEv>
 80004f0:	4602      	mov	r2, r0
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	6013      	str	r3, [r2, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <_ZSt3getILj0EJP7angDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f820 	bl	8000550 <_ZSt12__get_helperILj0EP7angDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000510:	4603      	mov	r3, r0
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_ZNKSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f81f 	bl	8000568 <_ZSt3getILj0EJP7angDataSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800052a:	4603      	mov	r3, r0
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4618      	mov	r0, r3
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <_ZNSt5tupleIJP7angDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f81e 	bl	8000582 <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEEC1Ev>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <_ZSt12__get_helperILj0EP7angDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f822 	bl	80005a2 <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEE7_M_headERS4_>
 800055e:	4603      	mov	r3, r0
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <_ZSt3getILj0EJP7angDataSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f822 	bl	80005bc <_ZSt12__get_helperILj0EP7angDataJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000578:	4603      	mov	r3, r0
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f822 	bl	80005d4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7angDataEEEC1Ev>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f82a 	bl	80005ec <_ZNSt10_Head_baseILj0EP7angDataLb0EEC1Ev>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f82b 	bl	8000608 <_ZNSt10_Head_baseILj0EP7angDataLb0EE7_M_headERS2_>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <_ZSt12__get_helperILj0EP7angDataJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 f82a 	bl	800061e <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEE7_M_headERKS4_>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7angDataEEEC1Ev>:
      _Tuple_impl()
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f82b 	bl	8000638 <_ZNSt10_Head_baseILj1ESt14default_deleteI7angDataELb1EEC1Ev>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <_ZNSt10_Head_baseILj0EP7angDataLb0EEC1Ev>:
      constexpr _Head_base()
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <_ZNSt10_Head_baseILj0EP7angDataLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <_ZNSt11_Tuple_implILj0EJP7angDataSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f810 	bl	800064e <_ZNSt10_Head_baseILj0EP7angDataLb0EE7_M_headERKS2_>
 800062e:	4603      	mov	r3, r0
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <_ZNSt10_Head_baseILj1ESt14default_deleteI7angDataELb1EEC1Ev>:
      constexpr _Head_base()
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4618      	mov	r0, r3
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <_ZNSt10_Head_baseILj0EP7angDataLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>:
#include "main.h"

// グローバルなインスタンスを使用
extern CanCom canCom;

CanCom::CanCom(FDCAN_HandleTypeDef& fdcanHandle)
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), txFlag(0){}
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <_ZN6CanCom12initTxHeaderEmbb>:

void CanCom::initTxHeader(uint32_t canId, bool extendedId, bool fdFormat) {
 800069a:	b480      	push	{r7}
 800069c:	b085      	sub	sp, #20
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	4611      	mov	r1, r2
 80006a6:	461a      	mov	r2, r3
 80006a8:	460b      	mov	r3, r1
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	4613      	mov	r3, r2
 80006ae:	71bb      	strb	r3, [r7, #6]
  txHeader.Identifier = canId;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	605a      	str	r2, [r3, #4]
  txHeader.IdType = extendedId ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <_ZN6CanCom12initTxHeaderEmbb+0x28>
 80006bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006c0:	e000      	b.n	80006c4 <_ZN6CanCom12initTxHeaderEmbb+0x2a>
 80006c2:	2200      	movs	r2, #0
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	609a      	str	r2, [r3, #8]
  txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  txHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	2208      	movs	r2, #8
 80006d2:	611a      	str	r2, [r3, #16]
  txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  txHeader.BitRateSwitch = fdFormat ? FDCAN_BRS_ON : FDCAN_BRS_OFF;
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <_ZN6CanCom12initTxHeaderEmbb+0x4c>
 80006e0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80006e4:	e000      	b.n	80006e8 <_ZN6CanCom12initTxHeaderEmbb+0x4e>
 80006e6:	2200      	movs	r2, #0
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	619a      	str	r2, [r3, #24]
  txHeader.FDFormat = fdFormat ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <_ZN6CanCom12initTxHeaderEmbb+0x5e>
 80006f2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80006f6:	e000      	b.n	80006fa <_ZN6CanCom12initTxHeaderEmbb+0x60>
 80006f8:	2200      	movs	r2, #0
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	61da      	str	r2, [r3, #28]
  txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  txHeader.MessageMarker = 0;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <_ZN6CanCom8sendDataEPKhj>:

void CanCom::sendData(const uint8_t* data, size_t size) {
 8000716:	b580      	push	{r7, lr}
 8000718:	b088      	sub	sp, #32
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
  if (size > 8) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b08      	cmp	r3, #8
 8000726:	d902      	bls.n	800072e <_ZN6CanCom8sendDataEPKhj+0x18>
  // CANデータ長の上限は8バイト（クラシックCANの場合）
    Error_Handler();
 8000728:	f000 fd7a 	bl	8001220 <Error_Handler>
 800072c:	e02a      	b.n	8000784 <_ZN6CanCom8sendDataEPKhj+0x6e>
    return;
  }

  uint8_t txData[8] = {0};
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  for (size_t i = 0; i < size; ++i) {
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
 800073a:	e00c      	b.n	8000756 <_ZN6CanCom8sendDataEPKhj+0x40>
    txData[i] = data[i];
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	4413      	add	r3, r2
 8000742:	7819      	ldrb	r1, [r3, #0]
 8000744:	f107 0214 	add.w	r2, r7, #20
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	4413      	add	r3, r2
 800074c:	460a      	mov	r2, r1
 800074e:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; ++i) {
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	3301      	adds	r3, #1
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	69fa      	ldr	r2, [r7, #28]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3ee      	bcc.n	800073c <_ZN6CanCom8sendDataEPKhj+0x26>
  }

  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &txHeader, txData) != HAL_OK) {
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3304      	adds	r3, #4
 8000766:	f107 0214 	add.w	r2, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	f004 f958 	bl	8004a20 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf14      	ite	ne
 8000776:	2301      	movne	r3, #1
 8000778:	2300      	moveq	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <_ZN6CanCom8sendDataEPKhj+0x6e>
    Error_Handler();
 8000780:	f000 fd4e 	bl	8001220 <Error_Handler>
  }
}
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <_ZN6CanCom15rxFifo0CallbackEm>:

void CanCom::rxFifo0Callback(uint32_t RxFifo0ITs) {
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	6039      	str	r1, [r7, #0]
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d028      	beq.n	80007f0 <_ZN6CanCom15rxFifo0CallbackEm+0x66>
    if (HAL_FDCAN_GetRxMessage(&hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6818      	ldr	r0, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3358      	adds	r3, #88	@ 0x58
 80007ac:	2140      	movs	r1, #64	@ 0x40
 80007ae:	f004 f97b 	bl	8004aa8 <HAL_FDCAN_GetRxMessage>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf14      	ite	ne
 80007b8:	2301      	movne	r3, #1
 80007ba:	2300      	moveq	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <_ZN6CanCom15rxFifo0CallbackEm+0x3c>
      Error_Handler();
 80007c2:	f000 fd2d 	bl	8001220 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2200      	movs	r2, #0
 80007cc:	2101      	movs	r1, #1
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 fa72 	bl	8004cb8 <HAL_FDCAN_ActivateNotification>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bf14      	ite	ne
 80007da:	2301      	movne	r3, #1
 80007dc:	2300      	moveq	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <_ZN6CanCom15rxFifo0CallbackEm+0x5e>
      Error_Handler();
 80007e4:	f000 fd1c 	bl	8001220 <Error_Handler>
    }

    canRxInterrupt = 1;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2201      	movs	r2, #1
 80007ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  }
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_ZN6CanCom12handleRxDataEv>:

void CanCom::handleRxData() {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if (canRxInterrupt == 1) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8000806:	b25b      	sxtb	r3, r3
 8000808:	2b01      	cmp	r3, #1
 800080a:	bf0c      	ite	eq
 800080c:	2301      	moveq	r3, #1
 800080e:	2300      	movne	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00d      	beq.n	8000832 <_ZN6CanCom12handleRxDataEv+0x3a>
    canData.genFuncRef = rxData[0];
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
    canRxInterrupt = 0;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    txFlag = 1;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2201      	movs	r2, #1
 800082e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
  }
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <_ZN6CanCom6rxTaskEv>:

void CanCom::rxTask() {
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  handleRxData();
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ffd6 	bl	80007f8 <_ZN6CanCom12handleRxDataEv>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
  } else if (canData.genFuncRef == 1) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
  }
  prevGenFuncRef = currentGenFuncRef; */
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <HAL_FDCAN_RxFifo0Callback>:

extern "C" void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
      canCom.rxFifo0Callback(RxFifo0ITs);
 800085e:	6839      	ldr	r1, [r7, #0]
 8000860:	4803      	ldr	r0, [pc, #12]	@ (8000870 <HAL_FDCAN_RxFifo0Callback+0x1c>)
 8000862:	f7ff ff92 	bl	800078a <_ZN6CanCom15rxFifo0CallbackEm>
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000033c 	.word	0x2000033c

08000874 <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <LL_CORDIC_Config+0x44>)
 8000888:	4013      	ands	r3, r2
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4311      	orrs	r1, r2
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	4311      	orrs	r1, r2
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4311      	orrs	r1, r2
 8000898:	69fa      	ldr	r2, [r7, #28]
 800089a:	4311      	orrs	r1, r2
 800089c:	6a3a      	ldr	r2, [r7, #32]
 800089e:	4311      	orrs	r1, r2
 80008a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008a2:	430a      	orrs	r2, r1
 80008a4:	431a      	orrs	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	ff87f800 	.word	0xff87f800

080008bc <_ZN10Acrocantho6CordicC1Ev>:
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
}

class Cordic {
  public:
  Cordic() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af04      	add	r7, sp, #16
 80008c2:	6078      	str	r0, [r7, #4]
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80008c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000904 <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6493      	str	r3, [r2, #72]	@ 0x48
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <_ZN10Acrocantho6CordicC1Ev+0x48>)
 80008d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
    LL_CORDIC_Config(
 80008dc:	2300      	movs	r3, #0
 80008de:	9303      	str	r3, [sp, #12]
 80008e0:	2300      	movs	r3, #0
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	2300      	movs	r3, #0
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2300      	movs	r3, #0
 80008f0:	2250      	movs	r2, #80	@ 0x50
 80008f2:	2100      	movs	r1, #0
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <_ZN10Acrocantho6CordicC1Ev+0x4c>)
 80008f6:	f7ff ffbd 	bl	8000874 <LL_CORDIC_Config>
        LL_CORDIC_SCALE_0,
        LL_CORDIC_NBWRITE_1,
        LL_CORDIC_NBREAD_2,
        LL_CORDIC_INSIZE_32BITS,
        LL_CORDIC_OUTSIZE_32BITS);
  }
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	40020c00 	.word	0x40020c00

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	@ 0x30
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000912:	f001 f92c 	bl	8001b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000916:	f000 f8c1 	bl	8000a9c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f000 fc01 	bl	8001120 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800091e:	f000 fbcd 	bl	80010bc <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000922:	f000 f911 	bl	8000b48 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8000926:	f000 f9a5 	bl	8000c74 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 800092a:	f000 fa5f 	bl	8000dec <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 800092e:	f000 faa9 	bl	8000e84 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000932:	f000 faf5 	bl	8000f20 <_ZL12MX_TIM1_Initv>
  MX_CORDIC_Init();
 8000936:	f000 fa41 	bl	8000dbc <_ZL14MX_CORDIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800093a:	217f      	movs	r1, #127	@ 0x7f
 800093c:	4850      	ldr	r0, [pc, #320]	@ (8000a80 <main+0x174>)
 800093e:	f002 fa9b 	bl	8002e78 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000942:	217f      	movs	r1, #127	@ 0x7f
 8000944:	484f      	ldr	r0, [pc, #316]	@ (8000a84 <main+0x178>)
 8000946:	f002 fa97 	bl	8002e78 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 800094a:	484d      	ldr	r0, [pc, #308]	@ (8000a80 <main+0x174>)
 800094c:	f001 fc98 	bl	8002280 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000950:	484c      	ldr	r0, [pc, #304]	@ (8000a84 <main+0x178>)
 8000952:	f001 fc95 	bl	8002280 <HAL_ADC_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000956:	484a      	ldr	r0, [pc, #296]	@ (8000a80 <main+0x174>)
 8000958:	f002 faf0 	bl	8002f3c <HAL_ADCEx_InjectedStart_IT>
  //  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800095c:	2100      	movs	r1, #0
 800095e:	484a      	ldr	r0, [pc, #296]	@ (8000a88 <main+0x17c>)
 8000960:	f007 fed2 	bl	8008708 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000964:	2104      	movs	r1, #4
 8000966:	4848      	ldr	r0, [pc, #288]	@ (8000a88 <main+0x17c>)
 8000968:	f007 fece 	bl	8008708 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800096c:	2108      	movs	r1, #8
 800096e:	4846      	ldr	r0, [pc, #280]	@ (8000a88 <main+0x17c>)
 8000970:	f007 feca 	bl	8008708 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000974:	2100      	movs	r1, #0
 8000976:	4844      	ldr	r0, [pc, #272]	@ (8000a88 <main+0x17c>)
 8000978:	f008 fcf0 	bl	800935c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800097c:	2104      	movs	r1, #4
 800097e:	4842      	ldr	r0, [pc, #264]	@ (8000a88 <main+0x17c>)
 8000980:	f008 fcec 	bl	800935c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000984:	2108      	movs	r1, #8
 8000986:	4840      	ldr	r0, [pc, #256]	@ (8000a88 <main+0x17c>)
 8000988:	f008 fce8 	bl	800935c <HAL_TIMEx_PWMN_Start>

  // CANフィルタ
  FDCAN_FilterTypeDef CAN_FilterConfig;
  CAN_FilterConfig.IdType = FDCAN_STANDARD_ID;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  CAN_FilterConfig.FilterIndex = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  CAN_FilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
  CAN_FilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000998:	2301      	movs	r3, #1
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  CAN_FilterConfig.FilterID1 = 0x000;  // フィルタID
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  CAN_FilterConfig.FilterID2 = 0x000;  // マスク
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &CAN_FilterConfig) != HAL_OK)
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	4619      	mov	r1, r3
 80009aa:	4838      	ldr	r0, [pc, #224]	@ (8000a8c <main+0x180>)
 80009ac:	f003 ffb6 	bl	800491c <HAL_FDCAN_ConfigFilter>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <main+0xb8>
    {
        // フィルタ設定エラー
        Error_Handler();
 80009c0:	f000 fc2e 	bl	8001220 <Error_Handler>
    } 
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) {
 80009c4:	4831      	ldr	r0, [pc, #196]	@ (8000a8c <main+0x180>)
 80009c6:	f004 f803 	bl	80049d0 <HAL_FDCAN_Start>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf14      	ite	ne
 80009d0:	2301      	movne	r3, #1
 80009d2:	2300      	moveq	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <main+0xd2>
	  Error_Handler();
 80009da:	f000 fc21 	bl	8001220 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80009de:	2200      	movs	r2, #0
 80009e0:	2101      	movs	r1, #1
 80009e2:	482a      	ldr	r0, [pc, #168]	@ (8000a8c <main+0x180>)
 80009e4:	f004 f968 	bl	8004cb8 <HAL_FDCAN_ActivateNotification>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	bf14      	ite	ne
 80009ee:	2301      	movne	r3, #1
 80009f0:	2300      	moveq	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <main+0xf0>
    /* Notification Error */
    Error_Handler();
 80009f8:	f000 fc12 	bl	8001220 <Error_Handler>
  }

  Acrocantho::Cordic cordic;
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5b 	bl	80008bc <_ZN10Acrocantho6CordicC1Ev>
  
  canCom.initTxHeader(0x01, false, false);
 8000a06:	2300      	movs	r3, #0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4820      	ldr	r0, [pc, #128]	@ (8000a90 <main+0x184>)
 8000a0e:	f7ff fe44 	bl	800069a <_ZN6CanCom12initTxHeaderEmbb>
  uint8_t dataToSend[8] = {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55};
 8000a12:	4a20      	ldr	r2, [pc, #128]	@ (8000a94 <main+0x188>)
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1c:	e883 0003 	stmia.w	r3, {r0, r1}
  canCom.sendData(dataToSend, sizeof(dataToSend));
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2208      	movs	r2, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	4819      	ldr	r0, [pc, #100]	@ (8000a90 <main+0x184>)
 8000a2a:	f7ff fe74 	bl	8000716 <_ZN6CanCom8sendDataEPKhj>
  HAL_Delay(1000);
 8000a2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a32:	f001 f90d 	bl	8001c50 <HAL_Delay>
    //a = result.c;
    //b = result.s;
    
    //uint8_t dataToSend[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
    // data をバイトごとに txBuffer に格納
    canCom.rxTask();
 8000a36:	4816      	ldr	r0, [pc, #88]	@ (8000a90 <main+0x184>)
 8000a38:	f7ff ff01 	bl	800083e <_ZN6CanCom6rxTaskEv>

    ang.read();
 8000a3c:	4816      	ldr	r0, [pc, #88]	@ (8000a98 <main+0x18c>)
 8000a3e:	f7ff fc0a 	bl	8000256 <_ZN3Ang4readEv>
    ang.receive();
 8000a42:	4815      	ldr	r0, [pc, #84]	@ (8000a98 <main+0x18c>)
 8000a44:	f7ff fc24 	bl	8000290 <_ZN3Ang7receiveEv>
    ang.prepareCanData(txBuffer, sizeof(txBuffer));
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4812      	ldr	r0, [pc, #72]	@ (8000a98 <main+0x18c>)
 8000a50:	f7ff fc7a 	bl	8000348 <_ZNK3Ang14prepareCanDataEPhj>
    
    if (canCom.txFlag){
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <main+0x184>)
 8000a56:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0e5      	beq.n	8000a36 <main+0x12a>
      canCom.sendData(txBuffer, sizeof(txBuffer));
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <main+0x184>)
 8000a72:	f7ff fe50 	bl	8000716 <_ZN6CanCom8sendDataEPKhj>
      canCom.txFlag = 0;
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <main+0x184>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    canCom.rxTask();
 8000a7e:	e7da      	b.n	8000a36 <main+0x12a>
 8000a80:	20000078 	.word	0x20000078
 8000a84:	200000e4 	.word	0x200000e4
 8000a88:	200002f0 	.word	0x200002f0
 8000a8c:	20000178 	.word	0x20000178
 8000a90:	2000033c 	.word	0x2000033c
 8000a94:	08009b28 	.word	0x08009b28
 8000a98:	200003a0 	.word	0x200003a0

08000a9c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	@ 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0318 	add.w	r3, r7, #24
 8000aa6:	2238      	movs	r2, #56	@ 0x38
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 ff5e 	bl	800996c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f006 fdd2 	bl	8007668 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ada:	2304      	movs	r3, #4
 8000adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ade:	2355      	movs	r3, #85	@ 0x55
 8000ae0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 0318 	add.w	r3, r7, #24
 8000af2:	4618      	mov	r0, r3
 8000af4:	f006 fe6c 	bl	80077d0 <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf14      	ite	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	2300      	moveq	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000b08:	f000 fb8a 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b10:	2303      	movs	r3, #3
 8000b12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2104      	movs	r1, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f007 f965 	bl	8007df4 <HAL_RCC_ClockConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf14      	ite	ne
 8000b30:	2301      	movne	r3, #1
 8000b32:	2300      	moveq	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000b3a:	f000 fb71 	bl	8001220 <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3750      	adds	r7, #80	@ 0x50
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b092      	sub	sp, #72	@ 0x48
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b4e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	223c      	movs	r2, #60	@ 0x3c
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f008 ff03 	bl	800996c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b66:	4b41      	ldr	r3, [pc, #260]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000b68:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000b70:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b76:	4b3d      	ldr	r3, [pc, #244]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b82:	4b3a      	ldr	r3, [pc, #232]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b88:	4b38      	ldr	r3, [pc, #224]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8e:	4b37      	ldr	r3, [pc, #220]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000b90:	2204      	movs	r2, #4
 8000b92:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b94:	4b35      	ldr	r3, [pc, #212]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ba0:	4b32      	ldr	r3, [pc, #200]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba6:	4b31      	ldr	r3, [pc, #196]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bae:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc4:	4829      	ldr	r0, [pc, #164]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000bc6:	f001 f99f 	bl	8001f08 <HAL_ADC_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	bf14      	ite	ne
 8000bd0:	2301      	movne	r3, #1
 8000bd2:	2300      	moveq	r3, #0
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 8000bda:	f000 fb21 	bl	8001220 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8000bde:	2305      	movs	r3, #5
 8000be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000be2:	2300      	movs	r3, #0
 8000be4:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	481e      	ldr	r0, [pc, #120]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000bf2:	f003 f807 	bl	8003c04 <HAL_ADCEx_MultiModeConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf14      	ite	ne
 8000bfc:	2301      	movne	r3, #1
 8000bfe:	2300      	moveq	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8000c06:	f000 fb0b 	bl	8001220 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <_ZL12MX_ADC1_Initv+0x128>)
 8000c0c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000c0e:	2309      	movs	r3, #9
 8000c10:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000c16:	237f      	movs	r3, #127	@ 0x7f
 8000c18:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000c38:	2380      	movs	r3, #128	@ 0x80
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4808      	ldr	r0, [pc, #32]	@ (8000c6c <_ZL12MX_ADC1_Initv+0x124>)
 8000c4c:	f002 faae 	bl	80031ac <HAL_ADCEx_InjectedConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 8000c60:	f000 fade 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3748      	adds	r7, #72	@ 0x48
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000078 	.word	0x20000078
 8000c70:	04300002 	.word	0x04300002

08000c74 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b090      	sub	sp, #64	@ 0x40
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	223c      	movs	r2, #60	@ 0x3c
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f008 fe73 	bl	800996c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c86:	4b48      	ldr	r3, [pc, #288]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000c88:	4a48      	ldr	r2, [pc, #288]	@ (8000dac <_ZL12MX_ADC2_Initv+0x138>)
 8000c8a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c8c:	4b46      	ldr	r3, [pc, #280]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000c8e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c92:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c94:	4b44      	ldr	r3, [pc, #272]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9a:	4b43      	ldr	r3, [pc, #268]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ca0:	4b41      	ldr	r3, [pc, #260]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ca6:	4b40      	ldr	r3, [pc, #256]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000cac:	4b3e      	ldr	r3, [pc, #248]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000cae:	2208      	movs	r2, #8
 8000cb0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000cbe:	4b3a      	ldr	r3, [pc, #232]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cc4:	4b38      	ldr	r3, [pc, #224]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ccc:	4b36      	ldr	r3, [pc, #216]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd4:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000cda:	4b33      	ldr	r3, [pc, #204]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ce2:	4831      	ldr	r0, [pc, #196]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000ce4:	f001 f910 	bl	8001f08 <HAL_ADC_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf14      	ite	ne
 8000cee:	2301      	movne	r3, #1
 8000cf0:	2300      	moveq	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8000cf8:	f000 fa92 	bl	8001220 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <_ZL12MX_ADC2_Initv+0x13c>)
 8000cfe:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d00:	2309      	movs	r3, #9
 8000d02:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d08:	237f      	movs	r3, #127	@ 0x7f
 8000d0a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d14:	2303      	movs	r3, #3
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	481c      	ldr	r0, [pc, #112]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000d36:	f002 fa39 	bl	80031ac <HAL_ADCEx_InjectedConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf14      	ite	ne
 8000d40:	2301      	movne	r3, #1
 8000d42:	2300      	moveq	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <_ZL12MX_ADC2_Initv+0xda>
  {
    Error_Handler();
 8000d4a:	f000 fa69 	bl	8001220 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <_ZL12MX_ADC2_Initv+0x140>)
 8000d50:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d52:	f240 130f 	movw	r3, #271	@ 0x10f
 8000d56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000d5e:	f002 fa25 	bl	80031ac <HAL_ADCEx_InjectedConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf14      	ite	ne
 8000d68:	2301      	movne	r3, #1
 8000d6a:	2300      	moveq	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <_ZL12MX_ADC2_Initv+0x102>
  {
    Error_Handler();
 8000d72:	f000 fa55 	bl	8001220 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <_ZL12MX_ADC2_Initv+0x144>)
 8000d78:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d7a:	f240 2315 	movw	r3, #533	@ 0x215
 8000d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4808      	ldr	r0, [pc, #32]	@ (8000da8 <_ZL12MX_ADC2_Initv+0x134>)
 8000d86:	f002 fa11 	bl	80031ac <HAL_ADCEx_InjectedConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf14      	ite	ne
 8000d90:	2301      	movne	r3, #1
 8000d92:	2300      	moveq	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <_ZL12MX_ADC2_Initv+0x12a>
  {
    Error_Handler();
 8000d9a:	f000 fa41 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3740      	adds	r7, #64	@ 0x40
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000e4 	.word	0x200000e4
 8000dac:	50000100 	.word	0x50000100
 8000db0:	08600004 	.word	0x08600004
 8000db4:	0c900008 	.word	0x0c900008
 8000db8:	10c00010 	.word	0x10c00010

08000dbc <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <_ZL14MX_CORDIC_Initv+0x28>)
 8000dc2:	4a09      	ldr	r2, [pc, #36]	@ (8000de8 <_ZL14MX_CORDIC_Initv+0x2c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000dc6:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <_ZL14MX_CORDIC_Initv+0x28>)
 8000dc8:	f003 f824 	bl	8003e14 <HAL_CORDIC_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 8000ddc:	f000 fa20 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000150 	.word	0x20000150
 8000de8:	40020c00 	.word	0x40020c00

08000dec <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000df0:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000df2:	4a23      	ldr	r2, [pc, #140]	@ (8000e80 <_ZL14MX_FDCAN1_Initv+0x94>)
 8000df4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000df6:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e14:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e22:	220b      	movs	r2, #11
 8000e24:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e28:	2238      	movs	r2, #56	@ 0x38
 8000e2a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8000e2c:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e2e:	220b      	movs	r2, #11
 8000e30:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e34:	2205      	movs	r2, #5
 8000e36:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e40:	220c      	movs	r2, #12
 8000e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e46:	2204      	movs	r2, #4
 8000e48:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e5c:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <_ZL14MX_FDCAN1_Initv+0x90>)
 8000e5e:	f003 fc03 	bl	8004668 <HAL_FDCAN_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf14      	ite	ne
 8000e68:	2301      	movne	r3, #1
 8000e6a:	2300      	moveq	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8000e72:	f000 f9d5 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000178 	.word	0x20000178
 8000e80:	40006400 	.word	0x40006400

08000e84 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <_ZL12MX_I2C1_Initv+0x94>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000e90:	4a22      	ldr	r2, [pc, #136]	@ (8000f1c <_ZL12MX_I2C1_Initv+0x98>)
 8000e92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb2:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ebe:	4815      	ldr	r0, [pc, #84]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000ec0:	f004 fc13 	bl	80056ea <HAL_I2C_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf14      	ite	ne
 8000eca:	2301      	movne	r3, #1
 8000ecc:	2300      	moveq	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000ed4:	f000 f9a4 	bl	8001220 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000edc:	f006 fb2c 	bl	8007538 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bf14      	ite	ne
 8000ee6:	2301      	movne	r3, #1
 8000ee8:	2300      	moveq	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000ef0:	f000 f996 	bl	8001220 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <_ZL12MX_I2C1_Initv+0x90>)
 8000ef8:	f006 fb69 	bl	80075ce <HAL_I2CEx_ConfigDigitalFilter>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf14      	ite	ne
 8000f02:	2301      	movne	r3, #1
 8000f04:	2300      	moveq	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000f0c:	f000 f988 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200001dc 	.word	0x200001dc
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	40b285c2 	.word	0x40b285c2

08000f20 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b098      	sub	sp, #96	@ 0x60
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2234      	movs	r2, #52	@ 0x34
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f008 fd0d 	bl	800996c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f52:	4b58      	ldr	r3, [pc, #352]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8000f54:	4a58      	ldr	r2, [pc, #352]	@ (80010b8 <_ZL12MX_TIM1_Initv+0x198>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f58:	4b56      	ldr	r3, [pc, #344]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f5e:	4b55      	ldr	r3, [pc, #340]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8000f60:	2220      	movs	r2, #32
 8000f62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8000f64:	4b53      	ldr	r3, [pc, #332]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8000f66:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000f6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b51      	ldr	r3, [pc, #324]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000f72:	4b50      	ldr	r3, [pc, #320]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f78:	4b4e      	ldr	r3, [pc, #312]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8000f7a:	2280      	movs	r2, #128	@ 0x80
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f7e:	484d      	ldr	r0, [pc, #308]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8000f80:	f007 fb6a 	bl	8008658 <HAL_TIM_PWM_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf14      	ite	ne
 8000f8a:	2301      	movne	r3, #1
 8000f8c:	2300      	moveq	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8000f94:	f000 f944 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f98:	2320      	movs	r3, #32
 8000f9a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000f9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000fa2:	2380      	movs	r3, #128	@ 0x80
 8000fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000faa:	4619      	mov	r1, r3
 8000fac:	4841      	ldr	r0, [pc, #260]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8000fae:	f008 fa97 	bl	80094e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 8000fc2:	f000 f92d 	bl	8001220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc6:	2360      	movs	r3, #96	@ 0x60
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4832      	ldr	r0, [pc, #200]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8000fec:	f007 fc9e 	bl	800892c <HAL_TIM_PWM_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf14      	ite	ne
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	2300      	moveq	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 8001000:	f000 f90e 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001004:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001008:	2204      	movs	r2, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4829      	ldr	r0, [pc, #164]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 800100e:	f007 fc8d 	bl	800892c <HAL_TIM_PWM_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf14      	ite	ne
 8001018:	2301      	movne	r3, #1
 800101a:	2300      	moveq	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 8001022:	f000 f8fd 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001026:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800102a:	2208      	movs	r2, #8
 800102c:	4619      	mov	r1, r3
 800102e:	4821      	ldr	r0, [pc, #132]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 8001030:	f007 fc7c 	bl	800892c <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf14      	ite	ne
 800103a:	2301      	movne	r3, #1
 800103c:	2300      	moveq	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001044:	f000 f8ec 	bl	8001220 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001048:	481a      	ldr	r0, [pc, #104]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 800104a:	f008 fb73 	bl	8009734 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 800105a:	2314      	movs	r3, #20
 800105c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001066:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001074:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	480a      	ldr	r0, [pc, #40]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 800108c:	f008 fabe 	bl	800960c <HAL_TIMEx_ConfigBreakDeadTime>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf14      	ite	ne
 8001096:	2301      	movne	r3, #1
 8001098:	2300      	moveq	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 80010a0:	f000 f8be 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <_ZL12MX_TIM1_Initv+0x194>)
 80010a6:	f000 fbff 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 80010aa:	bf00      	nop
 80010ac:	3760      	adds	r7, #96	@ 0x60
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200002f0 	.word	0x200002f0
 80010b8:	40012c00 	.word	0x40012c00

080010bc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <_ZL11MX_DMA_Initv+0x60>)
 80010c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <_ZL11MX_DMA_Initv+0x60>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <_ZL11MX_DMA_Initv+0x60>)
 80010d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <_ZL11MX_DMA_Initv+0x60>)
 80010dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010de:	4a0f      	ldr	r2, [pc, #60]	@ (800111c <_ZL11MX_DMA_Initv+0x60>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <_ZL11MX_DMA_Initv+0x60>)
 80010e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	200b      	movs	r0, #11
 80010f8:	f002 ff99 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010fc:	200b      	movs	r0, #11
 80010fe:	f002 ffb0 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	200c      	movs	r0, #12
 8001108:	f002 ff91 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800110c:	200c      	movs	r0, #12
 800110e:	f002 ffa8 	bl	8004062 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	4b38      	ldr	r3, [pc, #224]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4a37      	ldr	r2, [pc, #220]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001142:	4b35      	ldr	r3, [pc, #212]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800114e:	4b32      	ldr	r3, [pc, #200]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	4a31      	ldr	r2, [pc, #196]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115a:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a2b      	ldr	r2, [pc, #172]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	4a25      	ldr	r2, [pc, #148]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118a:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <_ZL12MX_GPIO_Initv+0xf8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2120      	movs	r1, #32
 800119a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119e:	f004 fa69 	bl	8005674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4818      	ldr	r0, [pc, #96]	@ (800121c <_ZL12MX_GPIO_Initv+0xfc>)
 80011ba:	f004 f8d9 	bl	8005370 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80011be:	230c      	movs	r3, #12
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011ce:	230c      	movs	r3, #12
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011dc:	f004 f8c8 	bl	8005370 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011e0:	2320      	movs	r3, #32
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fa:	f004 f8b9 	bl	8005370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2028      	movs	r0, #40	@ 0x28
 8001204:	f002 ff13 	bl	800402e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001208:	2028      	movs	r0, #40	@ 0x28
 800120a:	f002 ff2a 	bl	8004062 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	@ 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	48000800 	.word	0x48000800

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <Error_Handler+0x8>

0800122c <_ZN3AngD1Ev>:
  float actAng = 0.0f;
  uint8_t ldata = 0;
  uint8_t hdata = 0;
};

class Ang {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3310      	adds	r3, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f831 	bl	80012a0 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EED1Ev>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d10c      	bne.n	8001272 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800125e:	4293      	cmp	r3, r2
 8001260:	d107      	bne.n	8001272 <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanCom canCom(hfdcan1);
 8001262:	490b      	ldr	r1, [pc, #44]	@ (8001290 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001264:	480b      	ldr	r0, [pc, #44]	@ (8001294 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001266:	f7ff f9fd 	bl	8000664 <_ZN6CanComC1ER19FDCAN_HandleTypeDef>
Ang ang(hi2c1);
 800126a:	490b      	ldr	r1, [pc, #44]	@ (8001298 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800126c:	480b      	ldr	r0, [pc, #44]	@ (800129c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800126e:	f7fe ffd3 	bl	8000218 <_ZN3AngC1ER19__I2C_HandleTypeDef>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800127e:	4293      	cmp	r3, r2
 8001280:	d102      	bne.n	8001288 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8001282:	4806      	ldr	r0, [pc, #24]	@ (800129c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001284:	f7ff ffd2 	bl	800122c <_ZN3AngD1Ev>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000178 	.word	0x20000178
 8001294:	2000033c 	.word	0x2000033c
 8001298:	200001dc 	.word	0x200001dc
 800129c:	200003a0 	.word	0x200003a0

080012a0 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8fa 	bl	80004a4 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE6_M_ptrEv>
 80012b0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00c      	beq.n	80012d4 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f812 	bl	80012e4 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EE11get_deleterEv>
 80012c0:	4604      	mov	r4, r0
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f000 f81b 	bl	80012fe <_ZSt4moveIRP7angDataEONSt16remove_referenceIT_E4typeEOS4_>
 80012c8:	4603      	mov	r3, r0
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4620      	mov	r0, r4
 80012d0:	f000 f820 	bl	8001314 <_ZNKSt14default_deleteI7angDataEclEPS0_>
	__ptr = pointer();
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
      }
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <_ZNSt10unique_ptrI7angDataSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f820 	bl	8001334 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE10_M_deleterEv>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_ZSt4moveIRP7angDataEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_ZNKSt14default_deleteI7angDataEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <_ZNKSt14default_deleteI7angDataEclEPS0_+0x18>
 8001324:	2110      	movs	r1, #16
 8001326:	4618      	mov	r0, r3
 8001328:	f008 fa3c 	bl	80097a4 <_ZdlPvj>
      }
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZNSt15__uniq_ptr_implI7angDataSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f805 	bl	800134e <_ZSt3getILj1EJP7angDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZSt3getILj1EJP7angDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f805 	bl	8001366 <_ZSt12__get_helperILj1ESt14default_deleteI7angDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800135c:	4603      	mov	r3, r0
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_ZSt12__get_helperILj1ESt14default_deleteI7angDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f805 	bl	800137e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7angDataEEE7_M_headERS3_>
 8001374:	4603      	mov	r3, r0
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7angDataEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f805 	bl	8001396 <_ZNSt10_Head_baseILj1ESt14default_deleteI7angDataELb1EE7_M_headERS3_>
 800138c:	4603      	mov	r3, r0
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_ZNSt10_Head_baseILj1ESt14default_deleteI7angDataELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_GLOBAL__sub_I_hadc1>:
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff ff47 	bl	8001248 <_Z41__static_initialization_and_destruction_0ii>
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_GLOBAL__sub_D_hadc1>:
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
 80013c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff ff3f 	bl	8001248 <_Z41__static_initialization_and_destruction_0ii>
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <HAL_MspInit+0x44>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <HAL_MspInit+0x44>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <HAL_MspInit+0x44>)
 80013e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_MspInit+0x44>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ee:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <HAL_MspInit+0x44>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_MspInit+0x44>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001402:	f006 f9d5 	bl	80077b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000

08001414 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0a0      	sub	sp, #128	@ 0x80
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142c:	f107 0318 	add.w	r3, r7, #24
 8001430:	2254      	movs	r2, #84	@ 0x54
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f008 fa99 	bl	800996c <memset>
  if(hadc->Instance==ADC1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001442:	d146      	bne.n	80014d2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001448:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800144a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800144e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4618      	mov	r0, r3
 8001456:	f006 feb1 	bl	80081bc <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001460:	f7ff fede 	bl	8001220 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001464:	4b42      	ldr	r3, [pc, #264]	@ (8001570 <HAL_ADC_MspInit+0x15c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	4a41      	ldr	r2, [pc, #260]	@ (8001570 <HAL_ADC_MspInit+0x15c>)
 800146c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800146e:	4b40      	ldr	r3, [pc, #256]	@ (8001570 <HAL_ADC_MspInit+0x15c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d10b      	bne.n	800148e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001476:	4b3f      	ldr	r3, [pc, #252]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	4a3e      	ldr	r2, [pc, #248]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 800147c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001482:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	4a38      	ldr	r2, [pc, #224]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149a:	4b36      	ldr	r3, [pc, #216]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a6:	2301      	movs	r3, #1
 80014a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014aa:	2303      	movs	r3, #3
 80014ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014b6:	4619      	mov	r1, r3
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014bc:	f003 ff58 	bl	8005370 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2012      	movs	r0, #18
 80014c6:	f002 fdb2 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80014ca:	2012      	movs	r0, #18
 80014cc:	f002 fdc9 	bl	8004062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80014d0:	e04a      	b.n	8001568 <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a28      	ldr	r2, [pc, #160]	@ (8001578 <HAL_ADC_MspInit+0x164>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d145      	bne.n	8001568 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	4618      	mov	r0, r3
 80014ee:	f006 fe65 	bl	80081bc <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80014f8:	f7ff fe92 	bl	8001220 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <HAL_ADC_MspInit+0x15c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a1b      	ldr	r2, [pc, #108]	@ (8001570 <HAL_ADC_MspInit+0x15c>)
 8001504:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <HAL_ADC_MspInit+0x15c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d10b      	bne.n	8001526 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800150e:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 8001514:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_ADC_MspInit+0x160>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800153e:	23c2      	movs	r3, #194	@ 0xc2
 8001540:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001542:	2303      	movs	r3, #3
 8001544:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001554:	f003 ff0c 	bl	8005370 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2012      	movs	r0, #18
 800155e:	f002 fd66 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001562:	2012      	movs	r0, #18
 8001564:	f002 fd7d 	bl	8004062 <HAL_NVIC_EnableIRQ>
}
 8001568:	bf00      	nop
 800156a:	3780      	adds	r7, #128	@ 0x80
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200003b4 	.word	0x200003b4
 8001574:	40021000 	.word	0x40021000
 8001578:	50000100 	.word	0x50000100

0800157c <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <HAL_CORDIC_MspInit+0x38>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10b      	bne.n	80015a6 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_CORDIC_MspInit+0x3c>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001592:	4a09      	ldr	r2, [pc, #36]	@ (80015b8 <HAL_CORDIC_MspInit+0x3c>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6493      	str	r3, [r2, #72]	@ 0x48
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <HAL_CORDIC_MspInit+0x3c>)
 800159c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b09e      	sub	sp, #120	@ 0x78
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	2254      	movs	r2, #84	@ 0x54
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f008 f9c5 	bl	800996c <memset>
  if(hfdcan->Instance==FDCAN1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a2d      	ldr	r2, [pc, #180]	@ (800169c <HAL_FDCAN_MspInit+0xe0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d153      	bne.n	8001694 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80015ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80015f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 fddd 	bl	80081bc <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001608:	f7ff fe0a 	bl	8001220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <HAL_FDCAN_MspInit+0xe4>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001610:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <HAL_FDCAN_MspInit+0xe4>)
 8001612:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001616:	6593      	str	r3, [r2, #88]	@ 0x58
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <HAL_FDCAN_MspInit+0xe4>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <HAL_FDCAN_MspInit+0xe4>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001628:	4a1d      	ldr	r2, [pc, #116]	@ (80016a0 <HAL_FDCAN_MspInit+0xe4>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_FDCAN_MspInit+0xe4>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800163c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001640:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001646:	2301      	movs	r3, #1
 8001648:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800164e:	2309      	movs	r3, #9
 8001650:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165c:	f003 fe88 	bl	8005370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001664:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001672:	2309      	movs	r3, #9
 8001674:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001680:	f003 fe76 	bl	8005370 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2015      	movs	r0, #21
 800168a:	f002 fcd0 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800168e:	2015      	movs	r0, #21
 8001690:	f002 fce7 	bl	8004062 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001694:	bf00      	nop
 8001696:	3778      	adds	r7, #120	@ 0x78
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40006400 	.word	0x40006400
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0a0      	sub	sp, #128	@ 0x80
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	2254      	movs	r2, #84	@ 0x54
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f008 f951 	bl	800996c <memset>
  if(hi2c->Instance==I2C1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a5f      	ldr	r2, [pc, #380]	@ (800184c <HAL_I2C_MspInit+0x1a8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	f040 80b6 	bne.w	8001842 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016d6:	2340      	movs	r3, #64	@ 0x40
 80016d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016da:	2300      	movs	r3, #0
 80016dc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016de:	f107 0318 	add.w	r3, r7, #24
 80016e2:	4618      	mov	r0, r3
 80016e4:	f006 fd6a 	bl	80081bc <HAL_RCCEx_PeriphCLKConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80016ee:	f7ff fd97 	bl	8001220 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b57      	ldr	r3, [pc, #348]	@ (8001850 <HAL_I2C_MspInit+0x1ac>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	4a56      	ldr	r2, [pc, #344]	@ (8001850 <HAL_I2C_MspInit+0x1ac>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fe:	4b54      	ldr	r3, [pc, #336]	@ (8001850 <HAL_I2C_MspInit+0x1ac>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	4b51      	ldr	r3, [pc, #324]	@ (8001850 <HAL_I2C_MspInit+0x1ac>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	4a50      	ldr	r2, [pc, #320]	@ (8001850 <HAL_I2C_MspInit+0x1ac>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001716:	4b4e      	ldr	r3, [pc, #312]	@ (8001850 <HAL_I2C_MspInit+0x1ac>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001726:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001728:	2312      	movs	r3, #18
 800172a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001734:	2304      	movs	r3, #4
 8001736:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001742:	f003 fe15 	bl	8005370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174a:	2312      	movs	r3, #18
 800174c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001756:	2304      	movs	r3, #4
 8001758:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800175e:	4619      	mov	r1, r3
 8001760:	483c      	ldr	r0, [pc, #240]	@ (8001854 <HAL_I2C_MspInit+0x1b0>)
 8001762:	f003 fe05 	bl	8005370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001766:	4b3a      	ldr	r3, [pc, #232]	@ (8001850 <HAL_I2C_MspInit+0x1ac>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	4a39      	ldr	r2, [pc, #228]	@ (8001850 <HAL_I2C_MspInit+0x1ac>)
 800176c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001770:	6593      	str	r3, [r2, #88]	@ 0x58
 8001772:	4b37      	ldr	r3, [pc, #220]	@ (8001850 <HAL_I2C_MspInit+0x1ac>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 800177e:	4b36      	ldr	r3, [pc, #216]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 8001780:	4a36      	ldr	r2, [pc, #216]	@ (800185c <HAL_I2C_MspInit+0x1b8>)
 8001782:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 8001786:	2210      	movs	r2, #16
 8001788:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800178a:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001790:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001796:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 8001798:	2280      	movs	r2, #128	@ 0x80
 800179a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179c:	4b2e      	ldr	r3, [pc, #184]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80017b4:	4828      	ldr	r0, [pc, #160]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 80017b6:	f002 fc6f 	bl	8004098 <HAL_DMA_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 80017c0:	f7ff fd2e 	bl	8001220 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a24      	ldr	r2, [pc, #144]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 80017c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017ca:	4a23      	ldr	r2, [pc, #140]	@ (8001858 <HAL_I2C_MspInit+0x1b4>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80017d0:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 80017d2:	4a24      	ldr	r2, [pc, #144]	@ (8001864 <HAL_I2C_MspInit+0x1c0>)
 80017d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 80017d8:	2211      	movs	r2, #17
 80017da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 80017de:	2210      	movs	r2, #16
 80017e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 80017ea:	2280      	movs	r2, #128	@ 0x80
 80017ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001800:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001806:	4816      	ldr	r0, [pc, #88]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 8001808:	f002 fc46 	bl	8004098 <HAL_DMA_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8001812:	f7ff fd05 	bl	8001220 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a11      	ldr	r2, [pc, #68]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 800181a:	639a      	str	r2, [r3, #56]	@ 0x38
 800181c:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <HAL_I2C_MspInit+0x1bc>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	201f      	movs	r0, #31
 8001828:	f002 fc01 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800182c:	201f      	movs	r0, #31
 800182e:	f002 fc18 	bl	8004062 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2020      	movs	r0, #32
 8001838:	f002 fbf9 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800183c:	2020      	movs	r0, #32
 800183e:	f002 fc10 	bl	8004062 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001842:	bf00      	nop
 8001844:	3780      	adds	r7, #128	@ 0x80
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40005400 	.word	0x40005400
 8001850:	40021000 	.word	0x40021000
 8001854:	48000400 	.word	0x48000400
 8001858:	20000230 	.word	0x20000230
 800185c:	40020008 	.word	0x40020008
 8001860:	20000290 	.word	0x20000290
 8001864:	4002001c 	.word	0x4002001c

08001868 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x38>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10b      	bne.n	8001892 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187e:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001880:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001884:	6613      	str	r3, [r2, #96]	@ 0x60
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40012c00 	.word	0x40012c00
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001944 <HAL_TIM_MspPostInit+0x9c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d138      	bne.n	800193c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <HAL_TIM_MspPostInit+0xa0>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001948 <HAL_TIM_MspPostInit+0xa0>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <HAL_TIM_MspPostInit+0xa0>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <HAL_TIM_MspPostInit+0xa0>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	4a18      	ldr	r2, [pc, #96]	@ (8001948 <HAL_TIM_MspPostInit+0xa0>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <HAL_TIM_MspPostInit+0xa0>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80018fa:	2307      	movs	r3, #7
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800190a:	2302      	movs	r3, #2
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	480d      	ldr	r0, [pc, #52]	@ (800194c <HAL_TIM_MspPostInit+0xa4>)
 8001916:	f003 fd2b 	bl	8005370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 800191a:	f242 0303 	movw	r3, #8195	@ 0x2003
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800192c:	2306      	movs	r3, #6
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	@ (8001950 <HAL_TIM_MspPostInit+0xa8>)
 8001938:	f003 fd1a 	bl	8005370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	@ 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40012c00 	.word	0x40012c00
 8001948:	40021000 	.word	0x40021000
 800194c:	48000800 	.word	0x48000800
 8001950:	48000400 	.word	0x48000400

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <NMI_Handler+0x4>

0800195c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <HardFault_Handler+0x4>

08001964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <MemManage_Handler+0x4>

0800196c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <UsageFault_Handler+0x4>

0800197c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019aa:	f000 f933 	bl	8001c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <DMA1_Channel1_IRQHandler+0x10>)
 80019ba:	f002 fcf7 	bl	80043ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000230 	.word	0x20000230

080019c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <DMA1_Channel2_IRQHandler+0x10>)
 80019ce:	f002 fced 	bl	80043ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000290 	.word	0x20000290

080019dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019e0:	4803      	ldr	r0, [pc, #12]	@ (80019f0 <ADC1_2_IRQHandler+0x14>)
 80019e2:	f000 fd31 	bl	8002448 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80019e6:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <ADC1_2_IRQHandler+0x18>)
 80019e8:	f000 fd2e 	bl	8002448 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000078 	.word	0x20000078
 80019f4:	200000e4 	.word	0x200000e4

080019f8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <FDCAN1_IT0_IRQHandler+0x10>)
 80019fe:	f003 fa41 	bl	8004e84 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000178 	.word	0x20000178

08001a0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <I2C1_EV_IRQHandler+0x10>)
 8001a12:	f004 f909 	bl	8005c28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200001dc 	.word	0x200001dc

08001a20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <I2C1_ER_IRQHandler+0x10>)
 8001a26:	f004 f919 	bl	8005c5c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200001dc 	.word	0x200001dc

08001a34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a38:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a3c:	f003 fe32 	bl	80056a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_kill>:

int _kill(int pid, int sig)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a5e:	f007 ffe1 	bl	8009a24 <__errno>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2216      	movs	r2, #22
 8001a66:	601a      	str	r2, [r3, #0]
  return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_exit>:

void _exit (int status)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffe7 	bl	8001a54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a86:	bf00      	nop
 8001a88:	e7fd      	b.n	8001a86 <_exit+0x12>
	...

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f007 ffb2 	bl	8009a24 <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20020000 	.word	0x20020000
 8001aec:	00000400 	.word	0x00000400
 8001af0:	200003b8 	.word	0x200003b8
 8001af4:	20000510 	.word	0x20000510

08001af8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b1c:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b20:	f7ff ffea 	bl	8001af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b26:	490d      	ldr	r1, [pc, #52]	@ (8001b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b28:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <LoopForever+0xe>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b68 <LoopForever+0x16>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f007 ff71 	bl	8009a30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b4e:	f7fe fedd 	bl	800090c <main>

08001b52 <LoopForever>:

LoopForever:
    b LoopForever
 8001b52:	e7fe      	b.n	8001b52 <LoopForever>
  ldr   r0, =_estack
 8001b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b60:	08009b60 	.word	0x08009b60
  ldr r2, =_sbss
 8001b64:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b68:	2000050c 	.word	0x2000050c

08001b6c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC3_IRQHandler>

08001b6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f002 fa4d 	bl	8004018 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f80e 	bl	8001ba0 <HAL_InitTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	e001      	b.n	8001b94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b90:	f7ff fc1c 	bl	80013cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b94:	79fb      	ldrb	r3, [r7, #7]

}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bac:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <HAL_InitTick+0x68>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d022      	beq.n	8001bfa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bb4:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_InitTick+0x6c>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <HAL_InitTick+0x68>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 fa58 	bl	800407e <HAL_SYSTICK_Config>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10f      	bne.n	8001bf4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b0f      	cmp	r3, #15
 8001bd8:	d809      	bhi.n	8001bee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	f04f 30ff 	mov.w	r0, #4294967295
 8001be2:	f002 fa24 	bl	800402e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <HAL_InitTick+0x70>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e007      	b.n	8001bfe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	e004      	b.n	8001bfe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e001      	b.n	8001bfe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <HAL_IncTick+0x1c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_IncTick+0x20>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a03      	ldr	r2, [pc, #12]	@ (8001c30 <HAL_IncTick+0x1c>)
 8001c24:	6013      	str	r3, [r2, #0]
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	200003bc 	.word	0x200003bc
 8001c34:	20000008 	.word	0x20000008

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	200003bc 	.word	0x200003bc

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d004      	beq.n	8001c74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_Delay+0x40>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4413      	add	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c74:	bf00      	nop
 8001c76:	f7ff ffdf 	bl	8001c38 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d8f7      	bhi.n	8001c76 <HAL_Delay+0x26>
  {
  }
}
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000008 	.word	0x20000008

08001c94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	609a      	str	r2, [r3, #8]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d08:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 031f 	and.w	r3, r3, #31
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6093      	str	r3, [r2, #8]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d92:	d101      	bne.n	8001d98 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001db6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dba:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001de2:	d101      	bne.n	8001de8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e06:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e2e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <LL_ADC_IsEnabled+0x18>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <LL_ADC_IsEnabled+0x1a>
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d101      	bne.n	8001e84 <LL_ADC_IsDisableOngoing+0x18>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <LL_ADC_IsDisableOngoing+0x1a>
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ea2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ea6:	f043 0204 	orr.w	r2, r3, #4
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d101      	bne.n	8001ed2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d101      	bne.n	8001ef8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b089      	sub	sp, #36	@ 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1a9      	b.n	8002276 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff fa6f 	bl	8001414 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff18 	bl	8001d7e <LL_ADC_IsDeepPowerDownEnabled>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fefe 	bl	8001d5a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff33 	bl	8001dce <LL_ADC_IsInternalRegulatorEnabled>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d115      	bne.n	8001f9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff17 	bl	8001da6 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f78:	4b9c      	ldr	r3, [pc, #624]	@ (80021ec <HAL_ADC_Init+0x2e4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	4a9c      	ldr	r2, [pc, #624]	@ (80021f0 <HAL_ADC_Init+0x2e8>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	3301      	adds	r3, #1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff15 	bl	8001dce <LL_ADC_IsInternalRegulatorEnabled>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fae:	f043 0210 	orr.w	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff75 	bl	8001eba <LL_ADC_REG_IsConversionOngoing>
 8001fd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 8142 	bne.w	8002264 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 813e 	bne.w	8002264 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ff0:	f043 0202 	orr.w	r2, r3, #2
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff22 	bl	8001e46 <LL_ADC_IsEnabled>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d141      	bne.n	800208c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002010:	d004      	beq.n	800201c <HAL_ADC_Init+0x114>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a77      	ldr	r2, [pc, #476]	@ (80021f4 <HAL_ADC_Init+0x2ec>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d10f      	bne.n	800203c <HAL_ADC_Init+0x134>
 800201c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002020:	f7ff ff11 	bl	8001e46 <LL_ADC_IsEnabled>
 8002024:	4604      	mov	r4, r0
 8002026:	4873      	ldr	r0, [pc, #460]	@ (80021f4 <HAL_ADC_Init+0x2ec>)
 8002028:	f7ff ff0d 	bl	8001e46 <LL_ADC_IsEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	4323      	orrs	r3, r4
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	e012      	b.n	8002062 <HAL_ADC_Init+0x15a>
 800203c:	486e      	ldr	r0, [pc, #440]	@ (80021f8 <HAL_ADC_Init+0x2f0>)
 800203e:	f7ff ff02 	bl	8001e46 <LL_ADC_IsEnabled>
 8002042:	4604      	mov	r4, r0
 8002044:	486d      	ldr	r0, [pc, #436]	@ (80021fc <HAL_ADC_Init+0x2f4>)
 8002046:	f7ff fefe 	bl	8001e46 <LL_ADC_IsEnabled>
 800204a:	4603      	mov	r3, r0
 800204c:	431c      	orrs	r4, r3
 800204e:	486c      	ldr	r0, [pc, #432]	@ (8002200 <HAL_ADC_Init+0x2f8>)
 8002050:	f7ff fef9 	bl	8001e46 <LL_ADC_IsEnabled>
 8002054:	4603      	mov	r3, r0
 8002056:	4323      	orrs	r3, r4
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d012      	beq.n	800208c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800206e:	d004      	beq.n	800207a <HAL_ADC_Init+0x172>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5f      	ldr	r2, [pc, #380]	@ (80021f4 <HAL_ADC_Init+0x2ec>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_ADC_Init+0x176>
 800207a:	4a62      	ldr	r2, [pc, #392]	@ (8002204 <HAL_ADC_Init+0x2fc>)
 800207c:	e000      	b.n	8002080 <HAL_ADC_Init+0x178>
 800207e:	4a62      	ldr	r2, [pc, #392]	@ (8002208 <HAL_ADC_Init+0x300>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f7ff fe04 	bl	8001c94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7f5b      	ldrb	r3, [r3, #29]
 8002090:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002096:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800209c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d106      	bne.n	80020c8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	3b01      	subs	r3, #1
 80020c0:	045b      	lsls	r3, r3, #17
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d009      	beq.n	80020e4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	4b48      	ldr	r3, [pc, #288]	@ (800220c <HAL_ADC_Init+0x304>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	69b9      	ldr	r1, [r7, #24]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fee4 	bl	8001ee0 <LL_ADC_INJ_IsConversionOngoing>
 8002118:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d17f      	bne.n	8002220 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d17c      	bne.n	8002220 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800212a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002132:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002142:	f023 0302 	bic.w	r3, r3, #2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	430b      	orrs	r3, r1
 800214e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d017      	beq.n	8002188 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002166:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002170:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002174:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6911      	ldr	r1, [r2, #16]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	430b      	orrs	r3, r1
 8002182:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002186:	e013      	b.n	80021b0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002196:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021ac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d12a      	bne.n	8002210 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021d0:	4311      	orrs	r1, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021dc:	430a      	orrs	r2, r1
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	611a      	str	r2, [r3, #16]
 80021ea:	e019      	b.n	8002220 <HAL_ADC_Init+0x318>
 80021ec:	20000000 	.word	0x20000000
 80021f0:	053e2d63 	.word	0x053e2d63
 80021f4:	50000100 	.word	0x50000100
 80021f8:	50000400 	.word	0x50000400
 80021fc:	50000500 	.word	0x50000500
 8002200:	50000600 	.word	0x50000600
 8002204:	50000300 	.word	0x50000300
 8002208:	50000700 	.word	0x50000700
 800220c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10c      	bne.n	8002242 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f023 010f 	bic.w	r1, r3, #15
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	1e5a      	subs	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002240:	e007      	b.n	8002252 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 020f 	bic.w	r2, r2, #15
 8002250:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002262:	e007      	b.n	8002274 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002268:	f043 0210 	orr.w	r2, r3, #16
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002274:	7ffb      	ldrb	r3, [r7, #31]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	@ 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}
 800227e:	bf00      	nop

08002280 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002290:	d004      	beq.n	800229c <HAL_ADC_Start+0x1c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a67      	ldr	r2, [pc, #412]	@ (8002434 <HAL_ADC_Start+0x1b4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_Start+0x20>
 800229c:	4b66      	ldr	r3, [pc, #408]	@ (8002438 <HAL_ADC_Start+0x1b8>)
 800229e:	e000      	b.n	80022a2 <HAL_ADC_Start+0x22>
 80022a0:	4b66      	ldr	r3, [pc, #408]	@ (800243c <HAL_ADC_Start+0x1bc>)
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fd3d 	bl	8001d22 <LL_ADC_GetMultimode>
 80022a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fe03 	bl	8001eba <LL_ADC_REG_IsConversionOngoing>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 80b4 	bne.w	8002424 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_Start+0x4a>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e0af      	b.n	800242a <HAL_ADC_Start+0x1aa>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fb36 	bl	8002944 <ADC_Enable>
 80022d8:	4603      	mov	r3, r0
 80022da:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 809b 	bne.w	800241a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002434 <HAL_ADC_Start+0x1b4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_ADC_Start+0x96>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a4e      	ldr	r2, [pc, #312]	@ (8002440 <HAL_ADC_Start+0x1c0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d002      	beq.n	8002312 <HAL_ADC_Start+0x92>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	e003      	b.n	800231a <HAL_ADC_Start+0x9a>
 8002312:	4b4c      	ldr	r3, [pc, #304]	@ (8002444 <HAL_ADC_Start+0x1c4>)
 8002314:	e001      	b.n	800231a <HAL_ADC_Start+0x9a>
 8002316:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4293      	cmp	r3, r2
 8002320:	d002      	beq.n	8002328 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d105      	bne.n	8002334 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800233c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002340:	d106      	bne.n	8002350 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002346:	f023 0206 	bic.w	r2, r3, #6
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	661a      	str	r2, [r3, #96]	@ 0x60
 800234e:	e002      	b.n	8002356 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	221c      	movs	r2, #28
 800235c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a32      	ldr	r2, [pc, #200]	@ (8002434 <HAL_ADC_Start+0x1b4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d009      	beq.n	8002384 <HAL_ADC_Start+0x104>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a32      	ldr	r2, [pc, #200]	@ (8002440 <HAL_ADC_Start+0x1c0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d002      	beq.n	8002380 <HAL_ADC_Start+0x100>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	e003      	b.n	8002388 <HAL_ADC_Start+0x108>
 8002380:	4b30      	ldr	r3, [pc, #192]	@ (8002444 <HAL_ADC_Start+0x1c4>)
 8002382:	e001      	b.n	8002388 <HAL_ADC_Start+0x108>
 8002384:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	4293      	cmp	r3, r2
 800238e:	d008      	beq.n	80023a2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d002      	beq.n	80023a2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b09      	cmp	r3, #9
 80023a0:	d114      	bne.n	80023cc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fd64 	bl	8001e92 <LL_ADC_REG_StartConversion>
 80023ca:	e02d      	b.n	8002428 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a15      	ldr	r2, [pc, #84]	@ (8002434 <HAL_ADC_Start+0x1b4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d009      	beq.n	80023f6 <HAL_ADC_Start+0x176>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a16      	ldr	r2, [pc, #88]	@ (8002440 <HAL_ADC_Start+0x1c0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d002      	beq.n	80023f2 <HAL_ADC_Start+0x172>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	e003      	b.n	80023fa <HAL_ADC_Start+0x17a>
 80023f2:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <HAL_ADC_Start+0x1c4>)
 80023f4:	e001      	b.n	80023fa <HAL_ADC_Start+0x17a>
 80023f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023fa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00f      	beq.n	8002428 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002410:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002418:	e006      	b.n	8002428 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002422:	e001      	b.n	8002428 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002424:	2302      	movs	r3, #2
 8002426:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002428:	7dfb      	ldrb	r3, [r7, #23]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	50000100 	.word	0x50000100
 8002438:	50000300 	.word	0x50000300
 800243c:	50000700 	.word	0x50000700
 8002440:	50000500 	.word	0x50000500
 8002444:	50000400 	.word	0x50000400

08002448 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	@ 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002450:	2300      	movs	r3, #0
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800246c:	d004      	beq.n	8002478 <HAL_ADC_IRQHandler+0x30>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a8e      	ldr	r2, [pc, #568]	@ (80026ac <HAL_ADC_IRQHandler+0x264>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_ADC_IRQHandler+0x34>
 8002478:	4b8d      	ldr	r3, [pc, #564]	@ (80026b0 <HAL_ADC_IRQHandler+0x268>)
 800247a:	e000      	b.n	800247e <HAL_ADC_IRQHandler+0x36>
 800247c:	4b8d      	ldr	r3, [pc, #564]	@ (80026b4 <HAL_ADC_IRQHandler+0x26c>)
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fc4f 	bl	8001d22 <LL_ADC_GetMultimode>
 8002484:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d017      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x78>
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d012      	beq.n	80024c0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d105      	bne.n	80024b2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024aa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fe70 	bl	8003198 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2202      	movs	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <HAL_ADC_IRQHandler+0x8c>
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10b      	bne.n	80024ec <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8094 	beq.w	8002608 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 808e 	beq.w	8002608 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fbe4 	bl	8001cd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d072      	beq.n	80025fa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a64      	ldr	r2, [pc, #400]	@ (80026ac <HAL_ADC_IRQHandler+0x264>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_ADC_IRQHandler+0xea>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a65      	ldr	r2, [pc, #404]	@ (80026b8 <HAL_ADC_IRQHandler+0x270>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d002      	beq.n	800252e <HAL_ADC_IRQHandler+0xe6>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	e003      	b.n	8002536 <HAL_ADC_IRQHandler+0xee>
 800252e:	4b63      	ldr	r3, [pc, #396]	@ (80026bc <HAL_ADC_IRQHandler+0x274>)
 8002530:	e001      	b.n	8002536 <HAL_ADC_IRQHandler+0xee>
 8002532:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	4293      	cmp	r3, r2
 800253c:	d008      	beq.n	8002550 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d002      	beq.n	8002550 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b09      	cmp	r3, #9
 800254e:	d104      	bne.n	800255a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	623b      	str	r3, [r7, #32]
 8002558:	e014      	b.n	8002584 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a53      	ldr	r2, [pc, #332]	@ (80026ac <HAL_ADC_IRQHandler+0x264>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_ADC_IRQHandler+0x130>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a53      	ldr	r2, [pc, #332]	@ (80026b8 <HAL_ADC_IRQHandler+0x270>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d002      	beq.n	8002574 <HAL_ADC_IRQHandler+0x12c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	e003      	b.n	800257c <HAL_ADC_IRQHandler+0x134>
 8002574:	4b51      	ldr	r3, [pc, #324]	@ (80026bc <HAL_ADC_IRQHandler+0x274>)
 8002576:	e001      	b.n	800257c <HAL_ADC_IRQHandler+0x134>
 8002578:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800257c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d135      	bne.n	80025fa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b08      	cmp	r3, #8
 800259a:	d12e      	bne.n	80025fa <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fc8a 	bl	8001eba <LL_ADC_REG_IsConversionOngoing>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d11a      	bne.n	80025e2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 020c 	bic.w	r2, r2, #12
 80025ba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d112      	bne.n	80025fa <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d8:	f043 0201 	orr.w	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025e0:	e00b      	b.n	80025fa <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e6:	f043 0210 	orr.w	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f2:	f043 0201 	orr.w	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f984 	bl	8002908 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	220c      	movs	r2, #12
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_ADC_IRQHandler+0x1d4>
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80b3 	beq.w	800278e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80ad 	beq.w	800278e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d105      	bne.n	800264c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002644:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fb53 	bl	8001cfc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002656:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fb3a 	bl	8001cd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002662:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a10      	ldr	r2, [pc, #64]	@ (80026ac <HAL_ADC_IRQHandler+0x264>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_ADC_IRQHandler+0x23a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a11      	ldr	r2, [pc, #68]	@ (80026b8 <HAL_ADC_IRQHandler+0x270>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d002      	beq.n	800267e <HAL_ADC_IRQHandler+0x236>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	e003      	b.n	8002686 <HAL_ADC_IRQHandler+0x23e>
 800267e:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <HAL_ADC_IRQHandler+0x274>)
 8002680:	e001      	b.n	8002686 <HAL_ADC_IRQHandler+0x23e>
 8002682:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	4293      	cmp	r3, r2
 800268c:	d008      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b06      	cmp	r3, #6
 8002698:	d002      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b07      	cmp	r3, #7
 800269e:	d10f      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	e01f      	b.n	80026ea <HAL_ADC_IRQHandler+0x2a2>
 80026aa:	bf00      	nop
 80026ac:	50000100 	.word	0x50000100
 80026b0:	50000300 	.word	0x50000300
 80026b4:	50000700 	.word	0x50000700
 80026b8:	50000500 	.word	0x50000500
 80026bc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a8b      	ldr	r2, [pc, #556]	@ (80028f4 <HAL_ADC_IRQHandler+0x4ac>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_ADC_IRQHandler+0x296>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a8a      	ldr	r2, [pc, #552]	@ (80028f8 <HAL_ADC_IRQHandler+0x4b0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d002      	beq.n	80026da <HAL_ADC_IRQHandler+0x292>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	e003      	b.n	80026e2 <HAL_ADC_IRQHandler+0x29a>
 80026da:	4b88      	ldr	r3, [pc, #544]	@ (80028fc <HAL_ADC_IRQHandler+0x4b4>)
 80026dc:	e001      	b.n	80026e2 <HAL_ADC_IRQHandler+0x29a>
 80026de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026e2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d047      	beq.n	8002780 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_ADC_IRQHandler+0x2c2>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d03f      	beq.n	8002780 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002706:	2b00      	cmp	r3, #0
 8002708:	d13a      	bne.n	8002780 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002714:	2b40      	cmp	r3, #64	@ 0x40
 8002716:	d133      	bne.n	8002780 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d12e      	bne.n	8002780 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fbda 	bl	8001ee0 <LL_ADC_INJ_IsConversionOngoing>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d11a      	bne.n	8002768 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002740:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d112      	bne.n	8002780 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002766:	e00b      	b.n	8002780 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	f043 0210 	orr.w	r2, r3, #16
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fce1 	bl	8003148 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2260      	movs	r2, #96	@ 0x60
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002794:	2b00      	cmp	r3, #0
 8002796:	d011      	beq.n	80027bc <HAL_ADC_IRQHandler+0x374>
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8b4 	bl	800291c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2280      	movs	r2, #128	@ 0x80
 80027ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d012      	beq.n	80027ec <HAL_ADC_IRQHandler+0x3a4>
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fcc7 	bl	8003170 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d012      	beq.n	800281c <HAL_ADC_IRQHandler+0x3d4>
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00d      	beq.n	800281c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fcb9 	bl	8003184 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	d043      	beq.n	80028ae <HAL_ADC_IRQHandler+0x466>
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03e      	beq.n	80028ae <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002838:	2301      	movs	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
 800283c:	e021      	b.n	8002882 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d015      	beq.n	8002870 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800284c:	d004      	beq.n	8002858 <HAL_ADC_IRQHandler+0x410>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a28      	ldr	r2, [pc, #160]	@ (80028f4 <HAL_ADC_IRQHandler+0x4ac>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_ADC_IRQHandler+0x414>
 8002858:	4b29      	ldr	r3, [pc, #164]	@ (8002900 <HAL_ADC_IRQHandler+0x4b8>)
 800285a:	e000      	b.n	800285e <HAL_ADC_IRQHandler+0x416>
 800285c:	4b29      	ldr	r3, [pc, #164]	@ (8002904 <HAL_ADC_IRQHandler+0x4bc>)
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fa6d 	bl	8001d3e <LL_ADC_GetMultiDMATransfer>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800286a:	2301      	movs	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
 800286e:	e008      	b.n	8002882 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800287e:	2301      	movs	r3, #1
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10e      	bne.n	80028a6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002898:	f043 0202 	orr.w	r2, r3, #2
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f845 	bl	8002930 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2210      	movs	r2, #16
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d018      	beq.n	80028ea <HAL_ADC_IRQHandler+0x4a2>
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d013      	beq.n	80028ea <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d2:	f043 0208 	orr.w	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fc39 	bl	800315c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80028ea:	bf00      	nop
 80028ec:	3728      	adds	r7, #40	@ 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	50000100 	.word	0x50000100
 80028f8:	50000500 	.word	0x50000500
 80028fc:	50000400 	.word	0x50000400
 8002900:	50000300 	.word	0x50000300
 8002904:	50000700 	.word	0x50000700

08002908 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fa76 	bl	8001e46 <LL_ADC_IsEnabled>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d176      	bne.n	8002a4e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	4b3c      	ldr	r3, [pc, #240]	@ (8002a58 <ADC_Enable+0x114>)
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	f043 0210 	orr.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e062      	b.n	8002a50 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fa31 	bl	8001df6 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800299c:	d004      	beq.n	80029a8 <ADC_Enable+0x64>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2e      	ldr	r2, [pc, #184]	@ (8002a5c <ADC_Enable+0x118>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <ADC_Enable+0x68>
 80029a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a60 <ADC_Enable+0x11c>)
 80029aa:	e000      	b.n	80029ae <ADC_Enable+0x6a>
 80029ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <ADC_Enable+0x120>)
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f983 	bl	8001cba <LL_ADC_GetCommonPathInternalCh>
 80029b4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d013      	beq.n	80029e6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029be:	4b2a      	ldr	r3, [pc, #168]	@ (8002a68 <ADC_Enable+0x124>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	099b      	lsrs	r3, r3, #6
 80029c4:	4a29      	ldr	r2, [pc, #164]	@ (8002a6c <ADC_Enable+0x128>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029d8:	e002      	b.n	80029e0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	3b01      	subs	r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f9      	bne.n	80029da <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029e6:	f7ff f927 	bl	8001c38 <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ec:	e028      	b.n	8002a40 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fa27 	bl	8001e46 <LL_ADC_IsEnabled>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d104      	bne.n	8002a08 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff f9f7 	bl	8001df6 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a08:	f7ff f916 	bl	8001c38 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d914      	bls.n	8002a40 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d00d      	beq.n	8002a40 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e007      	b.n	8002a50 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d1cf      	bne.n	80029ee <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	8000003f 	.word	0x8000003f
 8002a5c:	50000100 	.word	0x50000100
 8002a60:	50000300 	.word	0x50000300
 8002a64:	50000700 	.word	0x50000700
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	053e2d63 	.word	0x053e2d63

08002a70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f9f5 	bl	8001e6c <LL_ADC_IsDisableOngoing>
 8002a82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff f9dc 	bl	8001e46 <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d047      	beq.n	8002b24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d144      	bne.n	8002b24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 030d 	and.w	r3, r3, #13
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d10c      	bne.n	8002ac2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff f9b6 	bl	8001e1e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aba:	f7ff f8bd 	bl	8001c38 <HAL_GetTick>
 8002abe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ac0:	e029      	b.n	8002b16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac6:	f043 0210 	orr.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e023      	b.n	8002b26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ade:	f7ff f8ab 	bl	8001c38 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d914      	bls.n	8002b16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	f043 0210 	orr.w	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e007      	b.n	8002b26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1dc      	bne.n	8002ade <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <LL_ADC_SetCommonPathInternalCh>:
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	609a      	str	r2, [r3, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_GetCommonPathInternalCh>:
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_SetOffset>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3360      	adds	r3, #96	@ 0x60
 8002b82:	461a      	mov	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <LL_ADC_SetOffset+0x44>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	601a      	str	r2, [r3, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	03fff000 	.word	0x03fff000

08002bb8 <LL_ADC_GetOffsetChannel>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3360      	adds	r3, #96	@ 0x60
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_ADC_SetOffsetState>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3360      	adds	r3, #96	@ 0x60
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_SetOffsetSign>:
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3360      	adds	r3, #96	@ 0x60
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	601a      	str	r2, [r3, #0]
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_SetOffsetSaturation>:
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3360      	adds	r3, #96	@ 0x60
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	601a      	str	r2, [r3, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	615a      	str	r2, [r3, #20]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_INJ_GetTrigAuto>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_SetChannelSamplingTime>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3314      	adds	r3, #20
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	0e5b      	lsrs	r3, r3, #25
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	4413      	add	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	0d1b      	lsrs	r3, r3, #20
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2107      	movs	r1, #7
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	0d1b      	lsrs	r3, r3, #20
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <LL_ADC_SetChannelSingleDiff>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f003 0318 	and.w	r3, r3, #24
 8002d42:	4908      	ldr	r1, [pc, #32]	@ (8002d64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d44:	40d9      	lsrs	r1, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	400b      	ands	r3, r1
 8002d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	0007ffff 	.word	0x0007ffff

08002d68 <LL_ADC_GetMultimode>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 031f 	and.w	r3, r3, #31
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_IsEnabled>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_IsEnabled+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_IsEnabled+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_StartCalibration>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002dbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_IsCalibrationOnGoing>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002df0:	d101      	bne.n	8002df6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d101      	bne.n	8002e1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_ADC_INJ_StartConversion>:
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e3a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e3e:	f043 0208 	orr.w	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LL_ADC_INJ_IsConversionOngoing>:
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d101      	bne.n	8002e6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADCEx_Calibration_Start+0x1c>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e04d      	b.n	8002f30 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff fde7 	bl	8002a70 <ADC_Disable>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d136      	bne.n	8002f1a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002eb4:	f023 0302 	bic.w	r3, r3, #2
 8002eb8:	f043 0202 	orr.w	r2, r3, #2
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff6f 	bl	8002daa <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ecc:	e014      	b.n	8002ef8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4a18      	ldr	r2, [pc, #96]	@ (8002f38 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d90d      	bls.n	8002ef8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	f023 0312 	bic.w	r3, r3, #18
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e01b      	b.n	8002f30 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff6d 	bl	8002ddc <LL_ADC_IsCalibrationOnGoing>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e2      	bne.n	8002ece <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	f023 0303 	bic.w	r3, r3, #3
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f18:	e005      	b.n	8002f26 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1e:	f043 0210 	orr.w	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	0004de01 	.word	0x0004de01

08002f3c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADCEx_InjectedStart_IT+0x1c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a78      	ldr	r2, [pc, #480]	@ (8003134 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_ADCEx_InjectedStart_IT+0x20>
 8002f58:	4b77      	ldr	r3, [pc, #476]	@ (8003138 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8002f5a:	e000      	b.n	8002f5e <HAL_ADCEx_InjectedStart_IT+0x22>
 8002f5c:	4b77      	ldr	r3, [pc, #476]	@ (800313c <HAL_ADCEx_InjectedStart_IT+0x200>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff02 	bl	8002d68 <LL_ADC_GetMultimode>
 8002f64:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff ff71 	bl	8002e52 <LL_ADC_INJ_IsConversionOngoing>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8002f76:	2302      	movs	r3, #2
 8002f78:	e0d8      	b.n	800312c <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f84:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0c0      	b.n	800312c <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0b9      	b.n	800312c <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff fcbf 	bl	8002944 <ADC_Enable>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 80a8 	bne.w	8003122 <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d006      	beq.n	8002fec <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe2:	f023 0208 	bic.w	r2, r3, #8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	661a      	str	r2, [r3, #96]	@ 0x60
 8002fea:	e002      	b.n	8002ff2 <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a4a      	ldr	r2, [pc, #296]	@ (8003134 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a4a      	ldr	r2, [pc, #296]	@ (8003140 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d002      	beq.n	8003020 <HAL_ADCEx_InjectedStart_IT+0xe4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	e003      	b.n	8003028 <HAL_ADCEx_InjectedStart_IT+0xec>
 8003020:	4b48      	ldr	r3, [pc, #288]	@ (8003144 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8003022:	e001      	b.n	8003028 <HAL_ADCEx_InjectedStart_IT+0xec>
 8003024:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4293      	cmp	r3, r2
 800302e:	d002      	beq.n	8003036 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d105      	bne.n	8003042 <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2260      	movs	r2, #96	@ 0x60
 8003048:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800306e:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d110      	bne.n	800309a <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0220 	bic.w	r2, r2, #32
 8003086:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003096:	605a      	str	r2, [r3, #4]
          break;
 8003098:	e010      	b.n	80030bc <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030a8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0220 	orr.w	r2, r2, #32
 80030b8:	605a      	str	r2, [r3, #4]
          break;
 80030ba:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_ADCEx_InjectedStart_IT+0x19e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003140 <HAL_ADCEx_InjectedStart_IT+0x204>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d002      	beq.n	80030d6 <HAL_ADCEx_InjectedStart_IT+0x19a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	e003      	b.n	80030de <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80030d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80030d8:	e001      	b.n	80030de <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80030da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d008      	beq.n	80030f8 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d002      	beq.n	80030f8 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b07      	cmp	r3, #7
 80030f6:	d10d      	bne.n	8003114 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fdd5 	bl	8002cac <LL_ADC_INJ_GetTrigAuto>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d110      	bne.n	800312a <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fe8c 	bl	8002e2a <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003112:	e00a      	b.n	800312a <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003118:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003120:	e003      	b.n	800312a <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	50000100 	.word	0x50000100
 8003138:	50000300 	.word	0x50000300
 800313c:	50000700 	.word	0x50000700
 8003140:	50000500 	.word	0x50000500
 8003144:	50000400 	.word	0x50000400

08003148 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b0b6      	sub	sp, #216	@ 0xd8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80031d0:	2302      	movs	r3, #2
 80031d2:	f000 bcfd 	b.w	8003bd0 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d130      	bne.n	8003250 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b09      	cmp	r3, #9
 80031f4:	d179      	bne.n	80032ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d010      	beq.n	8003220 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	025b      	lsls	r3, r3, #9
 8003206:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003212:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800321e:	e007      	b.n	8003230 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	0e9b      	lsrs	r3, r3, #26
 8003226:	025b      	lsls	r3, r3, #9
 8003228:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800322c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003236:	4b84      	ldr	r3, [pc, #528]	@ (8003448 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003242:	430b      	orrs	r3, r1
 8003244:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800324c:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800324e:	e04c      	b.n	80032ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11d      	bne.n	8003294 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00d      	beq.n	800328a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800327c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003288:	e004      	b.n	8003294 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	3b01      	subs	r3, #1
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0e9b      	lsrs	r3, r3, #26
 800329a:	f003 021f 	and.w	r2, r3, #31
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80032c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032da:	4b5b      	ldr	r3, [pc, #364]	@ (8003448 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80032dc:	4013      	ands	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	430b      	orrs	r3, r1
 80032e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fdaf 	bl	8002e52 <LL_ADC_INJ_IsConversionOngoing>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d124      	bne.n	8003344 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003300:	2b00      	cmp	r3, #0
 8003302:	d112      	bne.n	800332a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003314:	055a      	lsls	r2, r3, #21
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800331c:	051b      	lsls	r3, r3, #20
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	e00c      	b.n	8003344 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800333a:	055a      	lsls	r2, r3, #21
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fd5b 	bl	8002e04 <LL_ADC_REG_IsConversionOngoing>
 800334e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fd7b 	bl	8002e52 <LL_ADC_INJ_IsConversionOngoing>
 800335c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 822e 	bne.w	80037c6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800336a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 8229 	bne.w	80037c6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d116      	bne.n	80033b2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800339c:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800339e:	e01f      	b.n	80033e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80033ae:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80033b0:	e016      	b.n	80033e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d109      	bne.n	80033d0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80033ce:	e007      	b.n	80033e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80033de:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d110      	bne.n	800340c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	430b      	orrs	r3, r1
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0202 	orr.w	r2, r2, #2
 8003408:	611a      	str	r2, [r3, #16]
 800340a:	e007      	b.n	800341c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0202 	bic.w	r2, r2, #2
 800341a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003424:	d112      	bne.n	800344c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	4619      	mov	r1, r3
 8003432:	f7ff fc49 	bl	8002cc8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fc21 	bl	8002c86 <LL_ADC_SetSamplingTimeCommonConfig>
 8003444:	e011      	b.n	800346a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8003446:	bf00      	nop
 8003448:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003458:	461a      	mov	r2, r3
 800345a:	f7ff fc35 	bl	8002cc8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fc0e 	bl	8002c86 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	08db      	lsrs	r3, r3, #3
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b04      	cmp	r3, #4
 800348a:	d022      	beq.n	80034d2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6919      	ldr	r1, [r3, #16]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800349c:	f7ff fb68 	bl	8002b70 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6919      	ldr	r1, [r3, #16]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	461a      	mov	r2, r3
 80034ae:	f7ff fbb4 	bl	8002c1a <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d102      	bne.n	80034c8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80034c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034c6:	e000      	b.n	80034ca <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80034c8:	2300      	movs	r3, #0
 80034ca:	461a      	mov	r2, r3
 80034cc:	f7ff fbc0 	bl	8002c50 <LL_ADC_SetOffsetSaturation>
 80034d0:	e179      	b.n	80037c6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fb6d 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 80034de:	4603      	mov	r3, r0
 80034e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_ADCEx_InjectedConfigChannel+0x352>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fb62 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 80034f4:	4603      	mov	r3, r0
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	e01e      	b.n	800353c <HAL_ADCEx_InjectedConfigChannel+0x390>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fb57 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 800350a:	4603      	mov	r3, r0
 800350c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800351c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003520:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e004      	b.n	800353a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8003530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	e018      	b.n	8003586 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800356c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e004      	b.n	8003586 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 800357c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003586:	429a      	cmp	r2, r3
 8003588:	d106      	bne.n	8003598 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fb26 	bl	8002be4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fb0a 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2101      	movs	r1, #1
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff faff 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 80035ba:	4603      	mov	r3, r0
 80035bc:	0e9b      	lsrs	r3, r3, #26
 80035be:	f003 021f 	and.w	r2, r3, #31
 80035c2:	e01e      	b.n	8003602 <HAL_ADCEx_InjectedConfigChannel+0x456>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff faf4 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80035e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80035ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80035f2:	2320      	movs	r3, #32
 80035f4:	e004      	b.n	8003600 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80035f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360a:	2b00      	cmp	r3, #0
 800360c:	d105      	bne.n	800361a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	0e9b      	lsrs	r3, r3, #26
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	e018      	b.n	800364c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800362e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003632:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003636:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800363e:	2320      	movs	r3, #32
 8003640:	e004      	b.n	800364c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003642:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800364c:	429a      	cmp	r2, r3
 800364e:	d106      	bne.n	800365e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fac3 	bl	8002be4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2102      	movs	r1, #2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff faa7 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 800366a:	4603      	mov	r3, r0
 800366c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2102      	movs	r1, #2
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fa9c 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 8003680:	4603      	mov	r3, r0
 8003682:	0e9b      	lsrs	r3, r3, #26
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	e01e      	b.n	80036c8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2102      	movs	r1, #2
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fa91 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 8003696:	4603      	mov	r3, r0
 8003698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80036a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80036b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e004      	b.n	80036c6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80036bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036c0:	fab3 f383 	clz	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	e014      	b.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80036ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80036f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80036fc:	2320      	movs	r3, #32
 80036fe:	e004      	b.n	800370a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8003700:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800370a:	429a      	cmp	r2, r3
 800370c:	d106      	bne.n	800371c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2200      	movs	r2, #0
 8003714:	2102      	movs	r1, #2
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fa64 	bl	8002be4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2103      	movs	r1, #3
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fa48 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 8003728:	4603      	mov	r3, r0
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2103      	movs	r1, #3
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fa3d 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 800373e:	4603      	mov	r3, r0
 8003740:	0e9b      	lsrs	r3, r3, #26
 8003742:	f003 021f 	and.w	r2, r3, #31
 8003746:	e017      	b.n	8003778 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2103      	movs	r1, #3
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fa32 	bl	8002bb8 <LL_ADC_GetOffsetChannel>
 8003754:	4603      	mov	r3, r0
 8003756:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003762:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003764:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800376a:	2320      	movs	r3, #32
 800376c:	e003      	b.n	8003776 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800376e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0e9b      	lsrs	r3, r3, #26
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	e011      	b.n	80037b4 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800379e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80037a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80037a8:	2320      	movs	r3, #32
 80037aa:	e003      	b.n	80037b4 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80037ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d106      	bne.n	80037c6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2200      	movs	r2, #0
 80037be:	2103      	movs	r1, #3
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fa0f 	bl	8002be4 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fada 	bl	8002d84 <LL_ADC_IsEnabled>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 813d 	bne.w	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	461a      	mov	r2, r3
 80037e6:	f7ff fa9b 	bl	8002d20 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4aa2      	ldr	r2, [pc, #648]	@ (8003a78 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	f040 812e 	bne.w	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	0e9b      	lsrs	r3, r3, #26
 800380c:	3301      	adds	r3, #1
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2b09      	cmp	r3, #9
 8003814:	bf94      	ite	ls
 8003816:	2301      	movls	r3, #1
 8003818:	2300      	movhi	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e019      	b.n	8003852 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800382c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003830:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8003836:	2320      	movs	r3, #32
 8003838:	e003      	b.n	8003842 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800383a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3301      	adds	r3, #1
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2b09      	cmp	r3, #9
 800384a:	bf94      	ite	ls
 800384c:	2301      	movls	r3, #1
 800384e:	2300      	movhi	r3, #0
 8003850:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003852:	2b00      	cmp	r3, #0
 8003854:	d079      	beq.n	800394a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385e:	2b00      	cmp	r3, #0
 8003860:	d107      	bne.n	8003872 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0e9b      	lsrs	r3, r3, #26
 8003868:	3301      	adds	r3, #1
 800386a:	069b      	lsls	r3, r3, #26
 800386c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003870:	e015      	b.n	800389e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003882:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800388a:	2320      	movs	r3, #32
 800388c:	e003      	b.n	8003896 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800388e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	3301      	adds	r3, #1
 8003898:	069b      	lsls	r3, r3, #26
 800389a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_ADCEx_InjectedConfigChannel+0x712>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	0e9b      	lsrs	r3, r3, #26
 80038b0:	3301      	adds	r3, #1
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	e017      	b.n	80038ee <HAL_ADCEx_InjectedConfigChannel+0x742>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80038cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80038d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80038d6:	2320      	movs	r3, #32
 80038d8:	e003      	b.n	80038e2 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80038da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	2101      	movs	r1, #1
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	ea42 0103 	orr.w	r1, r2, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_ADCEx_InjectedConfigChannel+0x768>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	0e9b      	lsrs	r3, r3, #26
 8003904:	3301      	adds	r3, #1
 8003906:	f003 021f 	and.w	r2, r3, #31
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	051b      	lsls	r3, r3, #20
 8003912:	e018      	b.n	8003946 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 800392c:	2320      	movs	r3, #32
 800392e:	e003      	b.n	8003938 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8003930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	3301      	adds	r3, #1
 800393a:	f003 021f 	and.w	r2, r3, #31
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003946:	430b      	orrs	r3, r1
 8003948:	e07e      	b.n	8003a48 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	0e9b      	lsrs	r3, r3, #26
 800395c:	3301      	adds	r3, #1
 800395e:	069b      	lsls	r3, r3, #26
 8003960:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003964:	e015      	b.n	8003992 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800397e:	2320      	movs	r3, #32
 8003980:	e003      	b.n	800398a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8003982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	3301      	adds	r3, #1
 800398c:	069b      	lsls	r3, r3, #26
 800398e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_ADCEx_InjectedConfigChannel+0x806>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	0e9b      	lsrs	r3, r3, #26
 80039a4:	3301      	adds	r3, #1
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	2101      	movs	r1, #1
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	e017      	b.n	80039e2 <HAL_ADCEx_InjectedConfigChannel+0x836>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	61bb      	str	r3, [r7, #24]
  return result;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80039ca:	2320      	movs	r3, #32
 80039cc:	e003      	b.n	80039d6 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2101      	movs	r1, #1
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	ea42 0103 	orr.w	r1, r2, r3
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <HAL_ADCEx_InjectedConfigChannel+0x862>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	3301      	adds	r3, #1
 80039fa:	f003 021f 	and.w	r2, r3, #31
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	3b1e      	subs	r3, #30
 8003a06:	051b      	lsls	r3, r3, #20
 8003a08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	e01b      	b.n	8003a46 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	60fb      	str	r3, [r7, #12]
  return result;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8003a26:	2320      	movs	r3, #32
 8003a28:	e003      	b.n	8003a32 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	fab3 f383 	clz	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	4613      	mov	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3b1e      	subs	r3, #30
 8003a40:	051b      	lsls	r3, r3, #20
 8003a42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a46:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f7ff f93b 	bl	8002cc8 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80b2 	beq.w	8003bc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a68:	d004      	beq.n	8003a74 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d109      	bne.n	8003a88 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8003a74:	4b03      	ldr	r3, [pc, #12]	@ (8003a84 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8003a76:	e008      	b.n	8003a8a <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8003a78:	407f0000 	.word	0x407f0000
 8003a7c:	80080000 	.word	0x80080000
 8003a80:	50000100 	.word	0x50000100
 8003a84:	50000300 	.word	0x50000300
 8003a88:	4b53      	ldr	r3, [pc, #332]	@ (8003bd8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f862 	bl	8002b54 <LL_ADC_GetCommonPathInternalCh>
 8003a90:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a50      	ldr	r2, [pc, #320]	@ (8003bdc <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a4f      	ldr	r2, [pc, #316]	@ (8003be0 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d139      	bne.n	8003b1c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d133      	bne.n	8003b1c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003abc:	d004      	beq.n	8003ac8 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a48      	ldr	r2, [pc, #288]	@ (8003be4 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d17a      	bne.n	8003bbe <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad0:	d004      	beq.n	8003adc <HAL_ADCEx_InjectedConfigChannel+0x930>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a44      	ldr	r2, [pc, #272]	@ (8003be8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8003adc:	4a43      	ldr	r2, [pc, #268]	@ (8003bec <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8003ade:	e000      	b.n	8003ae2 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8003ae0:	4a3d      	ldr	r2, [pc, #244]	@ (8003bd8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003ae2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ae6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7ff f81e 	bl	8002b2e <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003af2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf0 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf4 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	099a      	lsrs	r2, r3, #6
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003b0a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003b0c:	e002      	b.n	8003b14 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f9      	bne.n	8003b0e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b1a:	e050      	b.n	8003bbe <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a35      	ldr	r2, [pc, #212]	@ (8003bf8 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d125      	bne.n	8003b72 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d11f      	bne.n	8003b72 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2c      	ldr	r2, [pc, #176]	@ (8003be8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d104      	bne.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2e      	ldr	r2, [pc, #184]	@ (8003bfc <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d03d      	beq.n	8003bc2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b4e:	d004      	beq.n	8003b5a <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a24      	ldr	r2, [pc, #144]	@ (8003be8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8003b5a:	4a24      	ldr	r2, [pc, #144]	@ (8003bec <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8003b5c:	e000      	b.n	8003b60 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003b60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	f7fe ffdf 	bl	8002b2e <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b70:	e027      	b.n	8003bc2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d123      	bne.n	8003bc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11d      	bne.n	8003bc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a16      	ldr	r2, [pc, #88]	@ (8003be8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d018      	beq.n	8003bc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b9a:	d004      	beq.n	8003ba6 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a11      	ldr	r2, [pc, #68]	@ (8003be8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8003ba6:	4a11      	ldr	r2, [pc, #68]	@ (8003bec <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8003ba8:	e000      	b.n	8003bac <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8003baa:	4a0b      	ldr	r2, [pc, #44]	@ (8003bd8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003bac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f7fe ffb9 	bl	8002b2e <LL_ADC_SetCommonPathInternalCh>
 8003bbc:	e002      	b.n	8003bc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bc2:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bcc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	37d8      	adds	r7, #216	@ 0xd8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	50000700 	.word	0x50000700
 8003bdc:	c3210000 	.word	0xc3210000
 8003be0:	90c00010 	.word	0x90c00010
 8003be4:	50000600 	.word	0x50000600
 8003be8:	50000100 	.word	0x50000100
 8003bec:	50000300 	.word	0x50000300
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	053e2d63 	.word	0x053e2d63
 8003bf8:	c7520000 	.word	0xc7520000
 8003bfc:	50000500 	.word	0x50000500
 8003c00:	cb840000 	.word	0xcb840000

08003c04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003c04:	b590      	push	{r4, r7, lr}
 8003c06:	b0a1      	sub	sp, #132	@ 0x84
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e0e7      	b.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c3a:	d102      	bne.n	8003c42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	e009      	b.n	8003c56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a6e      	ldr	r2, [pc, #440]	@ (8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d102      	bne.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003c4c:	4b6d      	ldr	r3, [pc, #436]	@ (8003e04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	e001      	b.n	8003c56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0be      	b.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff f8c4 	bl	8002e04 <LL_ADC_REG_IsConversionOngoing>
 8003c7c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff f8be 	bl	8002e04 <LL_ADC_REG_IsConversionOngoing>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f040 80a0 	bne.w	8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003c90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f040 809c 	bne.w	8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ca0:	d004      	beq.n	8003cac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a55      	ldr	r2, [pc, #340]	@ (8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003cac:	4b56      	ldr	r3, [pc, #344]	@ (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003cae:	e000      	b.n	8003cb2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003cb0:	4b56      	ldr	r3, [pc, #344]	@ (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003cb2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d04b      	beq.n	8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003cbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cce:	035b      	lsls	r3, r3, #13
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ce0:	d004      	beq.n	8003cec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a45      	ldr	r2, [pc, #276]	@ (8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10f      	bne.n	8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003cec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003cf0:	f7ff f848 	bl	8002d84 <LL_ADC_IsEnabled>
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	4841      	ldr	r0, [pc, #260]	@ (8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cf8:	f7ff f844 	bl	8002d84 <LL_ADC_IsEnabled>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4323      	orrs	r3, r4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e012      	b.n	8003d32 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003d0c:	483c      	ldr	r0, [pc, #240]	@ (8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d0e:	f7ff f839 	bl	8002d84 <LL_ADC_IsEnabled>
 8003d12:	4604      	mov	r4, r0
 8003d14:	483b      	ldr	r0, [pc, #236]	@ (8003e04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d16:	f7ff f835 	bl	8002d84 <LL_ADC_IsEnabled>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	431c      	orrs	r4, r3
 8003d1e:	483c      	ldr	r0, [pc, #240]	@ (8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003d20:	f7ff f830 	bl	8002d84 <LL_ADC_IsEnabled>
 8003d24:	4603      	mov	r3, r0
 8003d26:	4323      	orrs	r3, r4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d056      	beq.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d3e:	f023 030f 	bic.w	r3, r3, #15
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	6811      	ldr	r1, [r2, #0]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	6892      	ldr	r2, [r2, #8]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d50:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d52:	e047      	b.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d68:	d004      	beq.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a23      	ldr	r2, [pc, #140]	@ (8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d10f      	bne.n	8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003d74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d78:	f7ff f804 	bl	8002d84 <LL_ADC_IsEnabled>
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	481f      	ldr	r0, [pc, #124]	@ (8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d80:	f7ff f800 	bl	8002d84 <LL_ADC_IsEnabled>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4323      	orrs	r3, r4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e012      	b.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003d94:	481a      	ldr	r0, [pc, #104]	@ (8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d96:	f7fe fff5 	bl	8002d84 <LL_ADC_IsEnabled>
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4819      	ldr	r0, [pc, #100]	@ (8003e04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d9e:	f7fe fff1 	bl	8002d84 <LL_ADC_IsEnabled>
 8003da2:	4603      	mov	r3, r0
 8003da4:	431c      	orrs	r4, r3
 8003da6:	481a      	ldr	r0, [pc, #104]	@ (8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003da8:	f7fe ffec 	bl	8002d84 <LL_ADC_IsEnabled>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4323      	orrs	r3, r4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf0c      	ite	eq
 8003db4:	2301      	moveq	r3, #1
 8003db6:	2300      	movne	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d012      	beq.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003dc6:	f023 030f 	bic.w	r3, r3, #15
 8003dca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003dcc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dce:	e009      	b.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003de2:	e000      	b.n	8003de6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003de4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3784      	adds	r7, #132	@ 0x84
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	50000100 	.word	0x50000100
 8003e00:	50000400 	.word	0x50000400
 8003e04:	50000500 	.word	0x50000500
 8003e08:	50000300 	.word	0x50000300
 8003e0c:	50000700 	.word	0x50000700
 8003e10:	50000600 	.word	0x50000600

08003e14 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e023      	b.n	8003e6e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd fb9e 	bl	800157c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e88:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e94:	4013      	ands	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eaa:	4a04      	ldr	r2, [pc, #16]	@ (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	60d3      	str	r3, [r2, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec4:	4b04      	ldr	r3, [pc, #16]	@ (8003ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	f003 0307 	and.w	r3, r3, #7
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db0b      	blt.n	8003f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	f003 021f 	and.w	r2, r3, #31
 8003ef4:	4907      	ldr	r1, [pc, #28]	@ (8003f14 <__NVIC_EnableIRQ+0x38>)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2001      	movs	r0, #1
 8003efe:	fa00 f202 	lsl.w	r2, r0, r2
 8003f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	e000e100 	.word	0xe000e100

08003f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	db0a      	blt.n	8003f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	490c      	ldr	r1, [pc, #48]	@ (8003f64 <__NVIC_SetPriority+0x4c>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	0112      	lsls	r2, r2, #4
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f40:	e00a      	b.n	8003f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4908      	ldr	r1, [pc, #32]	@ (8003f68 <__NVIC_SetPriority+0x50>)
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	3b04      	subs	r3, #4
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	440b      	add	r3, r1
 8003f56:	761a      	strb	r2, [r3, #24]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000e100 	.word	0xe000e100
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	@ 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f1c3 0307 	rsb	r3, r3, #7
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	bf28      	it	cs
 8003f8a:	2304      	movcs	r3, #4
 8003f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3304      	adds	r3, #4
 8003f92:	2b06      	cmp	r3, #6
 8003f94:	d902      	bls.n	8003f9c <NVIC_EncodePriority+0x30>
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3b03      	subs	r3, #3
 8003f9a:	e000      	b.n	8003f9e <NVIC_EncodePriority+0x32>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	401a      	ands	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	43d9      	mvns	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc4:	4313      	orrs	r3, r2
         );
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3724      	adds	r7, #36	@ 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fe4:	d301      	bcc.n	8003fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00f      	b.n	800400a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fea:	4a0a      	ldr	r2, [pc, #40]	@ (8004014 <SysTick_Config+0x40>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff2:	210f      	movs	r1, #15
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	f7ff ff8e 	bl	8003f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ffc:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <SysTick_Config+0x40>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004002:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <SysTick_Config+0x40>)
 8004004:	2207      	movs	r2, #7
 8004006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	e000e010 	.word	0xe000e010

08004018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff29 	bl	8003e78 <__NVIC_SetPriorityGrouping>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800403c:	f7ff ff40 	bl	8003ec0 <__NVIC_GetPriorityGrouping>
 8004040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f7ff ff90 	bl	8003f6c <NVIC_EncodePriority>
 800404c:	4602      	mov	r2, r0
 800404e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff5f 	bl	8003f18 <__NVIC_SetPriority>
}
 800405a:	bf00      	nop
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff33 	bl	8003edc <__NVIC_EnableIRQ>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff ffa4 	bl	8003fd4 <SysTick_Config>
 800408c:	4603      	mov	r3, r0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e08d      	b.n	80041c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <HAL_DMA_Init+0x138>)
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d80f      	bhi.n	80040d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	4b45      	ldr	r3, [pc, #276]	@ (80041d4 <HAL_DMA_Init+0x13c>)
 80040be:	4413      	add	r3, r2
 80040c0:	4a45      	ldr	r2, [pc, #276]	@ (80041d8 <HAL_DMA_Init+0x140>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	009a      	lsls	r2, r3, #2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a42      	ldr	r2, [pc, #264]	@ (80041dc <HAL_DMA_Init+0x144>)
 80040d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80040d4:	e00e      	b.n	80040f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	4b40      	ldr	r3, [pc, #256]	@ (80041e0 <HAL_DMA_Init+0x148>)
 80040de:	4413      	add	r3, r2
 80040e0:	4a3d      	ldr	r2, [pc, #244]	@ (80041d8 <HAL_DMA_Init+0x140>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	091b      	lsrs	r3, r3, #4
 80040e8:	009a      	lsls	r2, r3, #2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a3c      	ldr	r2, [pc, #240]	@ (80041e4 <HAL_DMA_Init+0x14c>)
 80040f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800410a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fa2c 	bl	80045a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004154:	d102      	bne.n	800415c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004170:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d010      	beq.n	800419c <HAL_DMA_Init+0x104>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b04      	cmp	r3, #4
 8004180:	d80c      	bhi.n	800419c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fa4c 	bl	8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	e008      	b.n	80041ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40020407 	.word	0x40020407
 80041d4:	bffdfff8 	.word	0xbffdfff8
 80041d8:	cccccccd 	.word	0xcccccccd
 80041dc:	40020000 	.word	0x40020000
 80041e0:	bffdfbf8 	.word	0xbffdfbf8
 80041e4:	40020400 	.word	0x40020400

080041e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_DMA_Start_IT+0x20>
 8004204:	2302      	movs	r3, #2
 8004206:	e066      	b.n	80042d6 <HAL_DMA_Start_IT+0xee>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d155      	bne.n	80042c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f970 	bl	8004526 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 020e 	orr.w	r2, r2, #14
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e00f      	b.n	8004280 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0204 	bic.w	r2, r2, #4
 800426e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 020a 	orr.w	r2, r2, #10
 800427e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800429c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e005      	b.n	80042d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
 80042d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d00d      	beq.n	8004312 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2204      	movs	r2, #4
 80042fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e047      	b.n	80043a2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 020e 	bic.w	r2, r2, #14
 8004320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004346:	f003 021f 	and.w	r2, r3, #31
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	2101      	movs	r1, #1
 8004350:	fa01 f202 	lsl.w	r2, r1, r2
 8004354:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800435e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004372:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004376:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004380:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
    }
  }
  return status;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2204      	movs	r2, #4
 80043ce:	409a      	lsls	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d026      	beq.n	8004426 <HAL_DMA_IRQHandler+0x7a>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d021      	beq.n	8004426 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d107      	bne.n	8004400 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0204 	bic.w	r2, r2, #4
 80043fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004404:	f003 021f 	and.w	r2, r3, #31
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	2104      	movs	r1, #4
 800440e:	fa01 f202 	lsl.w	r2, r1, r2
 8004412:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	2b00      	cmp	r3, #0
 800441a:	d071      	beq.n	8004500 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004424:	e06c      	b.n	8004500 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2202      	movs	r2, #2
 8004430:	409a      	lsls	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d02e      	beq.n	8004498 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d029      	beq.n	8004498 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10b      	bne.n	800446a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 020a 	bic.w	r2, r2, #10
 8004460:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446e:	f003 021f 	and.w	r2, r3, #31
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	2102      	movs	r1, #2
 8004478:	fa01 f202 	lsl.w	r2, r1, r2
 800447c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d038      	beq.n	8004500 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004496:	e033      	b.n	8004500 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2208      	movs	r2, #8
 80044a2:	409a      	lsls	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02a      	beq.n	8004502 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d025      	beq.n	8004502 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 020e 	bic.w	r2, r2, #14
 80044c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	f003 021f 	and.w	r2, r3, #31
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	2101      	movs	r1, #1
 80044d4:	fa01 f202 	lsl.w	r2, r1, r2
 80044d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d004      	beq.n	8004502 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004500:	bf00      	nop
 8004502:	bf00      	nop
}
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004518:	b2db      	uxtb	r3, r3
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800453c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800454e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f202 	lsl.w	r2, r1, r2
 8004562:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b10      	cmp	r3, #16
 8004572:	d108      	bne.n	8004586 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004584:	e007      	b.n	8004596 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	60da      	str	r2, [r3, #12]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b16      	ldr	r3, [pc, #88]	@ (800460c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d802      	bhi.n	80045be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80045b8:	4b15      	ldr	r3, [pc, #84]	@ (8004610 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e001      	b.n	80045c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80045be:	4b15      	ldr	r3, [pc, #84]	@ (8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80045c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3b08      	subs	r3, #8
 80045ce:	4a12      	ldr	r2, [pc, #72]	@ (8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	009a      	lsls	r2, r3, #2
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4413      	add	r3, r2
 80045e4:	461a      	mov	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a0b      	ldr	r2, [pc, #44]	@ (800461c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80045ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	2201      	movs	r2, #1
 80045f8:	409a      	lsls	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40020407 	.word	0x40020407
 8004610:	40020800 	.word	0x40020800
 8004614:	40020820 	.word	0x40020820
 8004618:	cccccccd 	.word	0xcccccccd
 800461c:	40020880 	.word	0x40020880

08004620 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4b0b      	ldr	r3, [pc, #44]	@ (8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a08      	ldr	r2, [pc, #32]	@ (8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004642:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3b01      	subs	r3, #1
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2201      	movs	r2, #1
 800464e:	409a      	lsls	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	1000823f 	.word	0x1000823f
 8004664:	40020940 	.word	0x40020940

08004668 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e147      	b.n	800490a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fc ff94 	bl	80015bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0210 	bic.w	r2, r2, #16
 80046a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046a4:	f7fd fac8 	bl	8001c38 <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046aa:	e012      	b.n	80046d2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046ac:	f7fd fac4 	bl	8001c38 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b0a      	cmp	r3, #10
 80046b8:	d90b      	bls.n	80046d2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046be:	f043 0201 	orr.w	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2203      	movs	r2, #3
 80046ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e11b      	b.n	800490a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d0e5      	beq.n	80046ac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046f0:	f7fd faa2 	bl	8001c38 <HAL_GetTick>
 80046f4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046f6:	e012      	b.n	800471e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046f8:	f7fd fa9e 	bl	8001c38 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b0a      	cmp	r3, #10
 8004704:	d90b      	bls.n	800471e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470a:	f043 0201 	orr.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2203      	movs	r2, #3
 8004716:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e0f5      	b.n	800490a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0e5      	beq.n	80046f8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0202 	orr.w	r2, r2, #2
 800473a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a74      	ldr	r2, [pc, #464]	@ (8004914 <HAL_FDCAN_Init+0x2ac>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d103      	bne.n	800474e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004746:	4a74      	ldr	r2, [pc, #464]	@ (8004918 <HAL_FDCAN_Init+0x2b0>)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	7c1b      	ldrb	r3, [r3, #16]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d108      	bne.n	8004768 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004764:	619a      	str	r2, [r3, #24]
 8004766:	e007      	b.n	8004778 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004776:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	7c5b      	ldrb	r3, [r3, #17]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d108      	bne.n	8004792 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800478e:	619a      	str	r2, [r3, #24]
 8004790:	e007      	b.n	80047a2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	7c9b      	ldrb	r3, [r3, #18]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d108      	bne.n	80047bc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047b8:	619a      	str	r2, [r3, #24]
 80047ba:	e007      	b.n	80047cc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047ca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80047f0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0210 	bic.w	r2, r2, #16
 8004800:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d108      	bne.n	800481c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0204 	orr.w	r2, r2, #4
 8004818:	619a      	str	r2, [r3, #24]
 800481a:	e02c      	b.n	8004876 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d028      	beq.n	8004876 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d01c      	beq.n	8004866 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800483a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0210 	orr.w	r2, r2, #16
 800484a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d110      	bne.n	8004876 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0220 	orr.w	r2, r2, #32
 8004862:	619a      	str	r2, [r3, #24]
 8004864:	e007      	b.n	8004876 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0220 	orr.w	r2, r2, #32
 8004874:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	3b01      	subs	r3, #1
 800487c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	3b01      	subs	r3, #1
 8004884:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004886:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800488e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	3b01      	subs	r3, #1
 8004898:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800489e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048a0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048aa:	d115      	bne.n	80048d8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	3b01      	subs	r3, #1
 80048b8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048ba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c0:	3b01      	subs	r3, #1
 80048c2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80048c4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	3b01      	subs	r3, #1
 80048ce:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80048d4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048d6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fc56 	bl	80051a0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40006400 	.word	0x40006400
 8004918:	40006500 	.word	0x40006500

0800491c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800492c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800492e:	7dfb      	ldrb	r3, [r7, #23]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d002      	beq.n	800493a <HAL_FDCAN_ConfigFilter+0x1e>
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d13d      	bne.n	80049b6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d119      	bne.n	8004976 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800494e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8004956:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e01d      	b.n	80049b2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	075a      	lsls	r2, r3, #29
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	079a      	lsls	r2, r3, #30
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4413      	add	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	3304      	adds	r3, #4
 80049aa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e006      	b.n	80049c4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ba:	f043 0202 	orr.w	r2, r3, #2
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
  }
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d110      	bne.n	8004a06 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e006      	b.n	8004a14 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0a:	f043 0204 	orr.w	r2, r3, #4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
  }
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d12c      	bne.n	8004a92 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e023      	b.n	8004aa0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fc02 	bl	8005278 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2101      	movs	r1, #1
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a80:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004a84:	2201      	movs	r2, #1
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e006      	b.n	8004aa0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a96:	f043 0208 	orr.w	r2, r3, #8
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b08b      	sub	sp, #44	@ 0x2c
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ac0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8004ac2:	7efb      	ldrb	r3, [r7, #27]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	f040 80e8 	bne.w	8004c9a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b40      	cmp	r3, #64	@ 0x40
 8004ace:	d137      	bne.n	8004b40 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d107      	bne.n	8004af0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0db      	b.n	8004ca8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af8:	0e1b      	lsrs	r3, r3, #24
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d10a      	bne.n	8004b18 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b0a:	0a5b      	lsrs	r3, r3, #9
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004b14:	2301      	movs	r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b20:	0a1b      	lsrs	r3, r3, #8
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	4613      	mov	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4413      	add	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	440b      	add	r3, r1
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3e:	e036      	b.n	8004bae <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d107      	bne.n	8004b60 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0a3      	b.n	8004ca8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d10a      	bne.n	8004b88 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004b84:	2301      	movs	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b90:	0a1b      	lsrs	r3, r3, #8
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	440b      	add	r3, r1
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	0c9b      	lsrs	r3, r3, #18
 8004bc8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e005      	b.n	8004bde <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	0c1b      	lsrs	r3, r3, #16
 8004c0c:	f003 020f 	and.w	r2, r3, #15
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0e1b      	lsrs	r3, r3, #24
 8004c32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	0fda      	lsrs	r2, r3, #31
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	3304      	adds	r3, #4
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	623b      	str	r3, [r7, #32]
 8004c52:	e00a      	b.n	8004c6a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	441a      	add	r2, r3
 8004c5a:	6839      	ldr	r1, [r7, #0]
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	440b      	add	r3, r1
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	3301      	adds	r3, #1
 8004c68:	623b      	str	r3, [r7, #32]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	4a11      	ldr	r2, [pc, #68]	@ (8004cb4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8004c70:	5cd3      	ldrb	r3, [r2, r3]
 8004c72:	461a      	mov	r2, r3
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d3ec      	bcc.n	8004c54 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d105      	bne.n	8004c8c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004c8a:	e004      	b.n	8004c96 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e006      	b.n	8004ca8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c9e:	f043 0208 	orr.w	r2, r3, #8
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	372c      	adds	r7, #44	@ 0x2c
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	08009b40 	.word	0x08009b40

08004cb8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cca:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d003      	beq.n	8004cda <HAL_FDCAN_ActivateNotification+0x22>
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	f040 80c8 	bne.w	8004e6a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d03b      	beq.n	8004d6e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d031      	beq.n	8004d6e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d004      	beq.n	8004d1e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d027      	beq.n	8004d6e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01d      	beq.n	8004d6e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d004      	beq.n	8004d46 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d013      	beq.n	8004d6e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00c      	beq.n	8004d7e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d107      	bne.n	8004d7e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d13b      	bne.n	8004e0a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d131      	bne.n	8004e0a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d004      	beq.n	8004dba <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f003 0304 	and.w	r3, r3, #4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d127      	bne.n	8004e0a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d004      	beq.n	8004dce <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11d      	bne.n	8004e0a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d113      	bne.n	8004e0a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d004      	beq.n	8004df6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00c      	beq.n	8004e1a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0202 	orr.w	r2, r2, #2
 8004e18:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e006      	b.n	8004e78 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6e:	f043 0202 	orr.w	r2, r3, #2
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
  }
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08c      	sub	sp, #48	@ 0x30
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e92:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eb8:	4013      	ands	r3, r2
 8004eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eda:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004ede:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004ef6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f12:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d006      	beq.n	8004f36 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2240      	movs	r2, #64	@ 0x40
 8004f2e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f916 	bl	8005162 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d019      	beq.n	8004f74 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d014      	beq.n	8004f74 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f52:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f6a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004f6c:	6939      	ldr	r1, [r7, #16]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f8d8 	bl	8005124 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f80:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f8a2 	bl	80050ce <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fb fc5a 	bl	8000854 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f897 	bl	80050e4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00c      	beq.n	8004fda <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fd2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f890 	bl	80050fa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d018      	beq.n	8005016 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d013      	beq.n	8005016 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004ff6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4013      	ands	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2280      	movs	r2, #128	@ 0x80
 800500c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f87c 	bl	800510e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00c      	beq.n	800503a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005032:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f880 	bl	800513a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00c      	beq.n	800505e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005056:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f878 	bl	800514e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00f      	beq.n	8005088 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800507a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005080:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005096:	69f9      	ldr	r1, [r7, #28]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f876 	bl	800518a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6a3a      	ldr	r2, [r7, #32]
 80050aa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f858 	bl	8005176 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80050c6:	bf00      	nop
 80050c8:	3730      	adds	r7, #48	@ 0x30
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80051a8:	4b30      	ldr	r3, [pc, #192]	@ (800526c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80051aa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005270 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d103      	bne.n	80051be <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80051bc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005274 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d103      	bne.n	80051d0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80051ce:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051de:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e6:	041a      	lsls	r2, r3, #16
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005204:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	061a      	lsls	r2, r3, #24
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	e005      	b.n	8005252 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3304      	adds	r3, #4
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	429a      	cmp	r2, r3
 800525c:	d3f3      	bcc.n	8005246 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800525e:	bf00      	nop
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	4000a400 	.word	0x4000a400
 8005270:	40006800 	.word	0x40006800
 8005274:	40006c00 	.word	0x40006c00

08005278 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005278:	b480      	push	{r7}
 800527a:	b089      	sub	sp, #36	@ 0x24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005296:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800529e:	4313      	orrs	r3, r2
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e00a      	b.n	80052ba <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80052ac:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80052b2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80052b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052b8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80052c4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80052ca:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80052d0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	4613      	mov	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	4413      	add	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	440b      	add	r3, r1
 80052ec:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	3304      	adds	r3, #4
 80052f8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	3304      	adds	r3, #4
 8005304:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e020      	b.n	800534e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3303      	adds	r3, #3
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	4413      	add	r3, r2
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3302      	adds	r3, #2
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	440b      	add	r3, r1
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005324:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	3301      	adds	r3, #1
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	440b      	add	r3, r1
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005332:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	440a      	add	r2, r1
 800533a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800533c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	3304      	adds	r3, #4
 8005346:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3304      	adds	r3, #4
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	4a06      	ldr	r2, [pc, #24]	@ (800536c <FDCAN_CopyMessageToRAM+0xf4>)
 8005354:	5cd3      	ldrb	r3, [r2, r3]
 8005356:	461a      	mov	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4293      	cmp	r3, r2
 800535c:	d3d6      	bcc.n	800530c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	3724      	adds	r7, #36	@ 0x24
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	08009b40 	.word	0x08009b40

08005370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800537e:	e15a      	b.n	8005636 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	2101      	movs	r1, #1
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	fa01 f303 	lsl.w	r3, r1, r3
 800538c:	4013      	ands	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 814c 	beq.w	8005630 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d005      	beq.n	80053b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d130      	bne.n	8005412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	2203      	movs	r2, #3
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4013      	ands	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053e6:	2201      	movs	r2, #1
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43db      	mvns	r3, r3
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4013      	ands	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	091b      	lsrs	r3, r3, #4
 80053fc:	f003 0201 	and.w	r2, r3, #1
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b03      	cmp	r3, #3
 800541c:	d017      	beq.n	800544e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	2203      	movs	r2, #3
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d123      	bne.n	80054a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	08da      	lsrs	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3208      	adds	r2, #8
 8005462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	220f      	movs	r2, #15
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4013      	ands	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	08da      	lsrs	r2, r3, #3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3208      	adds	r2, #8
 800549c:	6939      	ldr	r1, [r7, #16]
 800549e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	2203      	movs	r2, #3
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	43db      	mvns	r3, r3
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4013      	ands	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f003 0203 	and.w	r2, r3, #3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 80a6 	beq.w	8005630 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054e4:	4b5b      	ldr	r3, [pc, #364]	@ (8005654 <HAL_GPIO_Init+0x2e4>)
 80054e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e8:	4a5a      	ldr	r2, [pc, #360]	@ (8005654 <HAL_GPIO_Init+0x2e4>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80054f0:	4b58      	ldr	r3, [pc, #352]	@ (8005654 <HAL_GPIO_Init+0x2e4>)
 80054f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054fc:	4a56      	ldr	r2, [pc, #344]	@ (8005658 <HAL_GPIO_Init+0x2e8>)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	089b      	lsrs	r3, r3, #2
 8005502:	3302      	adds	r3, #2
 8005504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	220f      	movs	r2, #15
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4013      	ands	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005526:	d01f      	beq.n	8005568 <HAL_GPIO_Init+0x1f8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a4c      	ldr	r2, [pc, #304]	@ (800565c <HAL_GPIO_Init+0x2ec>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d019      	beq.n	8005564 <HAL_GPIO_Init+0x1f4>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a4b      	ldr	r2, [pc, #300]	@ (8005660 <HAL_GPIO_Init+0x2f0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_GPIO_Init+0x1f0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a4a      	ldr	r2, [pc, #296]	@ (8005664 <HAL_GPIO_Init+0x2f4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00d      	beq.n	800555c <HAL_GPIO_Init+0x1ec>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a49      	ldr	r2, [pc, #292]	@ (8005668 <HAL_GPIO_Init+0x2f8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d007      	beq.n	8005558 <HAL_GPIO_Init+0x1e8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a48      	ldr	r2, [pc, #288]	@ (800566c <HAL_GPIO_Init+0x2fc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <HAL_GPIO_Init+0x1e4>
 8005550:	2305      	movs	r3, #5
 8005552:	e00a      	b.n	800556a <HAL_GPIO_Init+0x1fa>
 8005554:	2306      	movs	r3, #6
 8005556:	e008      	b.n	800556a <HAL_GPIO_Init+0x1fa>
 8005558:	2304      	movs	r3, #4
 800555a:	e006      	b.n	800556a <HAL_GPIO_Init+0x1fa>
 800555c:	2303      	movs	r3, #3
 800555e:	e004      	b.n	800556a <HAL_GPIO_Init+0x1fa>
 8005560:	2302      	movs	r3, #2
 8005562:	e002      	b.n	800556a <HAL_GPIO_Init+0x1fa>
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <HAL_GPIO_Init+0x1fa>
 8005568:	2300      	movs	r3, #0
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	f002 0203 	and.w	r2, r2, #3
 8005570:	0092      	lsls	r2, r2, #2
 8005572:	4093      	lsls	r3, r2
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800557a:	4937      	ldr	r1, [pc, #220]	@ (8005658 <HAL_GPIO_Init+0x2e8>)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	3302      	adds	r3, #2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005588:	4b39      	ldr	r3, [pc, #228]	@ (8005670 <HAL_GPIO_Init+0x300>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	43db      	mvns	r3, r3
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4013      	ands	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055ac:	4a30      	ldr	r2, [pc, #192]	@ (8005670 <HAL_GPIO_Init+0x300>)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005670 <HAL_GPIO_Init+0x300>)
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	43db      	mvns	r3, r3
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4013      	ands	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055d6:	4a26      	ldr	r2, [pc, #152]	@ (8005670 <HAL_GPIO_Init+0x300>)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80055dc:	4b24      	ldr	r3, [pc, #144]	@ (8005670 <HAL_GPIO_Init+0x300>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4013      	ands	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005600:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <HAL_GPIO_Init+0x300>)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005606:	4b1a      	ldr	r3, [pc, #104]	@ (8005670 <HAL_GPIO_Init+0x300>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	43db      	mvns	r3, r3
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4013      	ands	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800562a:	4a11      	ldr	r2, [pc, #68]	@ (8005670 <HAL_GPIO_Init+0x300>)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	3301      	adds	r3, #1
 8005634:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	f47f ae9d 	bne.w	8005380 <HAL_GPIO_Init+0x10>
  }
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40021000 	.word	0x40021000
 8005658:	40010000 	.word	0x40010000
 800565c:	48000400 	.word	0x48000400
 8005660:	48000800 	.word	0x48000800
 8005664:	48000c00 	.word	0x48000c00
 8005668:	48001000 	.word	0x48001000
 800566c:	48001400 	.word	0x48001400
 8005670:	40010400 	.word	0x40010400

08005674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	807b      	strh	r3, [r7, #2]
 8005680:	4613      	mov	r3, r2
 8005682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005684:	787b      	ldrb	r3, [r7, #1]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800568a:	887a      	ldrh	r2, [r7, #2]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005690:	e002      	b.n	8005698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005692:	887a      	ldrh	r2, [r7, #2]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80056ae:	4b08      	ldr	r3, [pc, #32]	@ (80056d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d006      	beq.n	80056c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056ba:	4a05      	ldr	r2, [pc, #20]	@ (80056d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056bc:	88fb      	ldrh	r3, [r7, #6]
 80056be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 f806 	bl	80056d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40010400 	.word	0x40010400

080056d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e08d      	b.n	8005818 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d106      	bne.n	8005716 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7fb ffc7 	bl	80016a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2224      	movs	r2, #36	@ 0x24
 800571a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0201 	bic.w	r2, r2, #1
 800572c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800573a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800574a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d107      	bne.n	8005764 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	e006      	b.n	8005772 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005770:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d108      	bne.n	800578c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	e007      	b.n	800579c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800579a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69d9      	ldr	r1, [r3, #28]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08a      	sub	sp, #40	@ 0x28
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	461a      	mov	r2, r3
 800582c:	460b      	mov	r3, r1
 800582e:	817b      	strh	r3, [r7, #10]
 8005830:	4613      	mov	r3, r2
 8005832:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b20      	cmp	r3, #32
 8005842:	f040 80ef 	bne.w	8005a24 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005854:	d101      	bne.n	800585a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005856:	2302      	movs	r3, #2
 8005858:	e0e5      	b.n	8005a26 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005864:	2302      	movs	r3, #2
 8005866:	e0de      	b.n	8005a26 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2221      	movs	r2, #33	@ 0x21
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2210      	movs	r2, #16
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	893a      	ldrh	r2, [r7, #8]
 8005890:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a66      	ldr	r2, [pc, #408]	@ (8005a30 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005896:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a66      	ldr	r2, [pc, #408]	@ (8005a34 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800589c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2bff      	cmp	r3, #255	@ 0xff
 80058a6:	d906      	bls.n	80058b6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	22ff      	movs	r2, #255	@ 0xff
 80058ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80058ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058b2:	61fb      	str	r3, [r7, #28]
 80058b4:	e007      	b.n	80058c6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80058c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058c4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01a      	beq.n	8005904 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005908:	2b00      	cmp	r3, #0
 800590a:	d074      	beq.n	80059f6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	2b00      	cmp	r3, #0
 8005912:	d022      	beq.n	800595a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005918:	4a47      	ldr	r2, [pc, #284]	@ (8005a38 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800591a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005920:	4a46      	ldr	r2, [pc, #280]	@ (8005a3c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005922:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	2200      	movs	r2, #0
 8005932:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005944:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800594a:	f7fe fc4d 	bl	80041e8 <HAL_DMA_Start_IT>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d13a      	bne.n	80059ce <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005958:	e013      	b.n	8005982 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e051      	b.n	8005a26 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005986:	b2db      	uxtb	r3, r3
 8005988:	3301      	adds	r3, #1
 800598a:	b2da      	uxtb	r2, r3
 800598c:	8979      	ldrh	r1, [r7, #10]
 800598e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a40 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f001 fcbb 	bl	8007310 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80059b4:	2110      	movs	r1, #16
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f001 fcdc 	bl	8007374 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	e028      	b.n	8005a20 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e2:	f043 0210 	orr.w	r2, r3, #16
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e017      	b.n	8005a26 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a12      	ldr	r2, [pc, #72]	@ (8005a44 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80059fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	8979      	ldrh	r1, [r7, #10]
 8005a02:	4b0f      	ldr	r3, [pc, #60]	@ (8005a40 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f001 fc80 	bl	8007310 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a18:	2101      	movs	r1, #1
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f001 fcaa 	bl	8007374 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	e000      	b.n	8005a26 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005a24:	2302      	movs	r3, #2
  }
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	ffff0000 	.word	0xffff0000
 8005a34:	080061fb 	.word	0x080061fb
 8005a38:	0800717b 	.word	0x0800717b
 8005a3c:	080072a7 	.word	0x080072a7
 8005a40:	80002000 	.word	0x80002000
 8005a44:	08005dbb 	.word	0x08005dbb

08005a48 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	461a      	mov	r2, r3
 8005a54:	460b      	mov	r3, r1
 8005a56:	817b      	strh	r3, [r7, #10]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	f040 80cd 	bne.w	8005c04 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a78:	d101      	bne.n	8005a7e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e0c3      	b.n	8005c06 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d101      	bne.n	8005a8c <HAL_I2C_Master_Receive_DMA+0x44>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e0bc      	b.n	8005c06 <HAL_I2C_Master_Receive_DMA+0x1be>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2222      	movs	r2, #34	@ 0x22
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2210      	movs	r2, #16
 8005aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	893a      	ldrh	r2, [r7, #8]
 8005ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4a55      	ldr	r2, [pc, #340]	@ (8005c10 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005aba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a55      	ldr	r2, [pc, #340]	@ (8005c14 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005ac0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2bff      	cmp	r3, #255	@ 0xff
 8005aca:	d906      	bls.n	8005ada <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	22ff      	movs	r2, #255	@ 0xff
 8005ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005ad2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	e007      	b.n	8005aea <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ae4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ae8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d070      	beq.n	8005bd4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d020      	beq.n	8005b3c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afe:	4a46      	ldr	r2, [pc, #280]	@ (8005c18 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005b00:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b06:	4a45      	ldr	r2, [pc, #276]	@ (8005c1c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005b08:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0e:	2200      	movs	r2, #0
 8005b10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b16:	2200      	movs	r2, #0
 8005b18:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3324      	adds	r3, #36	@ 0x24
 8005b24:	4619      	mov	r1, r3
 8005b26:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005b2c:	f7fe fb5c 	bl	80041e8 <HAL_DMA_Start_IT>
 8005b30:	4603      	mov	r3, r0
 8005b32:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d138      	bne.n	8005bac <HAL_I2C_Master_Receive_DMA+0x164>
 8005b3a:	e013      	b.n	8005b64 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e050      	b.n	8005c06 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	8979      	ldrh	r1, [r7, #10]
 8005b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c20 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f001 fbcc 	bl	8007310 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005b92:	2110      	movs	r1, #16
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f001 fbed 	bl	8007374 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e029      	b.n	8005c00 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc0:	f043 0210 	orr.w	r2, r3, #16
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e018      	b.n	8005c06 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a13      	ldr	r2, [pc, #76]	@ (8005c24 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005bd8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	8979      	ldrh	r1, [r7, #10]
 8005be2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c20 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f001 fb90 	bl	8007310 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f001 fbba 	bl	8007374 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e000      	b.n	8005c06 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
  }
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	ffff0000 	.word	0xffff0000
 8005c14:	080061fb 	.word	0x080061fb
 8005c18:	08007211 	.word	0x08007211
 8005c1c:	080072a7 	.word	0x080072a7
 8005c20:	80002400 	.word	0x80002400
 8005c24:	08005dbb 	.word	0x08005dbb

08005c28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	68f9      	ldr	r1, [r7, #12]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	4798      	blx	r3
  }
}
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00f      	beq.n	8005c9e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8c:	f043 0201 	orr.w	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c9c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00f      	beq.n	8005cc8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb6:	f043 0208 	orr.w	r2, r3, #8
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cc6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00f      	beq.n	8005cf2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce0:	f043 0202 	orr.w	r2, r3, #2
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cf0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 030b 	and.w	r3, r3, #11
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005d02:	68f9      	ldr	r1, [r7, #12]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 f8fd 	bl	8006f04 <I2C_ITError>
  }
}
 8005d0a:	bf00      	nop
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	460b      	mov	r3, r1
 8005d44:	70fb      	strb	r3, [r7, #3]
 8005d46:	4613      	mov	r3, r2
 8005d48:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b088      	sub	sp, #32
 8005dbe:	af02      	add	r7, sp, #8
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <I2C_Master_ISR_IT+0x1e>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e113      	b.n	8006000 <I2C_Master_ISR_IT+0x246>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d012      	beq.n	8005e10 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00d      	beq.n	8005e10 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e00:	f043 0204 	orr.w	r2, r3, #4
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f001 f992 	bl	8007132 <I2C_Flush_TXDR>
 8005e0e:	e0e4      	b.n	8005fda <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d022      	beq.n	8005e60 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01d      	beq.n	8005e60 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 0304 	bic.w	r3, r3, #4
 8005e2a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e5e:	e0bc      	b.n	8005fda <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d128      	bne.n	8005ebc <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d023      	beq.n	8005ebc <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01e      	beq.n	8005ebc <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80a8 	beq.w	8005fda <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	781a      	ldrb	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005eba:	e08e      	b.n	8005fda <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d05c      	beq.n	8005f80 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d057      	beq.n	8005f80 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d040      	beq.n	8005f5c <I2C_Master_ISR_IT+0x1a2>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d13c      	bne.n	8005f5c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eee:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2bff      	cmp	r3, #255	@ 0xff
 8005ef8:	d90e      	bls.n	8005f18 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	22ff      	movs	r2, #255	@ 0xff
 8005efe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	8a79      	ldrh	r1, [r7, #18]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f001 f9fd 	bl	8007310 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f16:	e032      	b.n	8005f7e <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f2a:	d00b      	beq.n	8005f44 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f30:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f36:	8a79      	ldrh	r1, [r7, #18]
 8005f38:	2000      	movs	r0, #0
 8005f3a:	9000      	str	r0, [sp, #0]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f001 f9e7 	bl	8007310 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f42:	e01c      	b.n	8005f7e <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	8a79      	ldrh	r1, [r7, #18]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f001 f9db 	bl	8007310 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f5a:	e010      	b.n	8005f7e <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f6a:	d003      	beq.n	8005f74 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 fcb0 	bl	80068d2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f72:	e032      	b.n	8005fda <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f74:	2140      	movs	r1, #64	@ 0x40
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 ffc4 	bl	8006f04 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f7c:	e02d      	b.n	8005fda <I2C_Master_ISR_IT+0x220>
 8005f7e:	e02c      	b.n	8005fda <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d027      	beq.n	8005fda <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d022      	beq.n	8005fda <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d119      	bne.n	8005fd2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fac:	d015      	beq.n	8005fda <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fb6:	d108      	bne.n	8005fca <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fc6:	605a      	str	r2, [r3, #4]
 8005fc8:	e007      	b.n	8005fda <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fc81 	bl	80068d2 <I2C_ITMasterSeqCplt>
 8005fd0:	e003      	b.n	8005fda <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fd2:	2140      	movs	r1, #64	@ 0x40
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 ff95 	bl	8006f04 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005fee:	6979      	ldr	r1, [r7, #20]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 fd07 	bl	8006a04 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006018:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <I2C_Slave_ISR_IT+0x24>
 8006028:	2302      	movs	r3, #2
 800602a:	e0e2      	b.n	80061f2 <I2C_Slave_ISR_IT+0x1ea>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006048:	6939      	ldr	r1, [r7, #16]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fda2 	bl	8006b94 <I2C_ITSlaveCplt>
 8006050:	e0ca      	b.n	80061e8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b00      	cmp	r3, #0
 800605a:	d04b      	beq.n	80060f4 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006062:	2b00      	cmp	r3, #0
 8006064:	d046      	beq.n	80060f4 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d128      	bne.n	80060c2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b28      	cmp	r3, #40	@ 0x28
 800607a:	d108      	bne.n	800608e <I2C_Slave_ISR_IT+0x86>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006082:	d104      	bne.n	800608e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006084:	6939      	ldr	r1, [r7, #16]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fee8 	bl	8006e5c <I2C_ITListenCplt>
 800608c:	e031      	b.n	80060f2 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b29      	cmp	r3, #41	@ 0x29
 8006098:	d10e      	bne.n	80060b8 <I2C_Slave_ISR_IT+0xb0>
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060a0:	d00a      	beq.n	80060b8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2210      	movs	r2, #16
 80060a8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f001 f841 	bl	8007132 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fc4b 	bl	800694c <I2C_ITSlaveSeqCplt>
 80060b6:	e01c      	b.n	80060f2 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2210      	movs	r2, #16
 80060be:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80060c0:	e08f      	b.n	80061e2 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2210      	movs	r2, #16
 80060c8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ce:	f043 0204 	orr.w	r2, r3, #4
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <I2C_Slave_ISR_IT+0xdc>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060e2:	d17e      	bne.n	80061e2 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e8:	4619      	mov	r1, r3
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 ff0a 	bl	8006f04 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80060f0:	e077      	b.n	80061e2 <I2C_Slave_ISR_IT+0x1da>
 80060f2:	e076      	b.n	80061e2 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d02f      	beq.n	800615e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006104:	2b00      	cmp	r3, #0
 8006106:	d02a      	beq.n	800615e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d018      	beq.n	8006144 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d14b      	bne.n	80061e6 <I2C_Slave_ISR_IT+0x1de>
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006154:	d047      	beq.n	80061e6 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fbf8 	bl	800694c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800615c:	e043      	b.n	80061e6 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800616e:	2b00      	cmp	r3, #0
 8006170:	d004      	beq.n	800617c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006172:	6939      	ldr	r1, [r7, #16]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fb28 	bl	80067ca <I2C_ITAddrCplt>
 800617a:	e035      	b.n	80061e8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d030      	beq.n	80061e8 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800618c:	2b00      	cmp	r3, #0
 800618e:	d02b      	beq.n	80061e8 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80061ca:	e00d      	b.n	80061e8 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061d2:	d002      	beq.n	80061da <I2C_Slave_ISR_IT+0x1d2>
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fbb6 	bl	800694c <I2C_ITSlaveSeqCplt>
 80061e0:	e002      	b.n	80061e8 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80061e6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b088      	sub	sp, #32
 80061fe:	af02      	add	r7, sp, #8
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <I2C_Master_ISR_DMA+0x1a>
 8006210:	2302      	movs	r3, #2
 8006212:	e0d9      	b.n	80063c8 <I2C_Master_ISR_DMA+0x1ce>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800622c:	2b00      	cmp	r3, #0
 800622e:	d011      	beq.n	8006254 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2210      	movs	r2, #16
 8006236:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623c:	f043 0204 	orr.w	r2, r3, #4
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006244:	2120      	movs	r1, #32
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f001 f894 	bl	8007374 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 ff70 	bl	8007132 <I2C_Flush_TXDR>
 8006252:	e0b4      	b.n	80063be <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800625a:	2b00      	cmp	r3, #0
 800625c:	d071      	beq.n	8006342 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006264:	2b00      	cmp	r3, #0
 8006266:	d06c      	beq.n	8006342 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006276:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d04e      	beq.n	8006320 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	b29b      	uxth	r3, r3
 800628a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800628e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2bff      	cmp	r3, #255	@ 0xff
 8006298:	d906      	bls.n	80062a8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	22ff      	movs	r2, #255	@ 0xff
 800629e:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80062a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e010      	b.n	80062ca <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062ba:	d003      	beq.n	80062c4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e002      	b.n	80062ca <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80062c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062c8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	8a79      	ldrh	r1, [r7, #18]
 80062d2:	2300      	movs	r3, #0
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f001 f819 	bl	8007310 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b22      	cmp	r3, #34	@ 0x22
 80062fa:	d108      	bne.n	800630e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800630a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800630c:	e057      	b.n	80063be <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800631c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800631e:	e04e      	b.n	80063be <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800632a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800632e:	d003      	beq.n	8006338 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 face 	bl	80068d2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006336:	e042      	b.n	80063be <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006338:	2140      	movs	r1, #64	@ 0x40
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 fde2 	bl	8006f04 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006340:	e03d      	b.n	80063be <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d028      	beq.n	800639e <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006352:	2b00      	cmp	r3, #0
 8006354:	d023      	beq.n	800639e <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d119      	bne.n	8006394 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800636a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800636e:	d025      	beq.n	80063bc <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006378:	d108      	bne.n	800638c <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006388:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800638a:	e017      	b.n	80063bc <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 faa0 	bl	80068d2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006392:	e013      	b.n	80063bc <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006394:	2140      	movs	r1, #64	@ 0x40
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fdb4 	bl	8006f04 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800639c:	e00e      	b.n	80063bc <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fb25 	bl	8006a04 <I2C_ITMasterCplt>
 80063ba:	e000      	b.n	80063be <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80063bc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80063dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006614 <I2C_Mem_ISR_DMA+0x244>)
 80063de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <I2C_Mem_ISR_DMA+0x1e>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e10e      	b.n	800660c <I2C_Mem_ISR_DMA+0x23c>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d016      	beq.n	800642e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006406:	2b00      	cmp	r3, #0
 8006408:	d011      	beq.n	800642e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2210      	movs	r2, #16
 8006410:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006416:	f043 0204 	orr.w	r2, r3, #4
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800641e:	2120      	movs	r1, #32
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 ffa7 	bl	8007374 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fe83 	bl	8007132 <I2C_Flush_TXDR>
 800642c:	e0e9      	b.n	8006602 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00e      	beq.n	8006456 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800644a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f04f 32ff 	mov.w	r2, #4294967295
 8006452:	651a      	str	r2, [r3, #80]	@ 0x50
 8006454:	e0d5      	b.n	8006602 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645c:	2b00      	cmp	r3, #0
 800645e:	d05f      	beq.n	8006520 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006466:	2b00      	cmp	r3, #0
 8006468:	d05a      	beq.n	8006520 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800646a:	2101      	movs	r1, #1
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f001 f805 	bl	800747c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006472:	2110      	movs	r1, #16
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 ff7d 	bl	8007374 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d048      	beq.n	8006516 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	2bff      	cmp	r3, #255	@ 0xff
 800648c:	d910      	bls.n	80064b0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	22ff      	movs	r2, #255	@ 0xff
 8006492:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006498:	b299      	uxth	r1, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	2300      	movs	r3, #0
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 ff31 	bl	8007310 <I2C_TransferConfig>
 80064ae:	e011      	b.n	80064d4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064be:	b299      	uxth	r1, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	2300      	movs	r3, #0
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 ff1e 	bl	8007310 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b22      	cmp	r3, #34	@ 0x22
 80064f0:	d108      	bne.n	8006504 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006500:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006502:	e07e      	b.n	8006602 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006512:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006514:	e075      	b.n	8006602 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006516:	2140      	movs	r1, #64	@ 0x40
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fcf3 	bl	8006f04 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800651e:	e070      	b.n	8006602 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d05d      	beq.n	80065e6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006530:	2b00      	cmp	r3, #0
 8006532:	d058      	beq.n	80065e6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006534:	2101      	movs	r1, #1
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 ffa0 	bl	800747c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800653c:	2110      	movs	r1, #16
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 ff18 	bl	8007374 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b22      	cmp	r3, #34	@ 0x22
 800654e:	d101      	bne.n	8006554 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006550:	4b31      	ldr	r3, [pc, #196]	@ (8006618 <I2C_Mem_ISR_DMA+0x248>)
 8006552:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2bff      	cmp	r3, #255	@ 0xff
 800655c:	d910      	bls.n	8006580 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22ff      	movs	r2, #255	@ 0xff
 8006562:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006568:	b299      	uxth	r1, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800656e:	b2da      	uxtb	r2, r3
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fec9 	bl	8007310 <I2C_TransferConfig>
 800657e:	e011      	b.n	80065a4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800658e:	b299      	uxth	r1, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006594:	b2da      	uxtb	r2, r3
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 feb6 	bl	8007310 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b22      	cmp	r3, #34	@ 0x22
 80065c0:	d108      	bne.n	80065d4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065d0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065d2:	e016      	b.n	8006602 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065e2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065e4:	e00d      	b.n	8006602 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fa01 	bl	8006a04 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	80002000 	.word	0x80002000
 8006618:	80002400 	.word	0x80002400

0800661c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <I2C_Slave_ISR_DMA+0x24>
 800663c:	2302      	movs	r3, #2
 800663e:	e0c0      	b.n	80067c2 <I2C_Slave_ISR_DMA+0x1a6>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d009      	beq.n	8006666 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006658:	2b00      	cmp	r3, #0
 800665a:	d004      	beq.n	8006666 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 fa98 	bl	8006b94 <I2C_ITSlaveCplt>
 8006664:	e0a8      	b.n	80067b8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8095 	beq.w	800679c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 808f 	beq.w	800679c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800668e:	2b00      	cmp	r3, #0
 8006690:	d07d      	beq.n	800678e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80066b0:	2301      	movs	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00c      	beq.n	80066d6 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80066d2:	2301      	movs	r3, #1
 80066d4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d128      	bne.n	800672e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b28      	cmp	r3, #40	@ 0x28
 80066e6:	d108      	bne.n	80066fa <I2C_Slave_ISR_DMA+0xde>
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066ee:	d104      	bne.n	80066fa <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fbb2 	bl	8006e5c <I2C_ITListenCplt>
 80066f8:	e048      	b.n	800678c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b29      	cmp	r3, #41	@ 0x29
 8006704:	d10e      	bne.n	8006724 <I2C_Slave_ISR_DMA+0x108>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800670c:	d00a      	beq.n	8006724 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2210      	movs	r2, #16
 8006714:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 fd0b 	bl	8007132 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f915 	bl	800694c <I2C_ITSlaveSeqCplt>
 8006722:	e033      	b.n	800678c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2210      	movs	r2, #16
 800672a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800672c:	e034      	b.n	8006798 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2210      	movs	r2, #16
 8006734:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673a:	f043 0204 	orr.w	r2, r3, #4
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006748:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <I2C_Slave_ISR_DMA+0x13c>
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006756:	d11f      	bne.n	8006798 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b21      	cmp	r3, #33	@ 0x21
 800675c:	d002      	beq.n	8006764 <I2C_Slave_ISR_DMA+0x148>
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	2b29      	cmp	r3, #41	@ 0x29
 8006762:	d103      	bne.n	800676c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2221      	movs	r2, #33	@ 0x21
 8006768:	631a      	str	r2, [r3, #48]	@ 0x30
 800676a:	e008      	b.n	800677e <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b22      	cmp	r3, #34	@ 0x22
 8006770:	d002      	beq.n	8006778 <I2C_Slave_ISR_DMA+0x15c>
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	2b2a      	cmp	r3, #42	@ 0x2a
 8006776:	d102      	bne.n	800677e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2222      	movs	r2, #34	@ 0x22
 800677c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006782:	4619      	mov	r1, r3
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 fbbd 	bl	8006f04 <I2C_ITError>
      if (treatdmanack == 1U)
 800678a:	e005      	b.n	8006798 <I2C_Slave_ISR_DMA+0x17c>
 800678c:	e004      	b.n	8006798 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2210      	movs	r2, #16
 8006794:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006796:	e00f      	b.n	80067b8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8006798:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800679a:	e00d      	b.n	80067b8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f809 	bl	80067ca <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80067e0:	2b28      	cmp	r3, #40	@ 0x28
 80067e2:	d16a      	bne.n	80068ba <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	0c1b      	lsrs	r3, r3, #16
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	0c1b      	lsrs	r3, r3, #16
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006802:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006810:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800681e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d138      	bne.n	800689a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006828:	897b      	ldrh	r3, [r7, #10]
 800682a:	09db      	lsrs	r3, r3, #7
 800682c:	b29a      	uxth	r2, r3
 800682e:	89bb      	ldrh	r3, [r7, #12]
 8006830:	4053      	eors	r3, r2
 8006832:	b29b      	uxth	r3, r3
 8006834:	f003 0306 	and.w	r3, r3, #6
 8006838:	2b00      	cmp	r3, #0
 800683a:	d11c      	bne.n	8006876 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800683c:	897b      	ldrh	r3, [r7, #10]
 800683e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800684e:	2b02      	cmp	r3, #2
 8006850:	d13b      	bne.n	80068ca <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2208      	movs	r2, #8
 800685e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006868:	89ba      	ldrh	r2, [r7, #12]
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff fa63 	bl	8005d3a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006874:	e029      	b.n	80068ca <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006876:	893b      	ldrh	r3, [r7, #8]
 8006878:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800687a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fdfc 	bl	800747c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800688c:	89ba      	ldrh	r2, [r7, #12]
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff fa51 	bl	8005d3a <HAL_I2C_AddrCallback>
}
 8006898:	e017      	b.n	80068ca <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800689a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fdec 	bl	800747c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80068ac:	89ba      	ldrh	r2, [r7, #12]
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff fa41 	bl	8005d3a <HAL_I2C_AddrCallback>
}
 80068b8:	e007      	b.n	80068ca <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2208      	movs	r2, #8
 80068c0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b21      	cmp	r3, #33	@ 0x21
 80068ec:	d115      	bne.n	800691a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2211      	movs	r2, #17
 80068fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006902:	2101      	movs	r1, #1
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fdb9 	bl	800747c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7f9 fd48 	bl	80003a8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006918:	e014      	b.n	8006944 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2212      	movs	r2, #18
 8006926:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800692e:	2102      	movs	r1, #2
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fda3 	bl	800747c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7f9 fd40 	bl	80003c4 <HAL_I2C_MasterRxCpltCallback>
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d008      	beq.n	8006980 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e00c      	b.n	800699a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006998:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b29      	cmp	r3, #41	@ 0x29
 80069a4:	d112      	bne.n	80069cc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2228      	movs	r2, #40	@ 0x28
 80069aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2221      	movs	r2, #33	@ 0x21
 80069b2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069b4:	2101      	movs	r1, #1
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fd60 	bl	800747c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff f9a4 	bl	8005d12 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80069ca:	e017      	b.n	80069fc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80069d6:	d111      	bne.n	80069fc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2228      	movs	r2, #40	@ 0x28
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2222      	movs	r2, #34	@ 0x22
 80069e4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80069e6:	2102      	movs	r1, #2
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fd47 	bl	800747c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff f995 	bl	8005d26 <HAL_I2C_SlaveRxCpltCallback>
}
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2220      	movs	r2, #32
 8006a18:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b21      	cmp	r3, #33	@ 0x21
 8006a24:	d107      	bne.n	8006a36 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a26:	2101      	movs	r1, #1
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fd27 	bl	800747c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2211      	movs	r2, #17
 8006a32:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a34:	e00c      	b.n	8006a50 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b22      	cmp	r3, #34	@ 0x22
 8006a40:	d106      	bne.n	8006a50 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a42:	2102      	movs	r1, #2
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fd19 	bl	800747c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2212      	movs	r2, #18
 8006a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6859      	ldr	r1, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8006b8c <I2C_ITMasterCplt+0x188>)
 8006a5c:	400b      	ands	r3, r1
 8006a5e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a49      	ldr	r2, [pc, #292]	@ (8006b90 <I2C_ITMasterCplt+0x18c>)
 8006a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a82:	f043 0204 	orr.w	r2, r3, #4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b60      	cmp	r3, #96	@ 0x60
 8006a94:	d10a      	bne.n	8006aac <I2C_ITMasterCplt+0xa8>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fb40 	bl	8007132 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b60      	cmp	r3, #96	@ 0x60
 8006ac2:	d002      	beq.n	8006aca <I2C_ITMasterCplt+0xc6>
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d006      	beq.n	8006ad8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fa17 	bl	8006f04 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ad6:	e054      	b.n	8006b82 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b21      	cmp	r3, #33	@ 0x21
 8006ae2:	d124      	bne.n	8006b2e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d10b      	bne.n	8006b16 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff f92b 	bl	8005d6a <HAL_I2C_MemTxCpltCallback>
}
 8006b14:	e035      	b.n	8006b82 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7f9 fc3e 	bl	80003a8 <HAL_I2C_MasterTxCpltCallback>
}
 8006b2c:	e029      	b.n	8006b82 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b22      	cmp	r3, #34	@ 0x22
 8006b38:	d123      	bne.n	8006b82 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b40      	cmp	r3, #64	@ 0x40
 8006b52:	d10b      	bne.n	8006b6c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff f90a 	bl	8005d7e <HAL_I2C_MemRxCpltCallback>
}
 8006b6a:	e00a      	b.n	8006b82 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7f9 fc21 	bl	80003c4 <HAL_I2C_MasterRxCpltCallback>
}
 8006b82:	bf00      	nop
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	fe00e800 	.word	0xfe00e800
 8006b90:	ffff0000 	.word	0xffff0000

08006b94 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bae:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	2b21      	cmp	r3, #33	@ 0x21
 8006bc4:	d002      	beq.n	8006bcc <I2C_ITSlaveCplt+0x38>
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	2b29      	cmp	r3, #41	@ 0x29
 8006bca:	d108      	bne.n	8006bde <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006bcc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fc53 	bl	800747c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2221      	movs	r2, #33	@ 0x21
 8006bda:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bdc:	e019      	b.n	8006c12 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	2b22      	cmp	r3, #34	@ 0x22
 8006be2:	d002      	beq.n	8006bea <I2C_ITSlaveCplt+0x56>
 8006be4:	7afb      	ldrb	r3, [r7, #11]
 8006be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006be8:	d108      	bne.n	8006bfc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006bea:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fc44 	bl	800747c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2222      	movs	r2, #34	@ 0x22
 8006bf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bfa:	e00a      	b.n	8006c12 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	2b28      	cmp	r3, #40	@ 0x28
 8006c00:	d107      	bne.n	8006c12 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006c02:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fc38 	bl	800747c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c20:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6859      	ldr	r1, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	4b89      	ldr	r3, [pc, #548]	@ (8006e54 <I2C_ITSlaveCplt+0x2c0>)
 8006c2e:	400b      	ands	r3, r1
 8006c30:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa7d 	bl	8007132 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d013      	beq.n	8006c6a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01f      	beq.n	8006c9a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c68:	e017      	b.n	8006c9a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d012      	beq.n	8006c9a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c82:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d006      	beq.n	8006c9a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d020      	beq.n	8006ce6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f023 0304 	bic.w	r3, r3, #4
 8006caa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00c      	beq.n	8006ce6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf4:	f043 0204 	orr.w	r2, r3, #4
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f003 0310 	and.w	r3, r3, #16
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d049      	beq.n	8006d9a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d044      	beq.n	8006d9a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d128      	bne.n	8006d6c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b28      	cmp	r3, #40	@ 0x28
 8006d24:	d108      	bne.n	8006d38 <I2C_ITSlaveCplt+0x1a4>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d2c:	d104      	bne.n	8006d38 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006d2e:	6979      	ldr	r1, [r7, #20]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f893 	bl	8006e5c <I2C_ITListenCplt>
 8006d36:	e030      	b.n	8006d9a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b29      	cmp	r3, #41	@ 0x29
 8006d42:	d10e      	bne.n	8006d62 <I2C_ITSlaveCplt+0x1ce>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d4a:	d00a      	beq.n	8006d62 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2210      	movs	r2, #16
 8006d52:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f9ec 	bl	8007132 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff fdf6 	bl	800694c <I2C_ITSlaveSeqCplt>
 8006d60:	e01b      	b.n	8006d9a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2210      	movs	r2, #16
 8006d68:	61da      	str	r2, [r3, #28]
 8006d6a:	e016      	b.n	8006d9a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2210      	movs	r2, #16
 8006d72:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d78:	f043 0204 	orr.w	r2, r3, #4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <I2C_ITSlaveCplt+0x1fa>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d8c:	d105      	bne.n	8006d9a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f8b5 	bl	8006f04 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d010      	beq.n	8006dd2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f8a4 	bl	8006f04 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b28      	cmp	r3, #40	@ 0x28
 8006dc6:	d141      	bne.n	8006e4c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006dc8:	6979      	ldr	r1, [r7, #20]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f846 	bl	8006e5c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006dd0:	e03c      	b.n	8006e4c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006dda:	d014      	beq.n	8006e06 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff fdb5 	bl	800694c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e58 <I2C_ITSlaveCplt+0x2c4>)
 8006de6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fe ffa9 	bl	8005d56 <HAL_I2C_ListenCpltCallback>
}
 8006e04:	e022      	b.n	8006e4c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b22      	cmp	r3, #34	@ 0x22
 8006e10:	d10e      	bne.n	8006e30 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7fe ff7c 	bl	8005d26 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e2e:	e00d      	b.n	8006e4c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fe ff63 	bl	8005d12 <HAL_I2C_SlaveTxCpltCallback>
}
 8006e4c:	bf00      	nop
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	fe00e800 	.word	0xfe00e800
 8006e58:	ffff0000 	.word	0xffff0000

08006e5c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a25      	ldr	r2, [pc, #148]	@ (8006f00 <I2C_ITListenCplt+0xa4>)
 8006e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d022      	beq.n	8006ed8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d012      	beq.n	8006ed8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed0:	f043 0204 	orr.w	r2, r3, #4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ed8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 facd 	bl	800747c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fe ff2f 	bl	8005d56 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	ffff0000 	.word	0xffff0000

08006f04 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f14:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a6d      	ldr	r2, [pc, #436]	@ (80070d8 <I2C_ITError+0x1d4>)
 8006f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	431a      	orrs	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b28      	cmp	r3, #40	@ 0x28
 8006f3a:	d005      	beq.n	8006f48 <I2C_ITError+0x44>
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	2b29      	cmp	r3, #41	@ 0x29
 8006f40:	d002      	beq.n	8006f48 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f46:	d10b      	bne.n	8006f60 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f48:	2103      	movs	r1, #3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa96 	bl	800747c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2228      	movs	r2, #40	@ 0x28
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a60      	ldr	r2, [pc, #384]	@ (80070dc <I2C_ITError+0x1d8>)
 8006f5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006f5e:	e030      	b.n	8006fc2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f60:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fa89 	bl	800747c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f8e1 	bl	8007132 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b60      	cmp	r3, #96	@ 0x60
 8006f7a:	d01f      	beq.n	8006fbc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d114      	bne.n	8006fbc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d109      	bne.n	8006fb4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2210      	movs	r2, #16
 8006fa6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fac:	f043 0204 	orr.w	r2, r3, #4
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d039      	beq.n	8007044 <I2C_ITError+0x140>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b11      	cmp	r3, #17
 8006fd4:	d002      	beq.n	8006fdc <I2C_ITError+0xd8>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b21      	cmp	r3, #33	@ 0x21
 8006fda:	d133      	bne.n	8007044 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fea:	d107      	bne.n	8006ffc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ffa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007000:	4618      	mov	r0, r3
 8007002:	f7fd fa82 	bl	800450a <HAL_DMA_GetState>
 8007006:	4603      	mov	r3, r0
 8007008:	2b01      	cmp	r3, #1
 800700a:	d017      	beq.n	800703c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	4a33      	ldr	r2, [pc, #204]	@ (80070e0 <I2C_ITError+0x1dc>)
 8007012:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	4618      	mov	r0, r3
 8007022:	f7fd f95c 	bl	80042de <HAL_DMA_Abort_IT>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d04d      	beq.n	80070c8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007036:	4610      	mov	r0, r2
 8007038:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800703a:	e045      	b.n	80070c8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f851 	bl	80070e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007042:	e041      	b.n	80070c8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d039      	beq.n	80070c0 <I2C_ITError+0x1bc>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b12      	cmp	r3, #18
 8007050:	d002      	beq.n	8007058 <I2C_ITError+0x154>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b22      	cmp	r3, #34	@ 0x22
 8007056:	d133      	bne.n	80070c0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007066:	d107      	bne.n	8007078 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007076:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707c:	4618      	mov	r0, r3
 800707e:	f7fd fa44 	bl	800450a <HAL_DMA_GetState>
 8007082:	4603      	mov	r3, r0
 8007084:	2b01      	cmp	r3, #1
 8007086:	d017      	beq.n	80070b8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708c:	4a14      	ldr	r2, [pc, #80]	@ (80070e0 <I2C_ITError+0x1dc>)
 800708e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709c:	4618      	mov	r0, r3
 800709e:	f7fd f91e 	bl	80042de <HAL_DMA_Abort_IT>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d011      	beq.n	80070cc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80070b2:	4610      	mov	r0, r2
 80070b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070b6:	e009      	b.n	80070cc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f813 	bl	80070e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070be:	e005      	b.n	80070cc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f80f 	bl	80070e4 <I2C_TreatErrorCallback>
  }
}
 80070c6:	e002      	b.n	80070ce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070c8:	bf00      	nop
 80070ca:	e000      	b.n	80070ce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070cc:	bf00      	nop
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	ffff0000 	.word	0xffff0000
 80070dc:	08006009 	.word	0x08006009
 80070e0:	080072d5 	.word	0x080072d5

080070e4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b60      	cmp	r3, #96	@ 0x60
 80070f6:	d10e      	bne.n	8007116 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fe fe49 	bl	8005da6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007114:	e009      	b.n	800712a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7fe fe34 	bl	8005d92 <HAL_I2C_ErrorCallback>
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b02      	cmp	r3, #2
 8007146:	d103      	bne.n	8007150 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2200      	movs	r2, #0
 800714e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b01      	cmp	r3, #1
 800715c:	d007      	beq.n	800716e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	699a      	ldr	r2, [r3, #24]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f042 0201 	orr.w	r2, r2, #1
 800716c:	619a      	str	r2, [r3, #24]
  }
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007186:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007196:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80071a2:	2120      	movs	r1, #32
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f8e5 	bl	8007374 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80071aa:	e02d      	b.n	8007208 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80071b4:	441a      	add	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2bff      	cmp	r3, #255	@ 0xff
 80071c2:	d903      	bls.n	80071cc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	22ff      	movs	r2, #255	@ 0xff
 80071c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80071ca:	e004      	b.n	80071d6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071de:	4619      	mov	r1, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3328      	adds	r3, #40	@ 0x28
 80071e6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80071ec:	f7fc fffc 	bl	80041e8 <HAL_DMA_Start_IT>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d004      	beq.n	8007200 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80071f6:	2110      	movs	r1, #16
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7ff fe83 	bl	8006f04 <I2C_ITError>
}
 80071fe:	e003      	b.n	8007208 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007200:	2140      	movs	r1, #64	@ 0x40
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f8b6 	bl	8007374 <I2C_Enable_IRQ>
}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800722c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007232:	b29b      	uxth	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007238:	2120      	movs	r1, #32
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f89a 	bl	8007374 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007240:	e02d      	b.n	800729e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800724a:	441a      	add	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007254:	b29b      	uxth	r3, r3
 8007256:	2bff      	cmp	r3, #255	@ 0xff
 8007258:	d903      	bls.n	8007262 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	22ff      	movs	r2, #255	@ 0xff
 800725e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007260:	e004      	b.n	800726c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3324      	adds	r3, #36	@ 0x24
 8007276:	4619      	mov	r1, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007282:	f7fc ffb1 	bl	80041e8 <HAL_DMA_Start_IT>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800728c:	2110      	movs	r1, #16
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff fe38 	bl	8006f04 <I2C_ITError>
}
 8007294:	e003      	b.n	800729e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007296:	2140      	movs	r1, #64	@ 0x40
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f86b 	bl	8007374 <I2C_Enable_IRQ>
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072c2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80072c4:	2110      	movs	r1, #16
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff fe1c 	bl	8006f04 <I2C_ITError>
}
 80072cc:	bf00      	nop
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ee:	2200      	movs	r2, #0
 80072f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fe:	2200      	movs	r2, #0
 8007300:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff feee 	bl	80070e4 <I2C_TreatErrorCallback>
}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	607b      	str	r3, [r7, #4]
 800731a:	460b      	mov	r3, r1
 800731c:	817b      	strh	r3, [r7, #10]
 800731e:	4613      	mov	r3, r2
 8007320:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007322:	897b      	ldrh	r3, [r7, #10]
 8007324:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007328:	7a7b      	ldrb	r3, [r7, #9]
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007330:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	4313      	orrs	r3, r2
 800733a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800733e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	0d5b      	lsrs	r3, r3, #21
 800734a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800734e:	4b08      	ldr	r3, [pc, #32]	@ (8007370 <I2C_TransferConfig+0x60>)
 8007350:	430b      	orrs	r3, r1
 8007352:	43db      	mvns	r3, r3
 8007354:	ea02 0103 	and.w	r1, r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	03ff63ff 	.word	0x03ff63ff

08007374 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007388:	4a39      	ldr	r2, [pc, #228]	@ (8007470 <I2C_Enable_IRQ+0xfc>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d032      	beq.n	80073f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007392:	4a38      	ldr	r2, [pc, #224]	@ (8007474 <I2C_Enable_IRQ+0x100>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d02d      	beq.n	80073f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800739c:	4a36      	ldr	r2, [pc, #216]	@ (8007478 <I2C_Enable_IRQ+0x104>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d028      	beq.n	80073f4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80073a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	da03      	bge.n	80073b2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80073b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80073b2:	887b      	ldrh	r3, [r7, #2]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80073c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80073c4:	887b      	ldrh	r3, [r7, #2]
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80073d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80073d6:	887b      	ldrh	r3, [r7, #2]
 80073d8:	2b10      	cmp	r3, #16
 80073da:	d103      	bne.n	80073e4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80073e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80073e4:	887b      	ldrh	r3, [r7, #2]
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d133      	bne.n	8007452 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f043 0320 	orr.w	r3, r3, #32
 80073f0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80073f2:	e02e      	b.n	8007452 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80073f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	da03      	bge.n	8007404 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007402:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007404:	887b      	ldrh	r3, [r7, #2]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007414:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007416:	887b      	ldrh	r3, [r7, #2]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007426:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007428:	887b      	ldrh	r3, [r7, #2]
 800742a:	2b10      	cmp	r3, #16
 800742c:	d103      	bne.n	8007436 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007434:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007436:	887b      	ldrh	r3, [r7, #2]
 8007438:	2b20      	cmp	r3, #32
 800743a:	d103      	bne.n	8007444 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007442:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007444:	887b      	ldrh	r3, [r7, #2]
 8007446:	2b40      	cmp	r3, #64	@ 0x40
 8007448:	d103      	bne.n	8007452 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007450:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6819      	ldr	r1, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	430a      	orrs	r2, r1
 8007460:	601a      	str	r2, [r3, #0]
}
 8007462:	bf00      	nop
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	080061fb 	.word	0x080061fb
 8007474:	0800661d 	.word	0x0800661d
 8007478:	080063d1 	.word	0x080063d1

0800747c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800748c:	887b      	ldrh	r3, [r7, #2]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00f      	beq.n	80074b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800749c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80074aa:	2b28      	cmp	r3, #40	@ 0x28
 80074ac:	d003      	beq.n	80074b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80074b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80074b6:	887b      	ldrh	r3, [r7, #2]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00f      	beq.n	80074e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80074c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80074d4:	2b28      	cmp	r3, #40	@ 0x28
 80074d6:	d003      	beq.n	80074e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80074de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80074e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	da03      	bge.n	80074f0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80074ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80074f0:	887b      	ldrh	r3, [r7, #2]
 80074f2:	2b10      	cmp	r3, #16
 80074f4:	d103      	bne.n	80074fe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80074fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80074fe:	887b      	ldrh	r3, [r7, #2]
 8007500:	2b20      	cmp	r3, #32
 8007502:	d103      	bne.n	800750c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f043 0320 	orr.w	r3, r3, #32
 800750a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800750c:	887b      	ldrh	r3, [r7, #2]
 800750e:	2b40      	cmp	r3, #64	@ 0x40
 8007510:	d103      	bne.n	800751a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007518:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6819      	ldr	r1, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	43da      	mvns	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	400a      	ands	r2, r1
 800752a:	601a      	str	r2, [r3, #0]
}
 800752c:	bf00      	nop
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b20      	cmp	r3, #32
 800754c:	d138      	bne.n	80075c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007558:	2302      	movs	r3, #2
 800755a:	e032      	b.n	80075c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2224      	movs	r2, #36	@ 0x24
 8007568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0201 	bic.w	r2, r2, #1
 800757a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800758a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6819      	ldr	r1, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	e000      	b.n	80075c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
  }
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d139      	bne.n	8007658 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d101      	bne.n	80075f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e033      	b.n	800765a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2224      	movs	r2, #36	@ 0x24
 80075fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007620:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0201 	orr.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	e000      	b.n	800765a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007658:	2302      	movs	r3, #2
  }
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d141      	bne.n	80076fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007676:	4b4b      	ldr	r3, [pc, #300]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800767e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007682:	d131      	bne.n	80076e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007684:	4b47      	ldr	r3, [pc, #284]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800768a:	4a46      	ldr	r2, [pc, #280]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800768c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007690:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007694:	4b43      	ldr	r3, [pc, #268]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800769c:	4a41      	ldr	r2, [pc, #260]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800769e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80076a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80076a4:	4b40      	ldr	r3, [pc, #256]	@ (80077a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2232      	movs	r2, #50	@ 0x32
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
 80076ae:	4a3f      	ldr	r2, [pc, #252]	@ (80077ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80076b0:	fba2 2303 	umull	r2, r3, r2, r3
 80076b4:	0c9b      	lsrs	r3, r3, #18
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076ba:	e002      	b.n	80076c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3b01      	subs	r3, #1
 80076c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076c2:	4b38      	ldr	r3, [pc, #224]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ce:	d102      	bne.n	80076d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1f2      	bne.n	80076bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076d6:	4b33      	ldr	r3, [pc, #204]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e2:	d158      	bne.n	8007796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e057      	b.n	8007798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076e8:	4b2e      	ldr	r3, [pc, #184]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ee:	4a2d      	ldr	r2, [pc, #180]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80076f8:	e04d      	b.n	8007796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007700:	d141      	bne.n	8007786 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007702:	4b28      	ldr	r3, [pc, #160]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800770a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800770e:	d131      	bne.n	8007774 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007710:	4b24      	ldr	r3, [pc, #144]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007716:	4a23      	ldr	r2, [pc, #140]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800771c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007720:	4b20      	ldr	r3, [pc, #128]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007728:	4a1e      	ldr	r2, [pc, #120]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800772a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800772e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007730:	4b1d      	ldr	r3, [pc, #116]	@ (80077a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2232      	movs	r2, #50	@ 0x32
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	4a1c      	ldr	r2, [pc, #112]	@ (80077ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	0c9b      	lsrs	r3, r3, #18
 8007742:	3301      	adds	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007746:	e002      	b.n	800774e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3b01      	subs	r3, #1
 800774c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800774e:	4b15      	ldr	r3, [pc, #84]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800775a:	d102      	bne.n	8007762 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f2      	bne.n	8007748 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007762:	4b10      	ldr	r3, [pc, #64]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800776a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800776e:	d112      	bne.n	8007796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e011      	b.n	8007798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007774:	4b0b      	ldr	r3, [pc, #44]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800777a:	4a0a      	ldr	r2, [pc, #40]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800777c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007780:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007784:	e007      	b.n	8007796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007786:	4b07      	ldr	r3, [pc, #28]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800778e:	4a05      	ldr	r2, [pc, #20]	@ (80077a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007790:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007794:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	40007000 	.word	0x40007000
 80077a8:	20000000 	.word	0x20000000
 80077ac:	431bde83 	.word	0x431bde83

080077b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80077b4:	4b05      	ldr	r3, [pc, #20]	@ (80077cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	4a04      	ldr	r2, [pc, #16]	@ (80077cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80077ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077be:	6093      	str	r3, [r2, #8]
}
 80077c0:	bf00      	nop
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40007000 	.word	0x40007000

080077d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e2fe      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d075      	beq.n	80078da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ee:	4b97      	ldr	r3, [pc, #604]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 030c 	and.w	r3, r3, #12
 80077f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077f8:	4b94      	ldr	r3, [pc, #592]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0303 	and.w	r3, r3, #3
 8007800:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b0c      	cmp	r3, #12
 8007806:	d102      	bne.n	800780e <HAL_RCC_OscConfig+0x3e>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2b03      	cmp	r3, #3
 800780c:	d002      	beq.n	8007814 <HAL_RCC_OscConfig+0x44>
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b08      	cmp	r3, #8
 8007812:	d10b      	bne.n	800782c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007814:	4b8d      	ldr	r3, [pc, #564]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d05b      	beq.n	80078d8 <HAL_RCC_OscConfig+0x108>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d157      	bne.n	80078d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e2d9      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007834:	d106      	bne.n	8007844 <HAL_RCC_OscConfig+0x74>
 8007836:	4b85      	ldr	r3, [pc, #532]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a84      	ldr	r2, [pc, #528]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800783c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	e01d      	b.n	8007880 <HAL_RCC_OscConfig+0xb0>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800784c:	d10c      	bne.n	8007868 <HAL_RCC_OscConfig+0x98>
 800784e:	4b7f      	ldr	r3, [pc, #508]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a7e      	ldr	r2, [pc, #504]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	4b7c      	ldr	r3, [pc, #496]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a7b      	ldr	r2, [pc, #492]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	e00b      	b.n	8007880 <HAL_RCC_OscConfig+0xb0>
 8007868:	4b78      	ldr	r3, [pc, #480]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a77      	ldr	r2, [pc, #476]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800786e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	4b75      	ldr	r3, [pc, #468]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a74      	ldr	r2, [pc, #464]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800787a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800787e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d013      	beq.n	80078b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007888:	f7fa f9d6 	bl	8001c38 <HAL_GetTick>
 800788c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800788e:	e008      	b.n	80078a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007890:	f7fa f9d2 	bl	8001c38 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b64      	cmp	r3, #100	@ 0x64
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e29e      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078a2:	4b6a      	ldr	r3, [pc, #424]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f0      	beq.n	8007890 <HAL_RCC_OscConfig+0xc0>
 80078ae:	e014      	b.n	80078da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b0:	f7fa f9c2 	bl	8001c38 <HAL_GetTick>
 80078b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078b8:	f7fa f9be 	bl	8001c38 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b64      	cmp	r3, #100	@ 0x64
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e28a      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078ca:	4b60      	ldr	r3, [pc, #384]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1f0      	bne.n	80078b8 <HAL_RCC_OscConfig+0xe8>
 80078d6:	e000      	b.n	80078da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d075      	beq.n	80079d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078e6:	4b59      	ldr	r3, [pc, #356]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 030c 	and.w	r3, r3, #12
 80078ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078f0:	4b56      	ldr	r3, [pc, #344]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b0c      	cmp	r3, #12
 80078fe:	d102      	bne.n	8007906 <HAL_RCC_OscConfig+0x136>
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d002      	beq.n	800790c <HAL_RCC_OscConfig+0x13c>
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b04      	cmp	r3, #4
 800790a:	d11f      	bne.n	800794c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800790c:	4b4f      	ldr	r3, [pc, #316]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_RCC_OscConfig+0x154>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e25d      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007924:	4b49      	ldr	r3, [pc, #292]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	061b      	lsls	r3, r3, #24
 8007932:	4946      	ldr	r1, [pc, #280]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007934:	4313      	orrs	r3, r2
 8007936:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007938:	4b45      	ldr	r3, [pc, #276]	@ (8007a50 <HAL_RCC_OscConfig+0x280>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4618      	mov	r0, r3
 800793e:	f7fa f92f 	bl	8001ba0 <HAL_InitTick>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d043      	beq.n	80079d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e249      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d023      	beq.n	800799c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007954:	4b3d      	ldr	r3, [pc, #244]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a3c      	ldr	r2, [pc, #240]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800795a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800795e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007960:	f7fa f96a 	bl	8001c38 <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007966:	e008      	b.n	800797a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007968:	f7fa f966 	bl	8001c38 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d901      	bls.n	800797a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e232      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800797a:	4b34      	ldr	r3, [pc, #208]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0f0      	beq.n	8007968 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007986:	4b31      	ldr	r3, [pc, #196]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	061b      	lsls	r3, r3, #24
 8007994:	492d      	ldr	r1, [pc, #180]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007996:	4313      	orrs	r3, r2
 8007998:	604b      	str	r3, [r1, #4]
 800799a:	e01a      	b.n	80079d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800799c:	4b2b      	ldr	r3, [pc, #172]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80079a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a8:	f7fa f946 	bl	8001c38 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079b0:	f7fa f942 	bl	8001c38 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e20e      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079c2:	4b22      	ldr	r3, [pc, #136]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1f0      	bne.n	80079b0 <HAL_RCC_OscConfig+0x1e0>
 80079ce:	e000      	b.n	80079d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d041      	beq.n	8007a62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01c      	beq.n	8007a20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079e6:	4b19      	ldr	r3, [pc, #100]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80079e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079ec:	4a17      	ldr	r2, [pc, #92]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f6:	f7fa f91f 	bl	8001c38 <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079fe:	f7fa f91b 	bl	8001c38 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e1e7      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a10:	4b0e      	ldr	r3, [pc, #56]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0ef      	beq.n	80079fe <HAL_RCC_OscConfig+0x22e>
 8007a1e:	e020      	b.n	8007a62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a20:	4b0a      	ldr	r3, [pc, #40]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a26:	4a09      	ldr	r2, [pc, #36]	@ (8007a4c <HAL_RCC_OscConfig+0x27c>)
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a30:	f7fa f902 	bl	8001c38 <HAL_GetTick>
 8007a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a36:	e00d      	b.n	8007a54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a38:	f7fa f8fe 	bl	8001c38 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d906      	bls.n	8007a54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e1ca      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
 8007a4a:	bf00      	nop
 8007a4c:	40021000 	.word	0x40021000
 8007a50:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a54:	4b8c      	ldr	r3, [pc, #560]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1ea      	bne.n	8007a38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80a6 	beq.w	8007bbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a70:	2300      	movs	r3, #0
 8007a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a74:	4b84      	ldr	r3, [pc, #528]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_RCC_OscConfig+0x2b4>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <HAL_RCC_OscConfig+0x2b6>
 8007a84:	2300      	movs	r3, #0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8e:	4a7e      	ldr	r2, [pc, #504]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a96:	4b7c      	ldr	r3, [pc, #496]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007aa6:	4b79      	ldr	r3, [pc, #484]	@ (8007c8c <HAL_RCC_OscConfig+0x4bc>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d118      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ab2:	4b76      	ldr	r3, [pc, #472]	@ (8007c8c <HAL_RCC_OscConfig+0x4bc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a75      	ldr	r2, [pc, #468]	@ (8007c8c <HAL_RCC_OscConfig+0x4bc>)
 8007ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007abe:	f7fa f8bb 	bl	8001c38 <HAL_GetTick>
 8007ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ac6:	f7fa f8b7 	bl	8001c38 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e183      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8007c8c <HAL_RCC_OscConfig+0x4bc>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0f0      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d108      	bne.n	8007afe <HAL_RCC_OscConfig+0x32e>
 8007aec:	4b66      	ldr	r3, [pc, #408]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af2:	4a65      	ldr	r2, [pc, #404]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007af4:	f043 0301 	orr.w	r3, r3, #1
 8007af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007afc:	e024      	b.n	8007b48 <HAL_RCC_OscConfig+0x378>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b05      	cmp	r3, #5
 8007b04:	d110      	bne.n	8007b28 <HAL_RCC_OscConfig+0x358>
 8007b06:	4b60      	ldr	r3, [pc, #384]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b0e:	f043 0304 	orr.w	r3, r3, #4
 8007b12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b16:	4b5c      	ldr	r3, [pc, #368]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b1e:	f043 0301 	orr.w	r3, r3, #1
 8007b22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b26:	e00f      	b.n	8007b48 <HAL_RCC_OscConfig+0x378>
 8007b28:	4b57      	ldr	r3, [pc, #348]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b2e:	4a56      	ldr	r2, [pc, #344]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007b38:	4b53      	ldr	r3, [pc, #332]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b3e:	4a52      	ldr	r2, [pc, #328]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b40:	f023 0304 	bic.w	r3, r3, #4
 8007b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d016      	beq.n	8007b7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b50:	f7fa f872 	bl	8001c38 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b56:	e00a      	b.n	8007b6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b58:	f7fa f86e 	bl	8001c38 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e138      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b6e:	4b46      	ldr	r3, [pc, #280]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0ed      	beq.n	8007b58 <HAL_RCC_OscConfig+0x388>
 8007b7c:	e015      	b.n	8007baa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7e:	f7fa f85b 	bl	8001c38 <HAL_GetTick>
 8007b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b84:	e00a      	b.n	8007b9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b86:	f7fa f857 	bl	8001c38 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d901      	bls.n	8007b9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e121      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1ed      	bne.n	8007b86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007baa:	7ffb      	ldrb	r3, [r7, #31]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d105      	bne.n	8007bbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bb0:	4b35      	ldr	r3, [pc, #212]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb4:	4a34      	ldr	r2, [pc, #208]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d03c      	beq.n	8007c42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01c      	beq.n	8007c0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007bd8:	f043 0301 	orr.w	r3, r3, #1
 8007bdc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be0:	f7fa f82a 	bl	8001c38 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007be8:	f7fa f826 	bl	8001c38 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e0f2      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007bfa:	4b23      	ldr	r3, [pc, #140]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d0ef      	beq.n	8007be8 <HAL_RCC_OscConfig+0x418>
 8007c08:	e01b      	b.n	8007c42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c10:	4a1d      	ldr	r2, [pc, #116]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c1a:	f7fa f80d 	bl	8001c38 <HAL_GetTick>
 8007c1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c20:	e008      	b.n	8007c34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c22:	f7fa f809 	bl	8001c38 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d901      	bls.n	8007c34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e0d5      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c34:	4b14      	ldr	r3, [pc, #80]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1ef      	bne.n	8007c22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 80c9 	beq.w	8007dde <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 030c 	and.w	r3, r3, #12
 8007c54:	2b0c      	cmp	r3, #12
 8007c56:	f000 8083 	beq.w	8007d60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d15e      	bne.n	8007d20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c62:	4b09      	ldr	r3, [pc, #36]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a08      	ldr	r2, [pc, #32]	@ (8007c88 <HAL_RCC_OscConfig+0x4b8>)
 8007c68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c6e:	f7f9 ffe3 	bl	8001c38 <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c74:	e00c      	b.n	8007c90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c76:	f7f9 ffdf 	bl	8001c38 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d905      	bls.n	8007c90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e0ab      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c90:	4b55      	ldr	r3, [pc, #340]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1ec      	bne.n	8007c76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c9c:	4b52      	ldr	r3, [pc, #328]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	4b52      	ldr	r3, [pc, #328]	@ (8007dec <HAL_RCC_OscConfig+0x61c>)
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6a11      	ldr	r1, [r2, #32]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007cac:	3a01      	subs	r2, #1
 8007cae:	0112      	lsls	r2, r2, #4
 8007cb0:	4311      	orrs	r1, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007cb6:	0212      	lsls	r2, r2, #8
 8007cb8:	4311      	orrs	r1, r2
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007cbe:	0852      	lsrs	r2, r2, #1
 8007cc0:	3a01      	subs	r2, #1
 8007cc2:	0552      	lsls	r2, r2, #21
 8007cc4:	4311      	orrs	r1, r2
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007cca:	0852      	lsrs	r2, r2, #1
 8007ccc:	3a01      	subs	r2, #1
 8007cce:	0652      	lsls	r2, r2, #25
 8007cd0:	4311      	orrs	r1, r2
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007cd6:	06d2      	lsls	r2, r2, #27
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	4943      	ldr	r1, [pc, #268]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ce0:	4b41      	ldr	r3, [pc, #260]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a40      	ldr	r2, [pc, #256]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007cec:	4b3e      	ldr	r3, [pc, #248]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	4a3d      	ldr	r2, [pc, #244]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cf6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf8:	f7f9 ff9e 	bl	8001c38 <HAL_GetTick>
 8007cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d00:	f7f9 ff9a 	bl	8001c38 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e066      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d12:	4b35      	ldr	r3, [pc, #212]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0f0      	beq.n	8007d00 <HAL_RCC_OscConfig+0x530>
 8007d1e:	e05e      	b.n	8007dde <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d20:	4b31      	ldr	r3, [pc, #196]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a30      	ldr	r2, [pc, #192]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2c:	f7f9 ff84 	bl	8001c38 <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d34:	f7f9 ff80 	bl	8001c38 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e04c      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d46:	4b28      	ldr	r3, [pc, #160]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f0      	bne.n	8007d34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007d52:	4b25      	ldr	r3, [pc, #148]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	4924      	ldr	r1, [pc, #144]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d58:	4b25      	ldr	r3, [pc, #148]	@ (8007df0 <HAL_RCC_OscConfig+0x620>)
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	60cb      	str	r3, [r1, #12]
 8007d5e:	e03e      	b.n	8007dde <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e039      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8007de8 <HAL_RCC_OscConfig+0x618>)
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f003 0203 	and.w	r2, r3, #3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d12c      	bne.n	8007dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d123      	bne.n	8007dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d11b      	bne.n	8007dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d113      	bne.n	8007dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbc:	085b      	lsrs	r3, r3, #1
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d109      	bne.n	8007dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d001      	beq.n	8007dde <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3720      	adds	r7, #32
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	40021000 	.word	0x40021000
 8007dec:	019f800c 	.word	0x019f800c
 8007df0:	feeefffc 	.word	0xfeeefffc

08007df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e11e      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e0c:	4b91      	ldr	r3, [pc, #580]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 030f 	and.w	r3, r3, #15
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d910      	bls.n	8007e3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e1a:	4b8e      	ldr	r3, [pc, #568]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f023 020f 	bic.w	r2, r3, #15
 8007e22:	498c      	ldr	r1, [pc, #560]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e2a:	4b8a      	ldr	r3, [pc, #552]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d001      	beq.n	8007e3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e106      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d073      	beq.n	8007f30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d129      	bne.n	8007ea4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e50:	4b81      	ldr	r3, [pc, #516]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e0f4      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007e60:	f000 f966 	bl	8008130 <RCC_GetSysClockFreqFromPLLSource>
 8007e64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	4a7c      	ldr	r2, [pc, #496]	@ (800805c <HAL_RCC_ClockConfig+0x268>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d93f      	bls.n	8007eee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d009      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d033      	beq.n	8007eee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d12f      	bne.n	8007eee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e8e:	4b72      	ldr	r3, [pc, #456]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e96:	4a70      	ldr	r2, [pc, #448]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007e9e:	2380      	movs	r3, #128	@ 0x80
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	e024      	b.n	8007eee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d107      	bne.n	8007ebc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eac:	4b6a      	ldr	r3, [pc, #424]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d109      	bne.n	8007ecc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0c6      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ebc:	4b66      	ldr	r3, [pc, #408]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e0be      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007ecc:	f000 f8ce 	bl	800806c <HAL_RCC_GetSysClockFreq>
 8007ed0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	4a61      	ldr	r2, [pc, #388]	@ (800805c <HAL_RCC_ClockConfig+0x268>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d909      	bls.n	8007eee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007eda:	4b5f      	ldr	r3, [pc, #380]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ee2:	4a5d      	ldr	r2, [pc, #372]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ee8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007eea:	2380      	movs	r3, #128	@ 0x80
 8007eec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007eee:	4b5a      	ldr	r3, [pc, #360]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f023 0203 	bic.w	r2, r3, #3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	4957      	ldr	r1, [pc, #348]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f00:	f7f9 fe9a 	bl	8001c38 <HAL_GetTick>
 8007f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f06:	e00a      	b.n	8007f1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f08:	f7f9 fe96 	bl	8001c38 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e095      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 020c 	and.w	r2, r3, #12
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d1eb      	bne.n	8007f08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d023      	beq.n	8007f84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f48:	4b43      	ldr	r3, [pc, #268]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	4a42      	ldr	r2, [pc, #264]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007f52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d007      	beq.n	8007f70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007f60:	4b3d      	ldr	r3, [pc, #244]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007f68:	4a3b      	ldr	r2, [pc, #236]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007f6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f70:	4b39      	ldr	r3, [pc, #228]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	4936      	ldr	r1, [pc, #216]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	608b      	str	r3, [r1, #8]
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2b80      	cmp	r3, #128	@ 0x80
 8007f88:	d105      	bne.n	8007f96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007f8a:	4b33      	ldr	r3, [pc, #204]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	4a32      	ldr	r2, [pc, #200]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007f90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f96:	4b2f      	ldr	r3, [pc, #188]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d21d      	bcs.n	8007fe0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f023 020f 	bic.w	r2, r3, #15
 8007fac:	4929      	ldr	r1, [pc, #164]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007fb4:	f7f9 fe40 	bl	8001c38 <HAL_GetTick>
 8007fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fba:	e00a      	b.n	8007fd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fbc:	f7f9 fe3c 	bl	8001c38 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e03b      	b.n	800804a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fd2:	4b20      	ldr	r3, [pc, #128]	@ (8008054 <HAL_RCC_ClockConfig+0x260>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 030f 	and.w	r3, r3, #15
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d1ed      	bne.n	8007fbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fec:	4b1a      	ldr	r3, [pc, #104]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4917      	ldr	r1, [pc, #92]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0308 	and.w	r3, r3, #8
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800800a:	4b13      	ldr	r3, [pc, #76]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	490f      	ldr	r1, [pc, #60]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 800801a:	4313      	orrs	r3, r2
 800801c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800801e:	f000 f825 	bl	800806c <HAL_RCC_GetSysClockFreq>
 8008022:	4602      	mov	r2, r0
 8008024:	4b0c      	ldr	r3, [pc, #48]	@ (8008058 <HAL_RCC_ClockConfig+0x264>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	091b      	lsrs	r3, r3, #4
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	490c      	ldr	r1, [pc, #48]	@ (8008060 <HAL_RCC_ClockConfig+0x26c>)
 8008030:	5ccb      	ldrb	r3, [r1, r3]
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	4a0a      	ldr	r2, [pc, #40]	@ (8008064 <HAL_RCC_ClockConfig+0x270>)
 800803c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800803e:	4b0a      	ldr	r3, [pc, #40]	@ (8008068 <HAL_RCC_ClockConfig+0x274>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f7f9 fdac 	bl	8001ba0 <HAL_InitTick>
 8008048:	4603      	mov	r3, r0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	40022000 	.word	0x40022000
 8008058:	40021000 	.word	0x40021000
 800805c:	04c4b400 	.word	0x04c4b400
 8008060:	08009b30 	.word	0x08009b30
 8008064:	20000000 	.word	0x20000000
 8008068:	20000004 	.word	0x20000004

0800806c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008072:	4b2c      	ldr	r3, [pc, #176]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f003 030c 	and.w	r3, r3, #12
 800807a:	2b04      	cmp	r3, #4
 800807c:	d102      	bne.n	8008084 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800807e:	4b2a      	ldr	r3, [pc, #168]	@ (8008128 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	e047      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008084:	4b27      	ldr	r3, [pc, #156]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 030c 	and.w	r3, r3, #12
 800808c:	2b08      	cmp	r3, #8
 800808e:	d102      	bne.n	8008096 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008090:	4b26      	ldr	r3, [pc, #152]	@ (800812c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	e03e      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008096:	4b23      	ldr	r3, [pc, #140]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 030c 	and.w	r3, r3, #12
 800809e:	2b0c      	cmp	r3, #12
 80080a0:	d136      	bne.n	8008110 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080a2:	4b20      	ldr	r3, [pc, #128]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	091b      	lsrs	r3, r3, #4
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	3301      	adds	r3, #1
 80080b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d10c      	bne.n	80080da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080c0:	4a1a      	ldr	r2, [pc, #104]	@ (800812c <HAL_RCC_GetSysClockFreq+0xc0>)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c8:	4a16      	ldr	r2, [pc, #88]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080ca:	68d2      	ldr	r2, [r2, #12]
 80080cc:	0a12      	lsrs	r2, r2, #8
 80080ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	617b      	str	r3, [r7, #20]
      break;
 80080d8:	e00c      	b.n	80080f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080da:	4a13      	ldr	r2, [pc, #76]	@ (8008128 <HAL_RCC_GetSysClockFreq+0xbc>)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e2:	4a10      	ldr	r2, [pc, #64]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080e4:	68d2      	ldr	r2, [r2, #12]
 80080e6:	0a12      	lsrs	r2, r2, #8
 80080e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80080ec:	fb02 f303 	mul.w	r3, r2, r3
 80080f0:	617b      	str	r3, [r7, #20]
      break;
 80080f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80080f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	0e5b      	lsrs	r3, r3, #25
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	3301      	adds	r3, #1
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	fbb2 f3f3 	udiv	r3, r2, r3
 800810c:	613b      	str	r3, [r7, #16]
 800810e:	e001      	b.n	8008114 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008114:	693b      	ldr	r3, [r7, #16]
}
 8008116:	4618      	mov	r0, r3
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40021000 	.word	0x40021000
 8008128:	00f42400 	.word	0x00f42400
 800812c:	016e3600 	.word	0x016e3600

08008130 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008136:	4b1e      	ldr	r3, [pc, #120]	@ (80081b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008140:	4b1b      	ldr	r3, [pc, #108]	@ (80081b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	091b      	lsrs	r3, r3, #4
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b03      	cmp	r3, #3
 8008152:	d10c      	bne.n	800816e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008154:	4a17      	ldr	r2, [pc, #92]	@ (80081b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	fbb2 f3f3 	udiv	r3, r2, r3
 800815c:	4a14      	ldr	r2, [pc, #80]	@ (80081b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800815e:	68d2      	ldr	r2, [r2, #12]
 8008160:	0a12      	lsrs	r2, r2, #8
 8008162:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008166:	fb02 f303 	mul.w	r3, r2, r3
 800816a:	617b      	str	r3, [r7, #20]
    break;
 800816c:	e00c      	b.n	8008188 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800816e:	4a12      	ldr	r2, [pc, #72]	@ (80081b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	fbb2 f3f3 	udiv	r3, r2, r3
 8008176:	4a0e      	ldr	r2, [pc, #56]	@ (80081b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008178:	68d2      	ldr	r2, [r2, #12]
 800817a:	0a12      	lsrs	r2, r2, #8
 800817c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008180:	fb02 f303 	mul.w	r3, r2, r3
 8008184:	617b      	str	r3, [r7, #20]
    break;
 8008186:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008188:	4b09      	ldr	r3, [pc, #36]	@ (80081b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	0e5b      	lsrs	r3, r3, #25
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	3301      	adds	r3, #1
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80081a2:	687b      	ldr	r3, [r7, #4]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	371c      	adds	r7, #28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	40021000 	.word	0x40021000
 80081b4:	016e3600 	.word	0x016e3600
 80081b8:	00f42400 	.word	0x00f42400

080081bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80081c4:	2300      	movs	r3, #0
 80081c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081c8:	2300      	movs	r3, #0
 80081ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8098 	beq.w	800830a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081da:	2300      	movs	r3, #0
 80081dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081de:	4b43      	ldr	r3, [pc, #268]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10d      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ea:	4b40      	ldr	r3, [pc, #256]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ee:	4a3f      	ldr	r2, [pc, #252]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80081f6:	4b3d      	ldr	r3, [pc, #244]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081fe:	60bb      	str	r3, [r7, #8]
 8008200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008202:	2301      	movs	r3, #1
 8008204:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008206:	4b3a      	ldr	r3, [pc, #232]	@ (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a39      	ldr	r2, [pc, #228]	@ (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800820c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008212:	f7f9 fd11 	bl	8001c38 <HAL_GetTick>
 8008216:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008218:	e009      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800821a:	f7f9 fd0d 	bl	8001c38 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d902      	bls.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	74fb      	strb	r3, [r7, #19]
        break;
 800822c:	e005      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800822e:	4b30      	ldr	r3, [pc, #192]	@ (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0ef      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800823a:	7cfb      	ldrb	r3, [r7, #19]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d159      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008240:	4b2a      	ldr	r3, [pc, #168]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800824a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d01e      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	429a      	cmp	r2, r3
 800825a:	d019      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800825c:	4b23      	ldr	r3, [pc, #140]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800825e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008266:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008268:	4b20      	ldr	r3, [pc, #128]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800826a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800826e:	4a1f      	ldr	r2, [pc, #124]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008278:	4b1c      	ldr	r3, [pc, #112]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800827a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800827e:	4a1b      	ldr	r2, [pc, #108]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008288:	4a18      	ldr	r2, [pc, #96]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d016      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829a:	f7f9 fccd 	bl	8001c38 <HAL_GetTick>
 800829e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082a0:	e00b      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a2:	f7f9 fcc9 	bl	8001c38 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d902      	bls.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	74fb      	strb	r3, [r7, #19]
            break;
 80082b8:	e006      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082ba:	4b0c      	ldr	r3, [pc, #48]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0ec      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80082c8:	7cfb      	ldrb	r3, [r7, #19]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10b      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082ce:	4b07      	ldr	r3, [pc, #28]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082dc:	4903      	ldr	r1, [pc, #12]	@ (80082ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80082e4:	e008      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082e6:	7cfb      	ldrb	r3, [r7, #19]
 80082e8:	74bb      	strb	r3, [r7, #18]
 80082ea:	e005      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80082ec:	40021000 	.word	0x40021000
 80082f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f4:	7cfb      	ldrb	r3, [r7, #19]
 80082f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082f8:	7c7b      	ldrb	r3, [r7, #17]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d105      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082fe:	4ba7      	ldr	r3, [pc, #668]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008302:	4aa6      	ldr	r2, [pc, #664]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008304:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008308:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008316:	4ba1      	ldr	r3, [pc, #644]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800831c:	f023 0203 	bic.w	r2, r3, #3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	499d      	ldr	r1, [pc, #628]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008338:	4b98      	ldr	r3, [pc, #608]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800833a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800833e:	f023 020c 	bic.w	r2, r3, #12
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	4995      	ldr	r1, [pc, #596]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008348:	4313      	orrs	r3, r2
 800834a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800835a:	4b90      	ldr	r3, [pc, #576]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008360:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	498c      	ldr	r1, [pc, #560]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800836a:	4313      	orrs	r3, r2
 800836c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0308 	and.w	r3, r3, #8
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800837c:	4b87      	ldr	r3, [pc, #540]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800837e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008382:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	4984      	ldr	r1, [pc, #528]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0310 	and.w	r3, r3, #16
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800839e:	4b7f      	ldr	r3, [pc, #508]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	497b      	ldr	r1, [pc, #492]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0320 	and.w	r3, r3, #32
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083c0:	4b76      	ldr	r3, [pc, #472]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	4973      	ldr	r1, [pc, #460]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083e2:	4b6e      	ldr	r3, [pc, #440]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	496a      	ldr	r1, [pc, #424]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00a      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008404:	4b65      	ldr	r3, [pc, #404]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800840a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	4962      	ldr	r1, [pc, #392]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008426:	4b5d      	ldr	r3, [pc, #372]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800842c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008434:	4959      	ldr	r1, [pc, #356]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008436:	4313      	orrs	r3, r2
 8008438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00a      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008448:	4b54      	ldr	r3, [pc, #336]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800844a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800844e:	f023 0203 	bic.w	r2, r3, #3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008456:	4951      	ldr	r1, [pc, #324]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008458:	4313      	orrs	r3, r2
 800845a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800846a:	4b4c      	ldr	r3, [pc, #304]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800846c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008470:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	4948      	ldr	r1, [pc, #288]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800847a:	4313      	orrs	r3, r2
 800847c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008488:	2b00      	cmp	r3, #0
 800848a:	d015      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800848c:	4b43      	ldr	r3, [pc, #268]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800848e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008492:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849a:	4940      	ldr	r1, [pc, #256]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800849c:	4313      	orrs	r3, r2
 800849e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084aa:	d105      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084ac:	4b3b      	ldr	r3, [pc, #236]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	4a3a      	ldr	r2, [pc, #232]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084b6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d015      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80084c4:	4b35      	ldr	r3, [pc, #212]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d2:	4932      	ldr	r1, [pc, #200]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084e2:	d105      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084e4:	4b2d      	ldr	r3, [pc, #180]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	4a2c      	ldr	r2, [pc, #176]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084ee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d015      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80084fc:	4b27      	ldr	r3, [pc, #156]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008502:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850a:	4924      	ldr	r1, [pc, #144]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800850c:	4313      	orrs	r3, r2
 800850e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800851a:	d105      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800851c:	4b1f      	ldr	r3, [pc, #124]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	4a1e      	ldr	r2, [pc, #120]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008526:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d015      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008534:	4b19      	ldr	r3, [pc, #100]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800853a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008542:	4916      	ldr	r1, [pc, #88]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008544:	4313      	orrs	r3, r2
 8008546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008552:	d105      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008554:	4b11      	ldr	r3, [pc, #68]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	4a10      	ldr	r2, [pc, #64]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800855a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800855e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d019      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800856c:	4b0b      	ldr	r3, [pc, #44]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800856e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008572:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857a:	4908      	ldr	r1, [pc, #32]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800857c:	4313      	orrs	r3, r2
 800857e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800858a:	d109      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800858c:	4b03      	ldr	r3, [pc, #12]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	4a02      	ldr	r2, [pc, #8]	@ (800859c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008596:	60d3      	str	r3, [r2, #12]
 8008598:	e002      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800859a:	bf00      	nop
 800859c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d015      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80085ac:	4b29      	ldr	r3, [pc, #164]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ba:	4926      	ldr	r1, [pc, #152]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ca:	d105      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80085cc:	4b21      	ldr	r3, [pc, #132]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	4a20      	ldr	r2, [pc, #128]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d015      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80085e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085f2:	4918      	ldr	r1, [pc, #96]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008602:	d105      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008604:	4b13      	ldr	r3, [pc, #76]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	4a12      	ldr	r2, [pc, #72]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800860a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800860e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d015      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800861c:	4b0d      	ldr	r3, [pc, #52]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800861e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008622:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800862a:	490a      	ldr	r1, [pc, #40]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800862c:	4313      	orrs	r3, r2
 800862e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800863a:	d105      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800863c:	4b05      	ldr	r3, [pc, #20]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	4a04      	ldr	r2, [pc, #16]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008646:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008648:	7cbb      	ldrb	r3, [r7, #18]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	40021000 	.word	0x40021000

08008658 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e049      	b.n	80086fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d106      	bne.n	8008684 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7f9 f8f2 	bl	8001868 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3304      	adds	r3, #4
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f000 fa5c 	bl	8008b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d109      	bne.n	800872c <HAL_TIM_PWM_Start+0x24>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b01      	cmp	r3, #1
 8008722:	bf14      	ite	ne
 8008724:	2301      	movne	r3, #1
 8008726:	2300      	moveq	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	e03c      	b.n	80087a6 <HAL_TIM_PWM_Start+0x9e>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b04      	cmp	r3, #4
 8008730:	d109      	bne.n	8008746 <HAL_TIM_PWM_Start+0x3e>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b01      	cmp	r3, #1
 800873c:	bf14      	ite	ne
 800873e:	2301      	movne	r3, #1
 8008740:	2300      	moveq	r3, #0
 8008742:	b2db      	uxtb	r3, r3
 8008744:	e02f      	b.n	80087a6 <HAL_TIM_PWM_Start+0x9e>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b08      	cmp	r3, #8
 800874a:	d109      	bne.n	8008760 <HAL_TIM_PWM_Start+0x58>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b01      	cmp	r3, #1
 8008756:	bf14      	ite	ne
 8008758:	2301      	movne	r3, #1
 800875a:	2300      	moveq	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	e022      	b.n	80087a6 <HAL_TIM_PWM_Start+0x9e>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2b0c      	cmp	r3, #12
 8008764:	d109      	bne.n	800877a <HAL_TIM_PWM_Start+0x72>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b01      	cmp	r3, #1
 8008770:	bf14      	ite	ne
 8008772:	2301      	movne	r3, #1
 8008774:	2300      	moveq	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	e015      	b.n	80087a6 <HAL_TIM_PWM_Start+0x9e>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b10      	cmp	r3, #16
 800877e:	d109      	bne.n	8008794 <HAL_TIM_PWM_Start+0x8c>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b01      	cmp	r3, #1
 800878a:	bf14      	ite	ne
 800878c:	2301      	movne	r3, #1
 800878e:	2300      	moveq	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	e008      	b.n	80087a6 <HAL_TIM_PWM_Start+0x9e>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b01      	cmp	r3, #1
 800879e:	bf14      	ite	ne
 80087a0:	2301      	movne	r3, #1
 80087a2:	2300      	moveq	r3, #0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e0a6      	b.n	80088fc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d104      	bne.n	80087be <HAL_TIM_PWM_Start+0xb6>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087bc:	e023      	b.n	8008806 <HAL_TIM_PWM_Start+0xfe>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d104      	bne.n	80087ce <HAL_TIM_PWM_Start+0xc6>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087cc:	e01b      	b.n	8008806 <HAL_TIM_PWM_Start+0xfe>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d104      	bne.n	80087de <HAL_TIM_PWM_Start+0xd6>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087dc:	e013      	b.n	8008806 <HAL_TIM_PWM_Start+0xfe>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b0c      	cmp	r3, #12
 80087e2:	d104      	bne.n	80087ee <HAL_TIM_PWM_Start+0xe6>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087ec:	e00b      	b.n	8008806 <HAL_TIM_PWM_Start+0xfe>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b10      	cmp	r3, #16
 80087f2:	d104      	bne.n	80087fe <HAL_TIM_PWM_Start+0xf6>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087fc:	e003      	b.n	8008806 <HAL_TIM_PWM_Start+0xfe>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2202      	movs	r2, #2
 8008802:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2201      	movs	r2, #1
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	4618      	mov	r0, r3
 8008810:	f000 fd7e 	bl	8009310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a3a      	ldr	r2, [pc, #232]	@ (8008904 <HAL_TIM_PWM_Start+0x1fc>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d018      	beq.n	8008850 <HAL_TIM_PWM_Start+0x148>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a39      	ldr	r2, [pc, #228]	@ (8008908 <HAL_TIM_PWM_Start+0x200>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d013      	beq.n	8008850 <HAL_TIM_PWM_Start+0x148>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a37      	ldr	r2, [pc, #220]	@ (800890c <HAL_TIM_PWM_Start+0x204>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00e      	beq.n	8008850 <HAL_TIM_PWM_Start+0x148>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a36      	ldr	r2, [pc, #216]	@ (8008910 <HAL_TIM_PWM_Start+0x208>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d009      	beq.n	8008850 <HAL_TIM_PWM_Start+0x148>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a34      	ldr	r2, [pc, #208]	@ (8008914 <HAL_TIM_PWM_Start+0x20c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d004      	beq.n	8008850 <HAL_TIM_PWM_Start+0x148>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a33      	ldr	r2, [pc, #204]	@ (8008918 <HAL_TIM_PWM_Start+0x210>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d101      	bne.n	8008854 <HAL_TIM_PWM_Start+0x14c>
 8008850:	2301      	movs	r3, #1
 8008852:	e000      	b.n	8008856 <HAL_TIM_PWM_Start+0x14e>
 8008854:	2300      	movs	r3, #0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008868:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a25      	ldr	r2, [pc, #148]	@ (8008904 <HAL_TIM_PWM_Start+0x1fc>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d022      	beq.n	80088ba <HAL_TIM_PWM_Start+0x1b2>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800887c:	d01d      	beq.n	80088ba <HAL_TIM_PWM_Start+0x1b2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a26      	ldr	r2, [pc, #152]	@ (800891c <HAL_TIM_PWM_Start+0x214>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d018      	beq.n	80088ba <HAL_TIM_PWM_Start+0x1b2>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a24      	ldr	r2, [pc, #144]	@ (8008920 <HAL_TIM_PWM_Start+0x218>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d013      	beq.n	80088ba <HAL_TIM_PWM_Start+0x1b2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a23      	ldr	r2, [pc, #140]	@ (8008924 <HAL_TIM_PWM_Start+0x21c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d00e      	beq.n	80088ba <HAL_TIM_PWM_Start+0x1b2>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a19      	ldr	r2, [pc, #100]	@ (8008908 <HAL_TIM_PWM_Start+0x200>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d009      	beq.n	80088ba <HAL_TIM_PWM_Start+0x1b2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a18      	ldr	r2, [pc, #96]	@ (800890c <HAL_TIM_PWM_Start+0x204>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d004      	beq.n	80088ba <HAL_TIM_PWM_Start+0x1b2>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a18      	ldr	r2, [pc, #96]	@ (8008918 <HAL_TIM_PWM_Start+0x210>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d115      	bne.n	80088e6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	4b19      	ldr	r3, [pc, #100]	@ (8008928 <HAL_TIM_PWM_Start+0x220>)
 80088c2:	4013      	ands	r3, r2
 80088c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b06      	cmp	r3, #6
 80088ca:	d015      	beq.n	80088f8 <HAL_TIM_PWM_Start+0x1f0>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088d2:	d011      	beq.n	80088f8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0201 	orr.w	r2, r2, #1
 80088e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088e4:	e008      	b.n	80088f8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f042 0201 	orr.w	r2, r2, #1
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	e000      	b.n	80088fa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	40012c00 	.word	0x40012c00
 8008908:	40013400 	.word	0x40013400
 800890c:	40014000 	.word	0x40014000
 8008910:	40014400 	.word	0x40014400
 8008914:	40014800 	.word	0x40014800
 8008918:	40015000 	.word	0x40015000
 800891c:	40000400 	.word	0x40000400
 8008920:	40000800 	.word	0x40000800
 8008924:	40000c00 	.word	0x40000c00
 8008928:	00010007 	.word	0x00010007

0800892c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008946:	2302      	movs	r3, #2
 8008948:	e0ff      	b.n	8008b4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b14      	cmp	r3, #20
 8008956:	f200 80f0 	bhi.w	8008b3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800895a:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	080089b5 	.word	0x080089b5
 8008964:	08008b3b 	.word	0x08008b3b
 8008968:	08008b3b 	.word	0x08008b3b
 800896c:	08008b3b 	.word	0x08008b3b
 8008970:	080089f5 	.word	0x080089f5
 8008974:	08008b3b 	.word	0x08008b3b
 8008978:	08008b3b 	.word	0x08008b3b
 800897c:	08008b3b 	.word	0x08008b3b
 8008980:	08008a37 	.word	0x08008a37
 8008984:	08008b3b 	.word	0x08008b3b
 8008988:	08008b3b 	.word	0x08008b3b
 800898c:	08008b3b 	.word	0x08008b3b
 8008990:	08008a77 	.word	0x08008a77
 8008994:	08008b3b 	.word	0x08008b3b
 8008998:	08008b3b 	.word	0x08008b3b
 800899c:	08008b3b 	.word	0x08008b3b
 80089a0:	08008ab9 	.word	0x08008ab9
 80089a4:	08008b3b 	.word	0x08008b3b
 80089a8:	08008b3b 	.word	0x08008b3b
 80089ac:	08008b3b 	.word	0x08008b3b
 80089b0:	08008af9 	.word	0x08008af9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 f97e 	bl	8008cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699a      	ldr	r2, [r3, #24]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0208 	orr.w	r2, r2, #8
 80089ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0204 	bic.w	r2, r2, #4
 80089de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6999      	ldr	r1, [r3, #24]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	691a      	ldr	r2, [r3, #16]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	619a      	str	r2, [r3, #24]
      break;
 80089f2:	e0a5      	b.n	8008b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68b9      	ldr	r1, [r7, #8]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 f9f8 	bl	8008df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699a      	ldr	r2, [r3, #24]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	699a      	ldr	r2, [r3, #24]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6999      	ldr	r1, [r3, #24]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	021a      	lsls	r2, r3, #8
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	619a      	str	r2, [r3, #24]
      break;
 8008a34:	e084      	b.n	8008b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68b9      	ldr	r1, [r7, #8]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 fa6b 	bl	8008f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	69da      	ldr	r2, [r3, #28]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0208 	orr.w	r2, r2, #8
 8008a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 0204 	bic.w	r2, r2, #4
 8008a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69d9      	ldr	r1, [r3, #28]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	61da      	str	r2, [r3, #28]
      break;
 8008a74:	e064      	b.n	8008b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68b9      	ldr	r1, [r7, #8]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fadd 	bl	800903c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69da      	ldr	r2, [r3, #28]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	69da      	ldr	r2, [r3, #28]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69d9      	ldr	r1, [r3, #28]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	021a      	lsls	r2, r3, #8
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	61da      	str	r2, [r3, #28]
      break;
 8008ab6:	e043      	b.n	8008b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fb50 	bl	8009164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0208 	orr.w	r2, r2, #8
 8008ad2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0204 	bic.w	r2, r2, #4
 8008ae2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	691a      	ldr	r2, [r3, #16]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008af6:	e023      	b.n	8008b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fb9a 	bl	8009238 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	021a      	lsls	r2, r3, #8
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b38:	e002      	b.n	8008b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop

08008b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a4c      	ldr	r2, [pc, #304]	@ (8008c98 <TIM_Base_SetConfig+0x144>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d017      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b72:	d013      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a49      	ldr	r2, [pc, #292]	@ (8008c9c <TIM_Base_SetConfig+0x148>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d00f      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a48      	ldr	r2, [pc, #288]	@ (8008ca0 <TIM_Base_SetConfig+0x14c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d00b      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a47      	ldr	r2, [pc, #284]	@ (8008ca4 <TIM_Base_SetConfig+0x150>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d007      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a46      	ldr	r2, [pc, #280]	@ (8008ca8 <TIM_Base_SetConfig+0x154>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d003      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a45      	ldr	r2, [pc, #276]	@ (8008cac <TIM_Base_SetConfig+0x158>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d108      	bne.n	8008bae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a39      	ldr	r2, [pc, #228]	@ (8008c98 <TIM_Base_SetConfig+0x144>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d023      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bbc:	d01f      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a36      	ldr	r2, [pc, #216]	@ (8008c9c <TIM_Base_SetConfig+0x148>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d01b      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a35      	ldr	r2, [pc, #212]	@ (8008ca0 <TIM_Base_SetConfig+0x14c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d017      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a34      	ldr	r2, [pc, #208]	@ (8008ca4 <TIM_Base_SetConfig+0x150>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d013      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a33      	ldr	r2, [pc, #204]	@ (8008ca8 <TIM_Base_SetConfig+0x154>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d00f      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a33      	ldr	r2, [pc, #204]	@ (8008cb0 <TIM_Base_SetConfig+0x15c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00b      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a32      	ldr	r2, [pc, #200]	@ (8008cb4 <TIM_Base_SetConfig+0x160>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d007      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a31      	ldr	r2, [pc, #196]	@ (8008cb8 <TIM_Base_SetConfig+0x164>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d003      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8008cac <TIM_Base_SetConfig+0x158>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d108      	bne.n	8008c10 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a18      	ldr	r2, [pc, #96]	@ (8008c98 <TIM_Base_SetConfig+0x144>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d013      	beq.n	8008c64 <TIM_Base_SetConfig+0x110>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ca8 <TIM_Base_SetConfig+0x154>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00f      	beq.n	8008c64 <TIM_Base_SetConfig+0x110>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a1a      	ldr	r2, [pc, #104]	@ (8008cb0 <TIM_Base_SetConfig+0x15c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00b      	beq.n	8008c64 <TIM_Base_SetConfig+0x110>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a19      	ldr	r2, [pc, #100]	@ (8008cb4 <TIM_Base_SetConfig+0x160>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d007      	beq.n	8008c64 <TIM_Base_SetConfig+0x110>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a18      	ldr	r2, [pc, #96]	@ (8008cb8 <TIM_Base_SetConfig+0x164>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_Base_SetConfig+0x110>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a13      	ldr	r2, [pc, #76]	@ (8008cac <TIM_Base_SetConfig+0x158>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d103      	bne.n	8008c6c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d105      	bne.n	8008c8a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f023 0201 	bic.w	r2, r3, #1
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	611a      	str	r2, [r3, #16]
  }
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	40012c00 	.word	0x40012c00
 8008c9c:	40000400 	.word	0x40000400
 8008ca0:	40000800 	.word	0x40000800
 8008ca4:	40000c00 	.word	0x40000c00
 8008ca8:	40013400 	.word	0x40013400
 8008cac:	40015000 	.word	0x40015000
 8008cb0:	40014000 	.word	0x40014000
 8008cb4:	40014400 	.word	0x40014400
 8008cb8:	40014800 	.word	0x40014800

08008cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	f023 0201 	bic.w	r2, r3, #1
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0303 	bic.w	r3, r3, #3
 8008cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f023 0302 	bic.w	r3, r3, #2
 8008d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a30      	ldr	r2, [pc, #192]	@ (8008dd8 <TIM_OC1_SetConfig+0x11c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d013      	beq.n	8008d44 <TIM_OC1_SetConfig+0x88>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8008ddc <TIM_OC1_SetConfig+0x120>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d00f      	beq.n	8008d44 <TIM_OC1_SetConfig+0x88>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a2e      	ldr	r2, [pc, #184]	@ (8008de0 <TIM_OC1_SetConfig+0x124>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00b      	beq.n	8008d44 <TIM_OC1_SetConfig+0x88>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8008de4 <TIM_OC1_SetConfig+0x128>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d007      	beq.n	8008d44 <TIM_OC1_SetConfig+0x88>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a2c      	ldr	r2, [pc, #176]	@ (8008de8 <TIM_OC1_SetConfig+0x12c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d003      	beq.n	8008d44 <TIM_OC1_SetConfig+0x88>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8008dec <TIM_OC1_SetConfig+0x130>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d10c      	bne.n	8008d5e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f023 0308 	bic.w	r3, r3, #8
 8008d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f023 0304 	bic.w	r3, r3, #4
 8008d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a1d      	ldr	r2, [pc, #116]	@ (8008dd8 <TIM_OC1_SetConfig+0x11c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d013      	beq.n	8008d8e <TIM_OC1_SetConfig+0xd2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a1c      	ldr	r2, [pc, #112]	@ (8008ddc <TIM_OC1_SetConfig+0x120>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00f      	beq.n	8008d8e <TIM_OC1_SetConfig+0xd2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a1b      	ldr	r2, [pc, #108]	@ (8008de0 <TIM_OC1_SetConfig+0x124>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00b      	beq.n	8008d8e <TIM_OC1_SetConfig+0xd2>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a1a      	ldr	r2, [pc, #104]	@ (8008de4 <TIM_OC1_SetConfig+0x128>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d007      	beq.n	8008d8e <TIM_OC1_SetConfig+0xd2>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a19      	ldr	r2, [pc, #100]	@ (8008de8 <TIM_OC1_SetConfig+0x12c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d003      	beq.n	8008d8e <TIM_OC1_SetConfig+0xd2>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a18      	ldr	r2, [pc, #96]	@ (8008dec <TIM_OC1_SetConfig+0x130>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d111      	bne.n	8008db2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	621a      	str	r2, [r3, #32]
}
 8008dcc:	bf00      	nop
 8008dce:	371c      	adds	r7, #28
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	40012c00 	.word	0x40012c00
 8008ddc:	40013400 	.word	0x40013400
 8008de0:	40014000 	.word	0x40014000
 8008de4:	40014400 	.word	0x40014400
 8008de8:	40014800 	.word	0x40014800
 8008dec:	40015000 	.word	0x40015000

08008df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f023 0210 	bic.w	r2, r3, #16
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	021b      	lsls	r3, r3, #8
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f023 0320 	bic.w	r3, r3, #32
 8008e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8008f00 <TIM_OC2_SetConfig+0x110>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d007      	beq.n	8008e64 <TIM_OC2_SetConfig+0x74>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a2b      	ldr	r2, [pc, #172]	@ (8008f04 <TIM_OC2_SetConfig+0x114>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d003      	beq.n	8008e64 <TIM_OC2_SetConfig+0x74>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008f08 <TIM_OC2_SetConfig+0x118>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d10d      	bne.n	8008e80 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a1f      	ldr	r2, [pc, #124]	@ (8008f00 <TIM_OC2_SetConfig+0x110>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d013      	beq.n	8008eb0 <TIM_OC2_SetConfig+0xc0>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008f04 <TIM_OC2_SetConfig+0x114>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00f      	beq.n	8008eb0 <TIM_OC2_SetConfig+0xc0>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a1e      	ldr	r2, [pc, #120]	@ (8008f0c <TIM_OC2_SetConfig+0x11c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d00b      	beq.n	8008eb0 <TIM_OC2_SetConfig+0xc0>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008f10 <TIM_OC2_SetConfig+0x120>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d007      	beq.n	8008eb0 <TIM_OC2_SetConfig+0xc0>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f14 <TIM_OC2_SetConfig+0x124>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d003      	beq.n	8008eb0 <TIM_OC2_SetConfig+0xc0>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a17      	ldr	r2, [pc, #92]	@ (8008f08 <TIM_OC2_SetConfig+0x118>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d113      	bne.n	8008ed8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008eb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	621a      	str	r2, [r3, #32]
}
 8008ef2:	bf00      	nop
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	40012c00 	.word	0x40012c00
 8008f04:	40013400 	.word	0x40013400
 8008f08:	40015000 	.word	0x40015000
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40014400 	.word	0x40014400
 8008f14:	40014800 	.word	0x40014800

08008f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0303 	bic.w	r3, r3, #3
 8008f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	021b      	lsls	r3, r3, #8
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a2b      	ldr	r2, [pc, #172]	@ (8009024 <TIM_OC3_SetConfig+0x10c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d007      	beq.n	8008f8a <TIM_OC3_SetConfig+0x72>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8009028 <TIM_OC3_SetConfig+0x110>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d003      	beq.n	8008f8a <TIM_OC3_SetConfig+0x72>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a29      	ldr	r2, [pc, #164]	@ (800902c <TIM_OC3_SetConfig+0x114>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d10d      	bne.n	8008fa6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8009024 <TIM_OC3_SetConfig+0x10c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <TIM_OC3_SetConfig+0xbe>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8009028 <TIM_OC3_SetConfig+0x110>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00f      	beq.n	8008fd6 <TIM_OC3_SetConfig+0xbe>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8009030 <TIM_OC3_SetConfig+0x118>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00b      	beq.n	8008fd6 <TIM_OC3_SetConfig+0xbe>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8009034 <TIM_OC3_SetConfig+0x11c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d007      	beq.n	8008fd6 <TIM_OC3_SetConfig+0xbe>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8009038 <TIM_OC3_SetConfig+0x120>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d003      	beq.n	8008fd6 <TIM_OC3_SetConfig+0xbe>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a16      	ldr	r2, [pc, #88]	@ (800902c <TIM_OC3_SetConfig+0x114>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d113      	bne.n	8008ffe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	011b      	lsls	r3, r3, #4
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	621a      	str	r2, [r3, #32]
}
 8009018:	bf00      	nop
 800901a:	371c      	adds	r7, #28
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40013400 	.word	0x40013400
 800902c:	40015000 	.word	0x40015000
 8009030:	40014000 	.word	0x40014000
 8009034:	40014400 	.word	0x40014400
 8009038:	40014800 	.word	0x40014800

0800903c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800906a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800906e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	021b      	lsls	r3, r3, #8
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800908a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	031b      	lsls	r3, r3, #12
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a2c      	ldr	r2, [pc, #176]	@ (800914c <TIM_OC4_SetConfig+0x110>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d007      	beq.n	80090b0 <TIM_OC4_SetConfig+0x74>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a2b      	ldr	r2, [pc, #172]	@ (8009150 <TIM_OC4_SetConfig+0x114>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d003      	beq.n	80090b0 <TIM_OC4_SetConfig+0x74>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009154 <TIM_OC4_SetConfig+0x118>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d10d      	bne.n	80090cc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	031b      	lsls	r3, r3, #12
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a1f      	ldr	r2, [pc, #124]	@ (800914c <TIM_OC4_SetConfig+0x110>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d013      	beq.n	80090fc <TIM_OC4_SetConfig+0xc0>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009150 <TIM_OC4_SetConfig+0x114>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d00f      	beq.n	80090fc <TIM_OC4_SetConfig+0xc0>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a1e      	ldr	r2, [pc, #120]	@ (8009158 <TIM_OC4_SetConfig+0x11c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00b      	beq.n	80090fc <TIM_OC4_SetConfig+0xc0>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a1d      	ldr	r2, [pc, #116]	@ (800915c <TIM_OC4_SetConfig+0x120>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d007      	beq.n	80090fc <TIM_OC4_SetConfig+0xc0>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009160 <TIM_OC4_SetConfig+0x124>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d003      	beq.n	80090fc <TIM_OC4_SetConfig+0xc0>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a17      	ldr	r2, [pc, #92]	@ (8009154 <TIM_OC4_SetConfig+0x118>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d113      	bne.n	8009124 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009102:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800910a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	019b      	lsls	r3, r3, #6
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	4313      	orrs	r3, r2
 8009116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	019b      	lsls	r3, r3, #6
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	621a      	str	r2, [r3, #32]
}
 800913e:	bf00      	nop
 8009140:	371c      	adds	r7, #28
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	40012c00 	.word	0x40012c00
 8009150:	40013400 	.word	0x40013400
 8009154:	40015000 	.word	0x40015000
 8009158:	40014000 	.word	0x40014000
 800915c:	40014400 	.word	0x40014400
 8009160:	40014800 	.word	0x40014800

08009164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800918a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	041b      	lsls	r3, r3, #16
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a19      	ldr	r2, [pc, #100]	@ (8009220 <TIM_OC5_SetConfig+0xbc>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d013      	beq.n	80091e6 <TIM_OC5_SetConfig+0x82>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a18      	ldr	r2, [pc, #96]	@ (8009224 <TIM_OC5_SetConfig+0xc0>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d00f      	beq.n	80091e6 <TIM_OC5_SetConfig+0x82>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a17      	ldr	r2, [pc, #92]	@ (8009228 <TIM_OC5_SetConfig+0xc4>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d00b      	beq.n	80091e6 <TIM_OC5_SetConfig+0x82>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a16      	ldr	r2, [pc, #88]	@ (800922c <TIM_OC5_SetConfig+0xc8>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d007      	beq.n	80091e6 <TIM_OC5_SetConfig+0x82>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a15      	ldr	r2, [pc, #84]	@ (8009230 <TIM_OC5_SetConfig+0xcc>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d003      	beq.n	80091e6 <TIM_OC5_SetConfig+0x82>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a14      	ldr	r2, [pc, #80]	@ (8009234 <TIM_OC5_SetConfig+0xd0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d109      	bne.n	80091fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	621a      	str	r2, [r3, #32]
}
 8009214:	bf00      	nop
 8009216:	371c      	adds	r7, #28
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	40012c00 	.word	0x40012c00
 8009224:	40013400 	.word	0x40013400
 8009228:	40014000 	.word	0x40014000
 800922c:	40014400 	.word	0x40014400
 8009230:	40014800 	.word	0x40014800
 8009234:	40015000 	.word	0x40015000

08009238 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800925e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800926a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	021b      	lsls	r3, r3, #8
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4313      	orrs	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800927e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	051b      	lsls	r3, r3, #20
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	4313      	orrs	r3, r2
 800928a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a1a      	ldr	r2, [pc, #104]	@ (80092f8 <TIM_OC6_SetConfig+0xc0>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d013      	beq.n	80092bc <TIM_OC6_SetConfig+0x84>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a19      	ldr	r2, [pc, #100]	@ (80092fc <TIM_OC6_SetConfig+0xc4>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d00f      	beq.n	80092bc <TIM_OC6_SetConfig+0x84>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a18      	ldr	r2, [pc, #96]	@ (8009300 <TIM_OC6_SetConfig+0xc8>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00b      	beq.n	80092bc <TIM_OC6_SetConfig+0x84>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a17      	ldr	r2, [pc, #92]	@ (8009304 <TIM_OC6_SetConfig+0xcc>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d007      	beq.n	80092bc <TIM_OC6_SetConfig+0x84>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a16      	ldr	r2, [pc, #88]	@ (8009308 <TIM_OC6_SetConfig+0xd0>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d003      	beq.n	80092bc <TIM_OC6_SetConfig+0x84>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a15      	ldr	r2, [pc, #84]	@ (800930c <TIM_OC6_SetConfig+0xd4>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d109      	bne.n	80092d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	029b      	lsls	r3, r3, #10
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	40012c00 	.word	0x40012c00
 80092fc:	40013400 	.word	0x40013400
 8009300:	40014000 	.word	0x40014000
 8009304:	40014400 	.word	0x40014400
 8009308:	40014800 	.word	0x40014800
 800930c:	40015000 	.word	0x40015000

08009310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f003 031f 	and.w	r3, r3, #31
 8009322:	2201      	movs	r2, #1
 8009324:	fa02 f303 	lsl.w	r3, r2, r3
 8009328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6a1a      	ldr	r2, [r3, #32]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	43db      	mvns	r3, r3
 8009332:	401a      	ands	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6a1a      	ldr	r2, [r3, #32]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f003 031f 	and.w	r3, r3, #31
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	fa01 f303 	lsl.w	r3, r1, r3
 8009348:	431a      	orrs	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	621a      	str	r2, [r3, #32]
}
 800934e:	bf00      	nop
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
	...

0800935c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d109      	bne.n	8009380 <HAL_TIMEx_PWMN_Start+0x24>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b01      	cmp	r3, #1
 8009376:	bf14      	ite	ne
 8009378:	2301      	movne	r3, #1
 800937a:	2300      	moveq	r3, #0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	e022      	b.n	80093c6 <HAL_TIMEx_PWMN_Start+0x6a>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b04      	cmp	r3, #4
 8009384:	d109      	bne.n	800939a <HAL_TIMEx_PWMN_Start+0x3e>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b01      	cmp	r3, #1
 8009390:	bf14      	ite	ne
 8009392:	2301      	movne	r3, #1
 8009394:	2300      	moveq	r3, #0
 8009396:	b2db      	uxtb	r3, r3
 8009398:	e015      	b.n	80093c6 <HAL_TIMEx_PWMN_Start+0x6a>
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b08      	cmp	r3, #8
 800939e:	d109      	bne.n	80093b4 <HAL_TIMEx_PWMN_Start+0x58>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	bf14      	ite	ne
 80093ac:	2301      	movne	r3, #1
 80093ae:	2300      	moveq	r3, #0
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	e008      	b.n	80093c6 <HAL_TIMEx_PWMN_Start+0x6a>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	bf14      	ite	ne
 80093c0:	2301      	movne	r3, #1
 80093c2:	2300      	moveq	r3, #0
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e073      	b.n	80094b6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <HAL_TIMEx_PWMN_Start+0x82>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093dc:	e013      	b.n	8009406 <HAL_TIMEx_PWMN_Start+0xaa>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	d104      	bne.n	80093ee <HAL_TIMEx_PWMN_Start+0x92>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093ec:	e00b      	b.n	8009406 <HAL_TIMEx_PWMN_Start+0xaa>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d104      	bne.n	80093fe <HAL_TIMEx_PWMN_Start+0xa2>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093fc:	e003      	b.n	8009406 <HAL_TIMEx_PWMN_Start+0xaa>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2202      	movs	r2, #2
 8009402:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2204      	movs	r2, #4
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f9a3 	bl	800975a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009422:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a25      	ldr	r2, [pc, #148]	@ (80094c0 <HAL_TIMEx_PWMN_Start+0x164>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d022      	beq.n	8009474 <HAL_TIMEx_PWMN_Start+0x118>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009436:	d01d      	beq.n	8009474 <HAL_TIMEx_PWMN_Start+0x118>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a21      	ldr	r2, [pc, #132]	@ (80094c4 <HAL_TIMEx_PWMN_Start+0x168>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d018      	beq.n	8009474 <HAL_TIMEx_PWMN_Start+0x118>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a20      	ldr	r2, [pc, #128]	@ (80094c8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d013      	beq.n	8009474 <HAL_TIMEx_PWMN_Start+0x118>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a1e      	ldr	r2, [pc, #120]	@ (80094cc <HAL_TIMEx_PWMN_Start+0x170>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d00e      	beq.n	8009474 <HAL_TIMEx_PWMN_Start+0x118>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a1d      	ldr	r2, [pc, #116]	@ (80094d0 <HAL_TIMEx_PWMN_Start+0x174>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d009      	beq.n	8009474 <HAL_TIMEx_PWMN_Start+0x118>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a1b      	ldr	r2, [pc, #108]	@ (80094d4 <HAL_TIMEx_PWMN_Start+0x178>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d004      	beq.n	8009474 <HAL_TIMEx_PWMN_Start+0x118>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a1a      	ldr	r2, [pc, #104]	@ (80094d8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d115      	bne.n	80094a0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	4b18      	ldr	r3, [pc, #96]	@ (80094dc <HAL_TIMEx_PWMN_Start+0x180>)
 800947c:	4013      	ands	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b06      	cmp	r3, #6
 8009484:	d015      	beq.n	80094b2 <HAL_TIMEx_PWMN_Start+0x156>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800948c:	d011      	beq.n	80094b2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f042 0201 	orr.w	r2, r2, #1
 800949c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800949e:	e008      	b.n	80094b2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 0201 	orr.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	e000      	b.n	80094b4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	40012c00 	.word	0x40012c00
 80094c4:	40000400 	.word	0x40000400
 80094c8:	40000800 	.word	0x40000800
 80094cc:	40000c00 	.word	0x40000c00
 80094d0:	40013400 	.word	0x40013400
 80094d4:	40014000 	.word	0x40014000
 80094d8:	40015000 	.word	0x40015000
 80094dc:	00010007 	.word	0x00010007

080094e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e074      	b.n	80095e2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a34      	ldr	r2, [pc, #208]	@ (80095f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d009      	beq.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a33      	ldr	r2, [pc, #204]	@ (80095f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d004      	beq.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a31      	ldr	r2, [pc, #196]	@ (80095f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d108      	bne.n	8009548 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800953c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	4313      	orrs	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800954e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	4313      	orrs	r3, r2
 800955c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a21      	ldr	r2, [pc, #132]	@ (80095f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d022      	beq.n	80095b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009578:	d01d      	beq.n	80095b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a1f      	ldr	r2, [pc, #124]	@ (80095fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d018      	beq.n	80095b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a1d      	ldr	r2, [pc, #116]	@ (8009600 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d013      	beq.n	80095b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a1c      	ldr	r2, [pc, #112]	@ (8009604 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00e      	beq.n	80095b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a15      	ldr	r2, [pc, #84]	@ (80095f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d009      	beq.n	80095b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a18      	ldr	r2, [pc, #96]	@ (8009608 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d004      	beq.n	80095b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a11      	ldr	r2, [pc, #68]	@ (80095f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d10c      	bne.n	80095d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	40012c00 	.word	0x40012c00
 80095f4:	40013400 	.word	0x40013400
 80095f8:	40015000 	.word	0x40015000
 80095fc:	40000400 	.word	0x40000400
 8009600:	40000800 	.word	0x40000800
 8009604:	40000c00 	.word	0x40000c00
 8009608:	40014000 	.word	0x40014000

0800960c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009620:	2b01      	cmp	r3, #1
 8009622:	d101      	bne.n	8009628 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009624:	2302      	movs	r3, #2
 8009626:	e078      	b.n	800971a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	4313      	orrs	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	4313      	orrs	r3, r2
 800964a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4313      	orrs	r3, r2
 8009666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	4313      	orrs	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800968e:	4313      	orrs	r3, r2
 8009690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	041b      	lsls	r3, r3, #16
 800969e:	4313      	orrs	r3, r2
 80096a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009728 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d009      	beq.n	80096ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a1b      	ldr	r2, [pc, #108]	@ (800972c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d004      	beq.n	80096ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a19      	ldr	r2, [pc, #100]	@ (8009730 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d11c      	bne.n	8009708 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d8:	051b      	lsls	r3, r3, #20
 80096da:	4313      	orrs	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009704:	4313      	orrs	r3, r2
 8009706:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	40012c00 	.word	0x40012c00
 800972c:	40013400 	.word	0x40013400
 8009730:	40015000 	.word	0x40015000

08009734 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800974a:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800975a:	b480      	push	{r7}
 800975c:	b087      	sub	sp, #28
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	2204      	movs	r2, #4
 800976e:	fa02 f303 	lsl.w	r3, r2, r3
 8009772:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6a1a      	ldr	r2, [r3, #32]
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	43db      	mvns	r3, r3
 800977c:	401a      	ands	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6a1a      	ldr	r2, [r3, #32]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f003 030f 	and.w	r3, r3, #15
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	fa01 f303 	lsl.w	r3, r1, r3
 8009792:	431a      	orrs	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	621a      	str	r2, [r3, #32]
}
 8009798:	bf00      	nop
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <_ZdlPvj>:
 80097a4:	f000 b811 	b.w	80097ca <_ZdlPv>

080097a8 <_Znwj>:
 80097a8:	2801      	cmp	r0, #1
 80097aa:	bf38      	it	cc
 80097ac:	2001      	movcc	r0, #1
 80097ae:	b510      	push	{r4, lr}
 80097b0:	4604      	mov	r4, r0
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 f81c 	bl	80097f0 <malloc>
 80097b8:	b100      	cbz	r0, 80097bc <_Znwj+0x14>
 80097ba:	bd10      	pop	{r4, pc}
 80097bc:	f000 f808 	bl	80097d0 <_ZSt15get_new_handlerv>
 80097c0:	b908      	cbnz	r0, 80097c6 <_Znwj+0x1e>
 80097c2:	f000 f80d 	bl	80097e0 <abort>
 80097c6:	4780      	blx	r0
 80097c8:	e7f3      	b.n	80097b2 <_Znwj+0xa>

080097ca <_ZdlPv>:
 80097ca:	f000 b819 	b.w	8009800 <free>
	...

080097d0 <_ZSt15get_new_handlerv>:
 80097d0:	4b02      	ldr	r3, [pc, #8]	@ (80097dc <_ZSt15get_new_handlerv+0xc>)
 80097d2:	6818      	ldr	r0, [r3, #0]
 80097d4:	f3bf 8f5b 	dmb	ish
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	200003c0 	.word	0x200003c0

080097e0 <abort>:
 80097e0:	b508      	push	{r3, lr}
 80097e2:	2006      	movs	r0, #6
 80097e4:	f000 f8f2 	bl	80099cc <raise>
 80097e8:	2001      	movs	r0, #1
 80097ea:	f7f8 f943 	bl	8001a74 <_exit>
	...

080097f0 <malloc>:
 80097f0:	4b02      	ldr	r3, [pc, #8]	@ (80097fc <malloc+0xc>)
 80097f2:	4601      	mov	r1, r0
 80097f4:	6818      	ldr	r0, [r3, #0]
 80097f6:	f000 b82d 	b.w	8009854 <_malloc_r>
 80097fa:	bf00      	nop
 80097fc:	2000000c 	.word	0x2000000c

08009800 <free>:
 8009800:	4b02      	ldr	r3, [pc, #8]	@ (800980c <free+0xc>)
 8009802:	4601      	mov	r1, r0
 8009804:	6818      	ldr	r0, [r3, #0]
 8009806:	f000 b939 	b.w	8009a7c <_free_r>
 800980a:	bf00      	nop
 800980c:	2000000c 	.word	0x2000000c

08009810 <sbrk_aligned>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	4e0f      	ldr	r6, [pc, #60]	@ (8009850 <sbrk_aligned+0x40>)
 8009814:	460c      	mov	r4, r1
 8009816:	6831      	ldr	r1, [r6, #0]
 8009818:	4605      	mov	r5, r0
 800981a:	b911      	cbnz	r1, 8009822 <sbrk_aligned+0x12>
 800981c:	f000 f8f2 	bl	8009a04 <_sbrk_r>
 8009820:	6030      	str	r0, [r6, #0]
 8009822:	4621      	mov	r1, r4
 8009824:	4628      	mov	r0, r5
 8009826:	f000 f8ed 	bl	8009a04 <_sbrk_r>
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d103      	bne.n	8009836 <sbrk_aligned+0x26>
 800982e:	f04f 34ff 	mov.w	r4, #4294967295
 8009832:	4620      	mov	r0, r4
 8009834:	bd70      	pop	{r4, r5, r6, pc}
 8009836:	1cc4      	adds	r4, r0, #3
 8009838:	f024 0403 	bic.w	r4, r4, #3
 800983c:	42a0      	cmp	r0, r4
 800983e:	d0f8      	beq.n	8009832 <sbrk_aligned+0x22>
 8009840:	1a21      	subs	r1, r4, r0
 8009842:	4628      	mov	r0, r5
 8009844:	f000 f8de 	bl	8009a04 <_sbrk_r>
 8009848:	3001      	adds	r0, #1
 800984a:	d1f2      	bne.n	8009832 <sbrk_aligned+0x22>
 800984c:	e7ef      	b.n	800982e <sbrk_aligned+0x1e>
 800984e:	bf00      	nop
 8009850:	200003c4 	.word	0x200003c4

08009854 <_malloc_r>:
 8009854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009858:	1ccd      	adds	r5, r1, #3
 800985a:	f025 0503 	bic.w	r5, r5, #3
 800985e:	3508      	adds	r5, #8
 8009860:	2d0c      	cmp	r5, #12
 8009862:	bf38      	it	cc
 8009864:	250c      	movcc	r5, #12
 8009866:	2d00      	cmp	r5, #0
 8009868:	4606      	mov	r6, r0
 800986a:	db01      	blt.n	8009870 <_malloc_r+0x1c>
 800986c:	42a9      	cmp	r1, r5
 800986e:	d904      	bls.n	800987a <_malloc_r+0x26>
 8009870:	230c      	movs	r3, #12
 8009872:	6033      	str	r3, [r6, #0]
 8009874:	2000      	movs	r0, #0
 8009876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009950 <_malloc_r+0xfc>
 800987e:	f000 f869 	bl	8009954 <__malloc_lock>
 8009882:	f8d8 3000 	ldr.w	r3, [r8]
 8009886:	461c      	mov	r4, r3
 8009888:	bb44      	cbnz	r4, 80098dc <_malloc_r+0x88>
 800988a:	4629      	mov	r1, r5
 800988c:	4630      	mov	r0, r6
 800988e:	f7ff ffbf 	bl	8009810 <sbrk_aligned>
 8009892:	1c43      	adds	r3, r0, #1
 8009894:	4604      	mov	r4, r0
 8009896:	d158      	bne.n	800994a <_malloc_r+0xf6>
 8009898:	f8d8 4000 	ldr.w	r4, [r8]
 800989c:	4627      	mov	r7, r4
 800989e:	2f00      	cmp	r7, #0
 80098a0:	d143      	bne.n	800992a <_malloc_r+0xd6>
 80098a2:	2c00      	cmp	r4, #0
 80098a4:	d04b      	beq.n	800993e <_malloc_r+0xea>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	4639      	mov	r1, r7
 80098aa:	4630      	mov	r0, r6
 80098ac:	eb04 0903 	add.w	r9, r4, r3
 80098b0:	f000 f8a8 	bl	8009a04 <_sbrk_r>
 80098b4:	4581      	cmp	r9, r0
 80098b6:	d142      	bne.n	800993e <_malloc_r+0xea>
 80098b8:	6821      	ldr	r1, [r4, #0]
 80098ba:	1a6d      	subs	r5, r5, r1
 80098bc:	4629      	mov	r1, r5
 80098be:	4630      	mov	r0, r6
 80098c0:	f7ff ffa6 	bl	8009810 <sbrk_aligned>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d03a      	beq.n	800993e <_malloc_r+0xea>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	442b      	add	r3, r5
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	f8d8 3000 	ldr.w	r3, [r8]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	bb62      	cbnz	r2, 8009930 <_malloc_r+0xdc>
 80098d6:	f8c8 7000 	str.w	r7, [r8]
 80098da:	e00f      	b.n	80098fc <_malloc_r+0xa8>
 80098dc:	6822      	ldr	r2, [r4, #0]
 80098de:	1b52      	subs	r2, r2, r5
 80098e0:	d420      	bmi.n	8009924 <_malloc_r+0xd0>
 80098e2:	2a0b      	cmp	r2, #11
 80098e4:	d917      	bls.n	8009916 <_malloc_r+0xc2>
 80098e6:	1961      	adds	r1, r4, r5
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	6025      	str	r5, [r4, #0]
 80098ec:	bf18      	it	ne
 80098ee:	6059      	strne	r1, [r3, #4]
 80098f0:	6863      	ldr	r3, [r4, #4]
 80098f2:	bf08      	it	eq
 80098f4:	f8c8 1000 	streq.w	r1, [r8]
 80098f8:	5162      	str	r2, [r4, r5]
 80098fa:	604b      	str	r3, [r1, #4]
 80098fc:	4630      	mov	r0, r6
 80098fe:	f000 f82f 	bl	8009960 <__malloc_unlock>
 8009902:	f104 000b 	add.w	r0, r4, #11
 8009906:	1d23      	adds	r3, r4, #4
 8009908:	f020 0007 	bic.w	r0, r0, #7
 800990c:	1ac2      	subs	r2, r0, r3
 800990e:	bf1c      	itt	ne
 8009910:	1a1b      	subne	r3, r3, r0
 8009912:	50a3      	strne	r3, [r4, r2]
 8009914:	e7af      	b.n	8009876 <_malloc_r+0x22>
 8009916:	6862      	ldr	r2, [r4, #4]
 8009918:	42a3      	cmp	r3, r4
 800991a:	bf0c      	ite	eq
 800991c:	f8c8 2000 	streq.w	r2, [r8]
 8009920:	605a      	strne	r2, [r3, #4]
 8009922:	e7eb      	b.n	80098fc <_malloc_r+0xa8>
 8009924:	4623      	mov	r3, r4
 8009926:	6864      	ldr	r4, [r4, #4]
 8009928:	e7ae      	b.n	8009888 <_malloc_r+0x34>
 800992a:	463c      	mov	r4, r7
 800992c:	687f      	ldr	r7, [r7, #4]
 800992e:	e7b6      	b.n	800989e <_malloc_r+0x4a>
 8009930:	461a      	mov	r2, r3
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	42a3      	cmp	r3, r4
 8009936:	d1fb      	bne.n	8009930 <_malloc_r+0xdc>
 8009938:	2300      	movs	r3, #0
 800993a:	6053      	str	r3, [r2, #4]
 800993c:	e7de      	b.n	80098fc <_malloc_r+0xa8>
 800993e:	230c      	movs	r3, #12
 8009940:	6033      	str	r3, [r6, #0]
 8009942:	4630      	mov	r0, r6
 8009944:	f000 f80c 	bl	8009960 <__malloc_unlock>
 8009948:	e794      	b.n	8009874 <_malloc_r+0x20>
 800994a:	6005      	str	r5, [r0, #0]
 800994c:	e7d6      	b.n	80098fc <_malloc_r+0xa8>
 800994e:	bf00      	nop
 8009950:	200003c8 	.word	0x200003c8

08009954 <__malloc_lock>:
 8009954:	4801      	ldr	r0, [pc, #4]	@ (800995c <__malloc_lock+0x8>)
 8009956:	f000 b88f 	b.w	8009a78 <__retarget_lock_acquire_recursive>
 800995a:	bf00      	nop
 800995c:	20000508 	.word	0x20000508

08009960 <__malloc_unlock>:
 8009960:	4801      	ldr	r0, [pc, #4]	@ (8009968 <__malloc_unlock+0x8>)
 8009962:	f000 b88a 	b.w	8009a7a <__retarget_lock_release_recursive>
 8009966:	bf00      	nop
 8009968:	20000508 	.word	0x20000508

0800996c <memset>:
 800996c:	4402      	add	r2, r0
 800996e:	4603      	mov	r3, r0
 8009970:	4293      	cmp	r3, r2
 8009972:	d100      	bne.n	8009976 <memset+0xa>
 8009974:	4770      	bx	lr
 8009976:	f803 1b01 	strb.w	r1, [r3], #1
 800997a:	e7f9      	b.n	8009970 <memset+0x4>

0800997c <_raise_r>:
 800997c:	291f      	cmp	r1, #31
 800997e:	b538      	push	{r3, r4, r5, lr}
 8009980:	4605      	mov	r5, r0
 8009982:	460c      	mov	r4, r1
 8009984:	d904      	bls.n	8009990 <_raise_r+0x14>
 8009986:	2316      	movs	r3, #22
 8009988:	6003      	str	r3, [r0, #0]
 800998a:	f04f 30ff 	mov.w	r0, #4294967295
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009992:	b112      	cbz	r2, 800999a <_raise_r+0x1e>
 8009994:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009998:	b94b      	cbnz	r3, 80099ae <_raise_r+0x32>
 800999a:	4628      	mov	r0, r5
 800999c:	f000 f830 	bl	8009a00 <_getpid_r>
 80099a0:	4622      	mov	r2, r4
 80099a2:	4601      	mov	r1, r0
 80099a4:	4628      	mov	r0, r5
 80099a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099aa:	f000 b817 	b.w	80099dc <_kill_r>
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d00a      	beq.n	80099c8 <_raise_r+0x4c>
 80099b2:	1c59      	adds	r1, r3, #1
 80099b4:	d103      	bne.n	80099be <_raise_r+0x42>
 80099b6:	2316      	movs	r3, #22
 80099b8:	6003      	str	r3, [r0, #0]
 80099ba:	2001      	movs	r0, #1
 80099bc:	e7e7      	b.n	800998e <_raise_r+0x12>
 80099be:	2100      	movs	r1, #0
 80099c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099c4:	4620      	mov	r0, r4
 80099c6:	4798      	blx	r3
 80099c8:	2000      	movs	r0, #0
 80099ca:	e7e0      	b.n	800998e <_raise_r+0x12>

080099cc <raise>:
 80099cc:	4b02      	ldr	r3, [pc, #8]	@ (80099d8 <raise+0xc>)
 80099ce:	4601      	mov	r1, r0
 80099d0:	6818      	ldr	r0, [r3, #0]
 80099d2:	f7ff bfd3 	b.w	800997c <_raise_r>
 80099d6:	bf00      	nop
 80099d8:	2000000c 	.word	0x2000000c

080099dc <_kill_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4d07      	ldr	r5, [pc, #28]	@ (80099fc <_kill_r+0x20>)
 80099e0:	2300      	movs	r3, #0
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	602b      	str	r3, [r5, #0]
 80099ea:	f7f8 f833 	bl	8001a54 <_kill>
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	d102      	bne.n	80099f8 <_kill_r+0x1c>
 80099f2:	682b      	ldr	r3, [r5, #0]
 80099f4:	b103      	cbz	r3, 80099f8 <_kill_r+0x1c>
 80099f6:	6023      	str	r3, [r4, #0]
 80099f8:	bd38      	pop	{r3, r4, r5, pc}
 80099fa:	bf00      	nop
 80099fc:	20000504 	.word	0x20000504

08009a00 <_getpid_r>:
 8009a00:	f7f8 b820 	b.w	8001a44 <_getpid>

08009a04 <_sbrk_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d06      	ldr	r5, [pc, #24]	@ (8009a20 <_sbrk_r+0x1c>)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	602b      	str	r3, [r5, #0]
 8009a10:	f7f8 f83c 	bl	8001a8c <_sbrk>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_sbrk_r+0x1a>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_sbrk_r+0x1a>
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	20000504 	.word	0x20000504

08009a24 <__errno>:
 8009a24:	4b01      	ldr	r3, [pc, #4]	@ (8009a2c <__errno+0x8>)
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	2000000c 	.word	0x2000000c

08009a30 <__libc_init_array>:
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	4d0d      	ldr	r5, [pc, #52]	@ (8009a68 <__libc_init_array+0x38>)
 8009a34:	4c0d      	ldr	r4, [pc, #52]	@ (8009a6c <__libc_init_array+0x3c>)
 8009a36:	1b64      	subs	r4, r4, r5
 8009a38:	10a4      	asrs	r4, r4, #2
 8009a3a:	2600      	movs	r6, #0
 8009a3c:	42a6      	cmp	r6, r4
 8009a3e:	d109      	bne.n	8009a54 <__libc_init_array+0x24>
 8009a40:	4d0b      	ldr	r5, [pc, #44]	@ (8009a70 <__libc_init_array+0x40>)
 8009a42:	4c0c      	ldr	r4, [pc, #48]	@ (8009a74 <__libc_init_array+0x44>)
 8009a44:	f000 f864 	bl	8009b10 <_init>
 8009a48:	1b64      	subs	r4, r4, r5
 8009a4a:	10a4      	asrs	r4, r4, #2
 8009a4c:	2600      	movs	r6, #0
 8009a4e:	42a6      	cmp	r6, r4
 8009a50:	d105      	bne.n	8009a5e <__libc_init_array+0x2e>
 8009a52:	bd70      	pop	{r4, r5, r6, pc}
 8009a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a58:	4798      	blx	r3
 8009a5a:	3601      	adds	r6, #1
 8009a5c:	e7ee      	b.n	8009a3c <__libc_init_array+0xc>
 8009a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a62:	4798      	blx	r3
 8009a64:	3601      	adds	r6, #1
 8009a66:	e7f2      	b.n	8009a4e <__libc_init_array+0x1e>
 8009a68:	08009b50 	.word	0x08009b50
 8009a6c:	08009b50 	.word	0x08009b50
 8009a70:	08009b50 	.word	0x08009b50
 8009a74:	08009b58 	.word	0x08009b58

08009a78 <__retarget_lock_acquire_recursive>:
 8009a78:	4770      	bx	lr

08009a7a <__retarget_lock_release_recursive>:
 8009a7a:	4770      	bx	lr

08009a7c <_free_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4605      	mov	r5, r0
 8009a80:	2900      	cmp	r1, #0
 8009a82:	d041      	beq.n	8009b08 <_free_r+0x8c>
 8009a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a88:	1f0c      	subs	r4, r1, #4
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	bfb8      	it	lt
 8009a8e:	18e4      	addlt	r4, r4, r3
 8009a90:	f7ff ff60 	bl	8009954 <__malloc_lock>
 8009a94:	4a1d      	ldr	r2, [pc, #116]	@ (8009b0c <_free_r+0x90>)
 8009a96:	6813      	ldr	r3, [r2, #0]
 8009a98:	b933      	cbnz	r3, 8009aa8 <_free_r+0x2c>
 8009a9a:	6063      	str	r3, [r4, #4]
 8009a9c:	6014      	str	r4, [r2, #0]
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aa4:	f7ff bf5c 	b.w	8009960 <__malloc_unlock>
 8009aa8:	42a3      	cmp	r3, r4
 8009aaa:	d908      	bls.n	8009abe <_free_r+0x42>
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	1821      	adds	r1, r4, r0
 8009ab0:	428b      	cmp	r3, r1
 8009ab2:	bf01      	itttt	eq
 8009ab4:	6819      	ldreq	r1, [r3, #0]
 8009ab6:	685b      	ldreq	r3, [r3, #4]
 8009ab8:	1809      	addeq	r1, r1, r0
 8009aba:	6021      	streq	r1, [r4, #0]
 8009abc:	e7ed      	b.n	8009a9a <_free_r+0x1e>
 8009abe:	461a      	mov	r2, r3
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	b10b      	cbz	r3, 8009ac8 <_free_r+0x4c>
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	d9fa      	bls.n	8009abe <_free_r+0x42>
 8009ac8:	6811      	ldr	r1, [r2, #0]
 8009aca:	1850      	adds	r0, r2, r1
 8009acc:	42a0      	cmp	r0, r4
 8009ace:	d10b      	bne.n	8009ae8 <_free_r+0x6c>
 8009ad0:	6820      	ldr	r0, [r4, #0]
 8009ad2:	4401      	add	r1, r0
 8009ad4:	1850      	adds	r0, r2, r1
 8009ad6:	4283      	cmp	r3, r0
 8009ad8:	6011      	str	r1, [r2, #0]
 8009ada:	d1e0      	bne.n	8009a9e <_free_r+0x22>
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	6053      	str	r3, [r2, #4]
 8009ae2:	4408      	add	r0, r1
 8009ae4:	6010      	str	r0, [r2, #0]
 8009ae6:	e7da      	b.n	8009a9e <_free_r+0x22>
 8009ae8:	d902      	bls.n	8009af0 <_free_r+0x74>
 8009aea:	230c      	movs	r3, #12
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	e7d6      	b.n	8009a9e <_free_r+0x22>
 8009af0:	6820      	ldr	r0, [r4, #0]
 8009af2:	1821      	adds	r1, r4, r0
 8009af4:	428b      	cmp	r3, r1
 8009af6:	bf04      	itt	eq
 8009af8:	6819      	ldreq	r1, [r3, #0]
 8009afa:	685b      	ldreq	r3, [r3, #4]
 8009afc:	6063      	str	r3, [r4, #4]
 8009afe:	bf04      	itt	eq
 8009b00:	1809      	addeq	r1, r1, r0
 8009b02:	6021      	streq	r1, [r4, #0]
 8009b04:	6054      	str	r4, [r2, #4]
 8009b06:	e7ca      	b.n	8009a9e <_free_r+0x22>
 8009b08:	bd38      	pop	{r3, r4, r5, pc}
 8009b0a:	bf00      	nop
 8009b0c:	200003c8 	.word	0x200003c8

08009b10 <_init>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	bf00      	nop
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr

08009b1c <_fini>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	bf00      	nop
 8009b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b22:	bc08      	pop	{r3}
 8009b24:	469e      	mov	lr, r3
 8009b26:	4770      	bx	lr
