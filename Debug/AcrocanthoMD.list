
AcrocanthoMD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d268  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800d440  0800d440  0000e440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d460  0800d460  0000f06c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d460  0800d460  0000f06c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d460  0800d460  0000f06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0800d460  0800d460  0000e460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000001c  0800d480  0800d480  0000e480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800d49c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  2000006c  0800d508  0000f06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  0800d508  0000f7ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000497e7  00000000  00000000  0000f09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000080c1  00000000  00000000  00058883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002580  00000000  00000000  00060948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c9d  00000000  00000000  00062ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030590  00000000  00000000  00064b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029038  00000000  00000000  000950f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012cfdc  00000000  00000000  000be12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001eb109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9e8  00000000  00000000  001eb14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001f5b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000006c 	.word	0x2000006c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d428 	.word	0x0800d428

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000070 	.word	0x20000070
 8000214:	0800d428 	.word	0x0800d428

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <_ZN3Ang7raw2radEt>:

  void elecAngVel();

  void mechAngleVelLPF();
  
  float raw2rad(uint16_t raw){
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f;
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a6a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000a8c <_ZN3Ang7raw2radEt+0x38>
 8000a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a72:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000a90 <_ZN3Ang7raw2radEt+0x3c>
 8000a76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a7a:	eef0 7a66 	vmov.f32	s15, s13
  }
 8000a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40c90fdb 	.word	0x40c90fdb
 8000a90:	45800000 	.word	0x45800000
 8000a94:	00000000 	.word	0x00000000

08000a98 <_ZN3Ang8raw2radsEs>:
  
  float raw2rads(int16_t raw){
 8000a98:	b5b0      	push	{r4, r5, r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	807b      	strh	r3, [r7, #2]
    return static_cast<float>(raw) * user2pi / 4096.0f / (TASK_TIME * static_cast<float>(compTime));
 8000aa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000b20 <_ZN3Ang8raw2radsEs+0x88>
 8000ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ab8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000b24 <_ZN3Ang8raw2radsEs+0x8c>
 8000abc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ac0:	ee16 0a90 	vmov	r0, s13
 8000ac4:	f7ff fd0c 	bl	80004e0 <__aeabi_f2d>
 8000ac8:	4604      	mov	r4, r0
 8000aca:	460d      	mov	r5, r1
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7b9b      	ldrb	r3, [r3, #14]
 8000ad0:	ee07 3a90 	vmov	s15, r3
 8000ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad8:	ee17 0a90 	vmov	r0, s15
 8000adc:	f7ff fd00 	bl	80004e0 <__aeabi_f2d>
 8000ae0:	a30d      	add	r3, pc, #52	@ (adr r3, 8000b18 <_ZN3Ang8raw2radsEs+0x80>)
 8000ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae6:	f7ff fd53 	bl	8000590 <__aeabi_dmul>
 8000aea:	4602      	mov	r2, r0
 8000aec:	460b      	mov	r3, r1
 8000aee:	4620      	mov	r0, r4
 8000af0:	4629      	mov	r1, r5
 8000af2:	f7ff fe77 	bl	80007e4 <__aeabi_ddiv>
 8000af6:	4602      	mov	r2, r0
 8000af8:	460b      	mov	r3, r1
 8000afa:	4610      	mov	r0, r2
 8000afc:	4619      	mov	r1, r3
 8000afe:	f7ff ff59 	bl	80009b4 <__aeabi_d2f>
 8000b02:	4603      	mov	r3, r0
 8000b04:	ee07 3a90 	vmov	s15, r3
  }
 8000b08:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bdb0      	pop	{r4, r5, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	f3af 8000 	nop.w
 8000b18:	be86607f 	.word	0xbe86607f
 8000b1c:	3f1a35b3 	.word	0x3f1a35b3
 8000b20:	40c90fdb 	.word	0x40c90fdb
 8000b24:	45800000 	.word	0x45800000

08000b28 <_ZN6CanCom7getDataEv>:
  void rxFifo0Callback(uint32_t RxFifo0ITs);
  void handleRxData();
  void rxTask();
  void txTask();

  CanData* getData() { return data.get(); }
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fafb 	bl	800112e <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <_ZN3AngC1ER19__I2C_HandleTypeDef>:
#include "can_communication.h"

extern Ang ang;
extern CanCom cancom;

Ang::Ang(I2C_HandleTypeDef& i2cHandle)
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fb23 	bl	800119c <_ZSt11make_uniqueIN3Ang7AngDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <_ZN3AngC1ER19__I2C_HandleTypeDef+0x6c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	731a      	strb	r2, [r3, #12]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	735a      	strb	r2, [r3, #13]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	739a      	strb	r2, [r3, #14]
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	82da      	strh	r2, [r3, #22]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	831a      	strh	r2, [r3, #24]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
  : hi2c1(i2cHandle), readStart(false), actAngle(0.0f), i2c_rx_complete(false), i2c_tx_complete(false),
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    rawAng(0), rawAngPast(0), diffRaw(0), data(std::make_unique<AngData>()) {}
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	42480000 	.word	0x42480000

08000bb4 <_ZN3Ang4readEv>:

void Ang::read() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if (!readStart) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7b1b      	ldrb	r3, [r3, #12]
 8000bc0:	f083 0301 	eor.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00c      	beq.n	8000be4 <_ZN3Ang4readEv+0x30>
    uint8_t readRegAddr = 0x0C;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit_DMA(&hi2c1, AS5600ADDR, &readRegAddr, 1);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6898      	ldr	r0, [r3, #8]
 8000bd2:	f107 020f 	add.w	r2, r7, #15
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	216c      	movs	r1, #108	@ 0x6c
 8000bda:	f008 fa8d 	bl	80090f8 <HAL_I2C_Master_Transmit_DMA>
    readStart = true;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	731a      	strb	r2, [r3, #12]
  }
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZN3Ang7receiveEv>:

void Ang::receive() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if (i2c_tx_complete) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00c      	beq.n	8000c24 <_ZN3Ang7receiveEv+0x38>
    HAL_I2C_Master_Receive_DMA(&hi2c1, AS5600ADDR, rawEnc, 2);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6898      	ldr	r0, [r3, #8]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f103 0214 	add.w	r2, r3, #20
 8000c14:	2302      	movs	r3, #2
 8000c16:	216c      	movs	r1, #108	@ 0x6c
 8000c18:	f008 fb82 	bl	8009320 <HAL_I2C_Master_Receive_DMA>
    i2c_tx_complete = false;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  }
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_ZN3Ang8getAngleEv>:

void Ang::getAngle() {
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  read();
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffbd 	bl	8000bb4 <_ZN3Ang4readEv>
  receive();
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffd6 	bl	8000bec <_ZN3Ang7receiveEv>

  if (i2c_rx_complete) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	bf14      	ite	ne
 8000c4c:	2301      	movne	r3, #1
 8000c4e:	2300      	moveq	r3, #0
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d033      	beq.n	8000cbe <_ZN3Ang8getAngleEv+0x92>
    rawAngPast = rawAng;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	8ada      	ldrh	r2, [r3, #22]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	831a      	strh	r2, [r3, #24]
    rawAng = static_cast<uint16_t>(rawEnc[0] << 8) | rawEnc[1];
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7d1b      	ldrb	r3, [r3, #20]
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	7d52      	ldrb	r2, [r2, #21]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	82da      	strh	r2, [r3, #22]
    mechAngPast = data->mechAng;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 faab 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	61da      	str	r2, [r3, #28]
    data->mechAng = raw2rad(rawAng);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	8add      	ldrh	r5, [r3, #22]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 faa1 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4629      	mov	r1, r5
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fede 	bl	8000a54 <_ZN3Ang7raw2radEt>
 8000c98:	eef0 7a40 	vmov.f32	s15, s0
 8000c9c:	edc4 7a02 	vstr	s15, [r4, #8]
    
    readStart = false;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	731a      	strb	r2, [r3, #12]
    i2c_rx_complete = false;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    // 速度時間割りのためのカウンタ保存
    compTime = comp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7b5a      	ldrb	r2, [r3, #13]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	739a      	strb	r2, [r3, #14]
    comp = 0;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	735a      	strb	r2, [r3, #13]

  } else ++comp;

}
 8000cbc:	e005      	b.n	8000cca <_ZN3Ang8getAngleEv+0x9e>
  } else ++comp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7b5b      	ldrb	r3, [r3, #13]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	735a      	strb	r2, [r3, #13]
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bdb0      	pop	{r4, r5, r7, pc}

08000cd2 <_ZN3Ang6getVelEv>:

void Ang::getVel() {
 8000cd2:	b5b0      	push	{r4, r5, r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  if (comp) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7b5b      	ldrb	r3, [r3, #13]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d13c      	bne.n	8000d5c <_ZN3Ang6getVelEv+0x8a>
    // 更新なしのため速度更新不要
  } else {
    // 速度計算
    diff = static_cast<int16_t>(rawAng - rawAngPast);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	8ada      	ldrh	r2, [r3, #22]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	8b1b      	ldrh	r3, [r3, #24]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	841a      	strh	r2, [r3, #32]

    if (diff > ANG_RESL_12BIT / 2) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000cfe:	db0a      	blt.n	8000d16 <_ZN3Ang6getVelEv+0x44>
      diff -= ANG_RESL_12BIT;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	841a      	strh	r2, [r3, #32]
 8000d14:	e00f      	b.n	8000d36 <_ZN3Ang6getVelEv+0x64>
    } else if (diff < -ANG_RESL_12BIT / 2) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d1c:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000d20:	dc09      	bgt.n	8000d36 <_ZN3Ang6getVelEv+0x64>
      diff += ANG_RESL_12BIT;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	841a      	strh	r2, [r3, #32]
    }
    
    data->actVel = raw2rads(diff);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f9b3 5020 	ldrsh.w	r5, [r3, #32]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fa46 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000d44:	4604      	mov	r4, r0
 8000d46:	4629      	mov	r1, r5
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fea5 	bl	8000a98 <_ZN3Ang8raw2radsEs>
 8000d4e:	eef0 7a40 	vmov.f32	s15, s0
 8000d52:	edc4 7a04 	vstr	s15, [r4, #16]
    mechAngleVelLPF();
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f80e 	bl	8000d78 <_ZN3Ang15mechAngleVelLPFEv>
  }
  data->veltemp = diff;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fa36 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000d64:	4602      	mov	r2, r0
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000d6c:	8313      	strh	r3, [r2, #24]
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d78 <_ZN3Ang15mechAngleVelLPFEv>:

void Ang::mechAngleVelLPF(){
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	ed2d 8b02 	vpush	{d8}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  float timeConst, alpha;
  
  timeConst = 1.0f / (user2pi * lpfFreq);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d8a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000e40 <_ZN3Ang15mechAngleVelLPFEv+0xc8>
 8000d8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d9a:	edc7 7a03 	vstr	s15, [r7, #12]
  alpha = (TASK_TIME * static_cast<float>(compTime)) / timeConst;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7b9b      	ldrb	r3, [r3, #14]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000daa:	ee17 0a90 	vmov	r0, s15
 8000dae:	f7ff fb97 	bl	80004e0 <__aeabi_f2d>
 8000db2:	a321      	add	r3, pc, #132	@ (adr r3, 8000e38 <_ZN3Ang15mechAngleVelLPFEv+0xc0>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fbea 	bl	8000590 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4614      	mov	r4, r2
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fb8b 	bl	80004e0 <__aeabi_f2d>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4620      	mov	r0, r4
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	f7ff fd07 	bl	80007e4 <__aeabi_ddiv>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fde9 	bl	80009b4 <__aeabi_d2f>
 8000de2:	4603      	mov	r3, r0
 8000de4:	60bb      	str	r3, [r7, #8]
  data->actVelLPF = alpha * data->actVel + (1.0f - alpha) * data->actVelLPF;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f9f1 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000dee:	4603      	mov	r3, r0
 8000df0:	ed93 7a04 	vldr	s14, [r3, #16]
 8000df4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000df8:	ee67 8a27 	vmul.f32	s17, s14, s15
 8000dfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e04:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f9e0 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000e10:	4603      	mov	r3, r0
 8000e12:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e16:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f9d7 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8000e22:	4603      	mov	r3, r0
 8000e24:	ee78 7a88 	vadd.f32	s15, s17, s16
 8000e28:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	ecbd 8b02 	vpop	{d8}
 8000e36:	bdb0      	pop	{r4, r5, r7, pc}
 8000e38:	be86607f 	.word	0xbe86607f
 8000e3c:	3f1a35b3 	.word	0x3f1a35b3
 8000e40:	40c90fdb 	.word	0x40c90fdb

08000e44 <_ZN3Ang7elecAngEf>:

float Ang::elecAng(float _eofs) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	ed87 0a00 	vstr	s0, [r7]
  // comp = 0のときサンプル値更新あり
  // 次の更新まで2周期を補間するので3で割った値を足す
  if (comp == 0) rawElecComp = rawAng;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7b5b      	ldrb	r3, [r3, #13]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d104      	bne.n	8000e62 <_ZN3Ang7elecAngEf+0x1e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	8ada      	ldrh	r2, [r3, #22]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8000e60:	e00f      	b.n	8000e82 <_ZN3Ang7elecAngEf+0x3e>
  else rawElecComp = rawAng + (diff / 3);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	8ada      	ldrh	r2, [r3, #22]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000e6c:	4928      	ldr	r1, [pc, #160]	@ (8000f10 <_ZN3Ang7elecAngEf+0xcc>)
 8000e6e:	fb81 0103 	smull	r0, r1, r1, r3
 8000e72:	17db      	asrs	r3, r3, #31
 8000e74:	1acb      	subs	r3, r1, r3
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	859a      	strh	r2, [r3, #44]	@ 0x2c
  
  // 電気角反転
  static uint16_t elecAngtemp_ = 0;
  if (elecAngDir > 0) {
    elecAngtemp_ = rawElecComp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8000e86:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <_ZN3Ang7elecAngEf+0xd0>)
 8000e88:	801a      	strh	r2, [r3, #0]

  // CWとCCWを切替
  static float ofs_ = 0.0f;
  if (rotDir > 0) {
    ofs_ = _eofs + user2pi;
  }else ofs_ = _eofs; // 極性反転不要
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <_ZN3Ang7elecAngEf+0xd4>)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	6013      	str	r3, [r2, #0]

  static uint16_t offset_ = 0;
  static uint16_t elecAngtemp2_ = 0;
  
  offset_ = static_cast<uint16_t>(ofs_ * static_cast<float>(ANG_RESL_12BIT) / user2pi);
 8000e90:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <_ZN3Ang7elecAngEf+0xd4>)
 8000e92:	edd3 7a00 	vldr	s15, [r3]
 8000e96:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000f1c <_ZN3Ang7elecAngEf+0xd8>
 8000e9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e9e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000f20 <_ZN3Ang7elecAngEf+0xdc>
 8000ea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eaa:	ee17 3a90 	vmov	r3, s15
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <_ZN3Ang7elecAngEf+0xe0>)
 8000eb2:	801a      	strh	r2, [r3, #0]
  elecAngtemp2_ = (elecAngtemp_ * polePairs + offset_) % ANG_RESL_12BIT;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <_ZN3Ang7elecAngEf+0xd0>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <_ZN3Ang7elecAngEf+0xe0>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	441a      	add	r2, r3
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <_ZN3Ang7elecAngEf+0xe4>)
 8000ecc:	fb83 1302 	smull	r1, r3, r3, r2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	12d9      	asrs	r1, r3, #11
 8000ed4:	17d3      	asrs	r3, r2, #31
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	031b      	lsls	r3, r3, #12
 8000edc:	1a5b      	subs	r3, r3, r1
 8000ede:	1ad1      	subs	r1, r2, r3
 8000ee0:	b28a      	uxth	r2, r1
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <_ZN3Ang7elecAngEf+0xe8>)
 8000ee4:	801a      	strh	r2, [r3, #0]

  return static_cast<float>(elecAngtemp2_) / static_cast<float>(ANG_RESL_12BIT) * user2pi;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <_ZN3Ang7elecAngEf+0xe8>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000f1c <_ZN3Ang7elecAngEf+0xd8>
 8000ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000efa:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000f20 <_ZN3Ang7elecAngEf+0xdc>
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14

}
 8000f02:	eeb0 0a67 	vmov.f32	s0, s15
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	55555556 	.word	0x55555556
 8000f14:	20000088 	.word	0x20000088
 8000f18:	2000008c 	.word	0x2000008c
 8000f1c:	457ff000 	.word	0x457ff000
 8000f20:	40c90fdb 	.word	0x40c90fdb
 8000f24:	20000090 	.word	0x20000090
 8000f28:	80080081 	.word	0x80080081
 8000f2c:	20000092 	.word	0x20000092

08000f30 <_ZN3Ang14elecAngVirtualEf>:

float Ang::elecAngVirtual(float _virFreqRef) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	ed87 0a00 	vstr	s0, [r7]
  // 仮想電気角
  static float _theta = 0.0f;
  // タスク周期で分割して足しこむ
  float _deltatheta = _virFreqRef * TASK_TIME;
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f7ff facf 	bl	80004e0 <__aeabi_f2d>
 8000f42:	a327      	add	r3, pc, #156	@ (adr r3, 8000fe0 <_ZN3Ang14elecAngVirtualEf+0xb0>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb22 	bl	8000590 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fd2e 	bl	80009b4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]
  _theta += _deltatheta;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f5e:	ed93 7a00 	vldr	s14, [r3]
 8000f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]

  // 0~1の範囲に収める
  if (_theta > 1.0f) _theta -= 1.0f;
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	dd09      	ble.n	8000f98 <_ZN3Ang14elecAngVirtualEf+0x68>
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
  if (_theta < 0.0f) _theta += 1.0f;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	d509      	bpl.n	8000fbc <_ZN3Ang14elecAngVirtualEf+0x8c>
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]

  // ラジアンで返却
  return _theta * user2pi;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <_ZN3Ang14elecAngVirtualEf+0xa8>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000fdc <_ZN3Ang14elecAngVirtualEf+0xac>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fca:	eeb0 0a67 	vmov.f32	s0, s15
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	20000094 	.word	0x20000094
 8000fdc:	40c90fdb 	.word	0x40c90fdb
 8000fe0:	be86607f 	.word	0xbe86607f
 8000fe4:	3f1a35b3 	.word	0x3f1a35b3

08000fe8 <_ZN3Ang11elecAngleInEv>:

void Ang::elecAngleIn(){
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	ed2d 8b02 	vpush	{d8}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 8000ff4:	481f      	ldr	r0, [pc, #124]	@ (8001074 <_ZN3Ang11elecAngleInEv+0x8c>)
 8000ff6:	f7ff fd97 	bl	8000b28 <_ZN6CanCom7getDataEv>
 8000ffa:	60f8      	str	r0, [r7, #12]
  
  data->elecAngTest = elecAng(EOFS);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f8e6 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001004:	4604      	mov	r4, r0
 8001006:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001078 <_ZN3Ang11elecAngleInEv+0x90>
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff1a 	bl	8000e44 <_ZN3Ang7elecAngEf>
 8001010:	eef0 7a40 	vmov.f32	s15, s0
 8001014:	edc4 7a07 	vstr	s15, [r4, #28]
  if (candata->virAngFreq > 0.0f) {
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	edd3 7a03 	vldr	s15, [r3, #12]
 800101e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	dd11      	ble.n	800104c <_ZN3Ang11elecAngleInEv+0x64>
    data->elecAng = elecAngVirtual(candata->virAngFreq);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	ed93 8a03 	vldr	s16, [r3, #12]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f8cd 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001036:	4604      	mov	r4, r0
 8001038:	eeb0 0a48 	vmov.f32	s0, s16
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff77 	bl	8000f30 <_ZN3Ang14elecAngVirtualEf>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	edc4 7a00 	vstr	s15, [r4]
  } else {
    data->elecAng = elecAng(EOFS);
  }
}
 800104a:	e00d      	b.n	8001068 <_ZN3Ang11elecAngleInEv+0x80>
    data->elecAng = elecAng(EOFS);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f8be 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001054:	4604      	mov	r4, r0
 8001056:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001078 <_ZN3Ang11elecAngleInEv+0x90>
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fef2 	bl	8000e44 <_ZN3Ang7elecAngEf>
 8001060:	eef0 7a40 	vmov.f32	s15, s0
 8001064:	edc4 7a00 	vstr	s15, [r4]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	ecbd 8b02 	vpop	{d8}
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	2000056c 	.word	0x2000056c
 8001078:	40425c14 	.word	0x40425c14

0800107c <_ZNK3Ang14prepareCanDataEPhj>:

int16_t Ang::compAng() {
  return 0;
}

void Ang::prepareCanData(uint8_t* buffer, size_t bufferSize) const {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  memcpy(buffer, &(data->elecAng), sizeof(data->elecAng));
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f8a0 	bl	80011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>
 8001090:	4603      	mov	r3, r0
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	601a      	str	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ZN3Ang19i2cMasterTxCallbackEv>:

void Ang::i2cMasterTxCallback() {
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  i2c_tx_complete = true;    
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZN3Ang19i2cMasterRxCallbackEv>:

void Ang::i2cMasterRxCallback() {
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  i2c_rx_complete = true;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  ang.i2cMasterTxCallback();
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <HAL_I2C_MasterTxCpltCallback+0x18>)
 80010e6:	f7ff ffdc 	bl	80010a2 <_ZN3Ang19i2cMasterTxCallbackEv>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200005d4 	.word	0x200005d4

080010f8 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  ang.i2cMasterRxCallback();
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8001102:	f7ff ffdc 	bl	80010be <_ZN3Ang19i2cMasterRxCallbackEv>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200005d4 	.word	0x200005d4

08001114 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f862 	bl	80011e8 <_ZNKSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001124:	4603      	mov	r3, r0
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f863 	bl	8001204 <_ZNKSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 800113e:	4603      	mov	r3, r0
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_ZN3Ang7AngDataC1Ev>:
  struct AngData{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	831a      	strh	r2, [r3, #24]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_ZSt11make_uniqueIN3Ang7AngDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80011a4:	2020      	movs	r0, #32
 80011a6:	f00b ff8b 	bl	800d0c0 <_Znwj>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461c      	mov	r4, r3
 80011ae:	4620      	mov	r0, r4
 80011b0:	2320      	movs	r3, #32
 80011b2:	461a      	mov	r2, r3
 80011b4:	2100      	movs	r1, #0
 80011b6:	f00c f865 	bl	800d284 <memset>
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff ffc4 	bl	8001148 <_ZN3Ang7AngDataC1Ev>
 80011c0:	4621      	mov	r1, r4
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f83c 	bl	8001240 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}

080011d0 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	return get();
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff9b 	bl	8001114 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>
 80011de:	4603      	mov	r3, r0
      }
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZNKSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f840 	bl	8001278 <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80011f8:	4603      	mov	r3, r0
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <_ZNKSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>:
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f83f 	bl	8001292 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8001214:	4603      	mov	r3, r0
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNSt15__uniq_ptr_dataIN3Ang7AngDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f83b 	bl	80012ac <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EEC1EPS1_>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffe6 	bl	8001220 <_ZNSt15__uniq_ptr_dataIN3Ang7AngDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f833 	bl	80012d4 <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800126e:	4603      	mov	r3, r0
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f833 	bl	80012ee <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001288:	4603      	mov	r3, r0
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f832 	bl	8001306 <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f830 	bl	800131e <_ZNSt5tupleIJPN3Ang7AngDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffcd 	bl	800125e <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_ZSt3getILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f82a 	bl	8001338 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f82a 	bl	8001350 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f82b 	bl	800136a <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 8001314:	4603      	mov	r3, r0
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_ZNSt5tupleIJPN3Ang7AngDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f82b 	bl	8001384 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEEC1Ev>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_ZSt12__get_helperILj0EPN3Ang7AngDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f82f 	bl	80013a4 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8001346:	4603      	mov	r3, r0
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f82f 	bl	80013be <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERKS3_>
 8001360:	4603      	mov	r3, r0
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f82d 	bl	80013d4 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERKS3_>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f82c 	bl	80013ea <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEEC1Ev>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f834 	bl	8001402 <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EEC1Ev>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_ZNSt11_Tuple_implILj0EJPN3Ang7AngDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f835 	bl	800141e <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERS3_>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERKS3_>:
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEEC1Ev>:
      _Tuple_impl()
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f81e 	bl	8001434 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EEC1Ev>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EEC1Ev>:
      constexpr _Head_base()
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_ZNSt10_Head_baseILj0EPN3Ang7AngDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_ZN6CanComC1ER19FDCAN_HandleTypeDef>:

// グローバルなインスタンスを使用
extern CanCom cancom;
extern Ang ang;

CanCom::CanCom(FDCAN_HandleTypeDef& fdcanHandle)
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
    data(std::make_unique<CanData>()) {}
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f9a8 	bl	80017ac <_ZSt11make_uniqueIN6CanCom7CanDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
  : hfdcan(fdcanHandle), canRxInterrupt(0), prevGenFuncRef(0), canTxFlag(0),
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
    data(std::make_unique<CanData>()) {}
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZN6CanCom12initTxHeaderEmbb>:

void CanCom::initTxHeader(uint32_t canId, bool extendedId, bool fdFormat) {
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	460b      	mov	r3, r1
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	4613      	mov	r3, r2
 8001498:	71bb      	strb	r3, [r7, #6]
  txHeader.Identifier = canId;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	609a      	str	r2, [r3, #8]
  txHeader.IdType = extendedId ? FDCAN_EXTENDED_ID : FDCAN_STANDARD_ID;
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <_ZN6CanCom12initTxHeaderEmbb+0x28>
 80014a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014aa:	e000      	b.n	80014ae <_ZN6CanCom12initTxHeaderEmbb+0x2a>
 80014ac:	2200      	movs	r2, #0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	60da      	str	r2, [r3, #12]
  txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  txHeader.DataLength = FDCAN_DLC_BYTES_8;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2208      	movs	r2, #8
 80014bc:	615a      	str	r2, [r3, #20]
  txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  txHeader.BitRateSwitch = fdFormat ? FDCAN_BRS_ON : FDCAN_BRS_OFF;
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <_ZN6CanCom12initTxHeaderEmbb+0x4c>
 80014ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014ce:	e000      	b.n	80014d2 <_ZN6CanCom12initTxHeaderEmbb+0x4e>
 80014d0:	2200      	movs	r2, #0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	61da      	str	r2, [r3, #28]
  txHeader.FDFormat = fdFormat ? FDCAN_FD_CAN : FDCAN_CLASSIC_CAN;
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <_ZN6CanCom12initTxHeaderEmbb+0x5e>
 80014dc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014e0:	e000      	b.n	80014e4 <_ZN6CanCom12initTxHeaderEmbb+0x60>
 80014e2:	2200      	movs	r2, #0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	621a      	str	r2, [r3, #32]
  txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24
  txHeader.MessageMarker = 0;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_ZN6CanCom8sendDataEPKhj>:

void CanCom::sendData(const uint8_t* data, size_t size) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  if (size > 8) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b08      	cmp	r3, #8
 8001510:	d902      	bls.n	8001518 <_ZN6CanCom8sendDataEPKhj+0x18>
  // CANデータ長の上限は8バイト（クラシックCANの場合）
    Error_Handler();
 8001512:	f001 fdad 	bl	8003070 <Error_Handler>
 8001516:	e02a      	b.n	800156e <_ZN6CanCom8sendDataEPKhj+0x6e>
    return;
  }

  uint8_t txData[8] = {0};
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  for (size_t i = 0; i < size; ++i) {
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	e00c      	b.n	8001540 <_ZN6CanCom8sendDataEPKhj+0x40>
    txData[i] = data[i];
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	7819      	ldrb	r1, [r3, #0]
 800152e:	f107 0214 	add.w	r2, r7, #20
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	460a      	mov	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < size; ++i) {
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3ee      	bcc.n	8001526 <_ZN6CanCom8sendDataEPKhj+0x26>
  }

  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &txHeader, txData) != HAL_OK) {
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6858      	ldr	r0, [r3, #4]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	3308      	adds	r3, #8
 8001550:	f107 0214 	add.w	r2, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	f006 fecf 	bl	80082f8 <HAL_FDCAN_AddMessageToTxFifoQ>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf14      	ite	ne
 8001560:	2301      	movne	r3, #1
 8001562:	2300      	moveq	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <_ZN6CanCom8sendDataEPKhj+0x6e>
    Error_Handler();
 800156a:	f001 fd81 	bl	8003070 <Error_Handler>
  }
}
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_ZN6CanCom15rxFifo0CallbackEm>:

void CanCom::rxFifo0Callback(uint32_t RxFifo0ITs) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d028      	beq.n	80015da <_ZN6CanCom15rxFifo0CallbackEm+0x66>
    if (HAL_FDCAN_GetRxMessage(&hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6858      	ldr	r0, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	335c      	adds	r3, #92	@ 0x5c
 8001596:	2140      	movs	r1, #64	@ 0x40
 8001598:	f006 fef2 	bl	8008380 <HAL_FDCAN_GetRxMessage>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <_ZN6CanCom15rxFifo0CallbackEm+0x3c>
      Error_Handler();
 80015ac:	f001 fd60 	bl	8003070 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f006 ffe9 	bl	8008590 <HAL_FDCAN_ActivateNotification>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <_ZN6CanCom15rxFifo0CallbackEm+0x5e>
      Error_Handler();
 80015ce:	f001 fd4f 	bl	8003070 <Error_Handler>
    }

    canRxInterrupt = true;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

  }
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_ZN6CanCom12handleRxDataEv>:

void CanCom::handleRxData() {
 80015e2:	b590      	push	{r4, r7, lr}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  if (canRxInterrupt == true) {
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d043      	beq.n	8001688 <_ZN6CanCom12handleRxDataEv+0xa6>
    data->genFuncRef = rxData[0];
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f8ec 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001608:	4602      	mov	r2, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001610:	7013      	strb	r3, [r2, #0]
    data->drvMdRef = rxData[1];
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f8e3 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 800161a:	4602      	mov	r2, r0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001622:	7053      	strb	r3, [r2, #1]
    data->voltDRef = static_cast<float>(rxData[2]);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 405e 	ldrb.w	r4, [r3, #94]	@ 0x5e
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f8d7 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001632:	4603      	mov	r3, r0
 8001634:	ee07 4a90 	vmov	s15, r4
 8001638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800163c:	edc3 7a01 	vstr	s15, [r3, #4]
    data->voltQRef = static_cast<float>(rxData[3]);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 405f 	ldrb.w	r4, [r3, #95]	@ 0x5f
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f8c9 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 800164e:	4603      	mov	r3, r0
 8001650:	ee07 4a90 	vmov	s15, r4
 8001654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001658:	edc3 7a02 	vstr	s15, [r3, #8]
    data->virAngFreq = static_cast<float>(rxData[4]);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 4060 	ldrb.w	r4, [r3, #96]	@ 0x60
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f8bb 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 800166a:	4603      	mov	r3, r0
 800166c:	ee07 4a90 	vmov	s15, r4
 8001670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001674:	edc3 7a03 	vstr	s15, [r3, #12]

    canRxInterrupt = false;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    canTxFlag = true;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  }
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}

08001690 <_ZN6CanCom6rxTaskEv>:

void CanCom::rxTask() {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  handleRxData();
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffa2 	bl	80015e2 <_ZN6CanCom12handleRxDataEv>
  uint8_t currentGenFuncRef = data->genFuncRef;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f89d 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	73fb      	strb	r3, [r7, #15]

  if (currentGenFuncRef == prevGenFuncRef) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d107      	bne.n	80016c8 <_ZN6CanCom6rxTaskEv+0x38>
    data->genFuncCheck = false;   
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f890 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2200      	movs	r2, #0
 80016c4:	741a      	strb	r2, [r3, #16]
    return;
 80016c6:	e00a      	b.n	80016de <_ZN6CanCom6rxTaskEv+0x4e>
  }
  data->genFuncCheck = true;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f888 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2201      	movs	r2, #1
 80016d4:	741a      	strb	r2, [r3, #16]
  prevGenFuncRef = currentGenFuncRef;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7bfa      	ldrb	r2, [r7, #15]
 80016da:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZN6CanCom6txTaskEv>:

void CanCom::txTask(){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if (canTxFlag) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d019      	beq.n	800172c <_ZN6CanCom6txTaskEv+0x48>
    ang.prepareCanData(data->txBuff, sizeof(data->txBuff));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f870 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001700:	4603      	mov	r3, r0
 8001702:	3311      	adds	r3, #17
 8001704:	2208      	movs	r2, #8
 8001706:	4619      	mov	r1, r3
 8001708:	480a      	ldr	r0, [pc, #40]	@ (8001734 <_ZN6CanCom6txTaskEv+0x50>)
 800170a:	f7ff fcb7 	bl	800107c <_ZNK3Ang14prepareCanDataEPhj>
    sendData(data->txBuff, sizeof(data->txBuff));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f865 	bl	80017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>
 8001716:	4603      	mov	r3, r0
 8001718:	3311      	adds	r3, #17
 800171a:	2208      	movs	r2, #8
 800171c:	4619      	mov	r1, r3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff feee 	bl	8001500 <_ZN6CanCom8sendDataEPKhj>
    canTxFlag = false;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  }
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200005d4 	.word	0x200005d4

08001738 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
      cancom.rxFifo0Callback(RxFifo0ITs);
 8001742:	6839      	ldr	r1, [r7, #0]
 8001744:	4803      	ldr	r0, [pc, #12]	@ (8001754 <HAL_FDCAN_RxFifo0Callback+0x1c>)
 8001746:	f7ff ff15 	bl	8001574 <_ZN6CanCom15rxFifo0CallbackEm>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000056c 	.word	0x2000056c

08001758 <_ZN6CanCom7CanDataC1Ev>:
  struct CanData {
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	705a      	strb	r2, [r3, #1]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	741a      	strb	r2, [r3, #16]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3311      	adds	r3, #17
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3319      	adds	r3, #25
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_ZSt11make_uniqueIN6CanCom7CanDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80017b4:	2024      	movs	r0, #36	@ 0x24
 80017b6:	f00b fc83 	bl	800d0c0 <_Znwj>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461c      	mov	r4, r3
 80017be:	4620      	mov	r0, r4
 80017c0:	2324      	movs	r3, #36	@ 0x24
 80017c2:	461a      	mov	r2, r3
 80017c4:	2100      	movs	r1, #0
 80017c6:	f00b fd5d 	bl	800d284 <memset>
 80017ca:	4620      	mov	r0, r4
 80017cc:	f7ff ffc4 	bl	8001758 <_ZN6CanCom7CanDataC1Ev>
 80017d0:	4621      	mov	r1, r4
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f820 	bl	8001818 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}

080017e0 <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	return get();
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fca0 	bl	800112e <_ZNKSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE3getEv>
 80017ee:	4603      	mov	r3, r0
      }
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZNSt15__uniq_ptr_dataIN6CanCom7CanDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f821 	bl	8001850 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EEC1EPS1_>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6839      	ldr	r1, [r7, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ffe6 	bl	80017f8 <_ZNSt15__uniq_ptr_dataIN6CanCom7CanDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f819 	bl	8001878 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001846:	4603      	mov	r3, r0
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f818 	bl	8001892 <_ZNSt5tupleIJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffe7 	bl	8001836 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 8001868:	4602      	mov	r2, r0
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZSt3getILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f812 	bl	80018ac <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001888:	4603      	mov	r3, r0
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_ZNSt5tupleIJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f811 	bl	80018c4 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1Ev>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZSt12__get_helperILj0EPN6CanCom7CanDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f815 	bl	80018e4 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERS5_>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f816 	bl	80018fe <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEEC1Ev>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 f81e 	bl	8001916 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EEC1Ev>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZNSt11_Tuple_implILj0EJPN6CanCom7CanDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f81f 	bl	8001932 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERS3_>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEEC1Ev>:
      _Tuple_impl()
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f81e 	bl	8001948 <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EEC1Ev>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EEC1Ev>:
      constexpr _Head_base()
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZNSt10_Head_baseILj0EPN6CanCom7CanDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_ZNK3Ang10getAngDataEv>:
  void elecAngleIn();
  void i2cMasterTxCallback();
  void i2cMasterRxCallback();
  void prepareCanData(uint8_t* buffer, size_t bufferSize) const;
  
  AngData* getAngData() const { return data.get(); }
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fbd3 	bl	8001114 <_ZNKSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE3getEv>
 800196e:	4603      	mov	r3, r0
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZNK4Util11getUtilDataEv>:
public:
  Util();
  
  void genFuncCtrl();

  UtilData* getUtilData() const { return data.get(); }
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fc71 	bl	800226a <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE3getEv>
 8001988:	4603      	mov	r3, r0
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_ZN12ElecangCalibC1Ev>:
extern Ang ang;
extern UserTask usertask;
extern Util util;
extern CanCom cancom;

ElecangCalib::ElecangCalib()
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<ElecangCalibData>()){}
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fc8f 	bl	80022c0 <_ZSt11make_uniqueIN12ElecangCalib16ElecangCalibDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	711a      	strb	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	61da      	str	r2, [r3, #28]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	332c      	adds	r3, #44	@ 0x2c
 80019ee:	22f0      	movs	r2, #240	@ 0xf0
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f00b fc46 	bl	800d284 <memset>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80019fe:	22f0      	movs	r2, #240	@ 0xf0
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00b fc3e 	bl	800d284 <memset>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <_ZN12ElecangCalib10elecCalSeqEv>:

void ElecangCalib::elecCalSeq(){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	ed2d 8b02 	vpush	{d8}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  Util::UtilData* utildata = util.getUtilData();
 8001a20:	48c1      	ldr	r0, [pc, #772]	@ (8001d28 <_ZN12ElecangCalib10elecCalSeqEv+0x314>)
 8001a22:	f7ff ffa9 	bl	8001978 <_ZNK4Util11getUtilDataEv>
 8001a26:	60f8      	str	r0, [r7, #12]
  CanCom::CanData* candata = cancom.getData();
 8001a28:	48c0      	ldr	r0, [pc, #768]	@ (8001d2c <_ZN12ElecangCalib10elecCalSeqEv+0x318>)
 8001a2a:	f7ff f87d 	bl	8000b28 <_ZN6CanCom7getDataEv>
 8001a2e:	60b8      	str	r0, [r7, #8]

  static SeqID_t seqID = INIT;
  static SeqID_t seqID_prev = STEP00;
  float elecAngOfsCur = 0.0f;
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  float ecalVoltDRef = STIMUL_VOLTDREF;
 8001a36:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a3a:	613b      	str	r3, [r7, #16]
  
  if (candata->voltQRef > STIMUL_VOLTDREF) ecalVoltDRef = candata->voltQRef;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	dd02      	ble.n	8001a56 <_ZN12ElecangCalib10elecCalSeqEv+0x42>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	613b      	str	r3, [r7, #16]
  
  switch (seqID) {
 8001a56:	4bb6      	ldr	r3, [pc, #728]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	f200 81e4 	bhi.w	8001e28 <_ZN12ElecangCalib10elecCalSeqEv+0x414>
 8001a60:	a201      	add	r2, pc, #4	@ (adr r2, 8001a68 <_ZN12ElecangCalib10elecCalSeqEv+0x54>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001abf 	.word	0x08001abf
 8001a6c:	08001af9 	.word	0x08001af9
 8001a70:	08001b73 	.word	0x08001b73
 8001a74:	08001bb5 	.word	0x08001bb5
 8001a78:	08001c37 	.word	0x08001c37
 8001a7c:	08001e29 	.word	0x08001e29
 8001a80:	08001e29 	.word	0x08001e29
 8001a84:	08001e29 	.word	0x08001e29
 8001a88:	08001e29 	.word	0x08001e29
 8001a8c:	08001e29 	.word	0x08001e29
 8001a90:	08001e29 	.word	0x08001e29
 8001a94:	08001e29 	.word	0x08001e29
 8001a98:	08001e29 	.word	0x08001e29
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001d79 	.word	0x08001d79
 8001aa4:	08001e29 	.word	0x08001e29
 8001aa8:	08001d4d 	.word	0x08001d4d
    case INIT:
      if (utildata->eCalib) {
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 81bd 	beq.w	8001e30 <_ZN12ElecangCalib10elecCalSeqEv+0x41c>
        seqID = STEP00;
 8001ab6:	4b9e      	ldr	r3, [pc, #632]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001abc:	e1b8      	b.n	8001e30 <_ZN12ElecangCalib10elecCalSeqEv+0x41c>
    // 正の電圧印可 電気角オフセット遷移は0~2piの範囲
    // elecAngOfsRPに正の回転方向でのオフセット値を記録
    case STEP00:
      if (calibSub(ecalVoltDRef, elecAngOfsCur, &elecAngOfsRP, CALIB_ROUGH)){
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3308      	adds	r3, #8
 8001ac2:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8001d34 <_ZN12ElecangCalib10elecCalSeqEv+0x320>
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	edd7 0a05 	vldr	s1, [r7, #20]
 8001acc:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f9c1 	bl	8001e58 <_ZN12ElecangCalib8calibSubEffPff>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 81ab 	beq.w	8001e34 <_ZN12ElecangCalib10elecCalSeqEv+0x420>
        seqID_prev = STEP00;
 8001ade:	4b96      	ldr	r3, [pc, #600]	@ (8001d38 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d101      	bne.n	8001af0 <_ZN12ElecangCalib10elecCalSeqEv+0xdc>
 8001aec:	2210      	movs	r2, #16
 8001aee:	e000      	b.n	8001af2 <_ZN12ElecangCalib10elecCalSeqEv+0xde>
 8001af0:	220e      	movs	r2, #14
 8001af2:	4b8f      	ldr	r3, [pc, #572]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001af4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001af6:	e19d      	b.n	8001e34 <_ZN12ElecangCalib10elecCalSeqEv+0x420>
    // 正の電圧印可 電気角オフセット遷移はelecAngOfsRPからFINE_WIDTH/2戻った地点から
    // FINE_WIDTHの範囲で分割
    // elecAngOfsFPに正の回転方向での詳細オフセット値を記録
    case STEP01:
      elecAngOfsCur = elecAngOfsRP - (FINE_WIDTH / 2);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001afe:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8001d3c <_ZN12ElecangCalib10elecCalSeqEv+0x328>
 8001b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b06:	edc7 7a05 	vstr	s15, [r7, #20]
      if (elecAngOfsCur < 0.0f) elecAngOfsCur += user2pi;
 8001b0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	d507      	bpl.n	8001b28 <_ZN12ElecangCalib10elecCalSeqEv+0x114>
 8001b18:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b1c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001d40 <_ZN12ElecangCalib10elecCalSeqEv+0x32c>
 8001b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b24:	edc7 7a05 	vstr	s15, [r7, #20]
      if (calibSub(ecalVoltDRef, elecAngOfsCur, &elecAngOfsFP, CALIB_FINE)){
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3310      	adds	r3, #16
 8001b2c:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 8001d44 <_ZN12ElecangCalib10elecCalSeqEv+0x330>
 8001b30:	4619      	mov	r1, r3
 8001b32:	edd7 0a05 	vldr	s1, [r7, #20]
 8001b36:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f98c 	bl	8001e58 <_ZN12ElecangCalib8calibSubEffPff>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8178 	beq.w	8001e38 <_ZN12ElecangCalib10elecCalSeqEv+0x424>
        seqID_prev = STEP01;
 8001b48:	4b7b      	ldr	r3, [pc, #492]	@ (8001d38 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d101      	bne.n	8001b5a <_ZN12ElecangCalib10elecCalSeqEv+0x146>
 8001b56:	2210      	movs	r2, #16
 8001b58:	e000      	b.n	8001b5c <_ZN12ElecangCalib10elecCalSeqEv+0x148>
 8001b5a:	220e      	movs	r2, #14
 8001b5c:	4b74      	ldr	r3, [pc, #464]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001b5e:	701a      	strb	r2, [r3, #0]
        data->elecAngOfsPlus = elecAngOfsFP;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fbe9 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	6013      	str	r3, [r2, #0]
      }
      break;
 8001b70:	e162      	b.n	8001e38 <_ZN12ElecangCalib10elecCalSeqEv+0x424>
      
    // 負の電圧印可 電気角オフセット遷移は0~2piの範囲
    // elecAngOfsRMに負の回転方向でのオフセット値を記録
    case STEP02:
      if (calibSub(-ecalVoltDRef, elecAngOfsCur, &elecAngOfsRM, CALIB_ROUGH)){
 8001b72:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b76:	eef1 7a67 	vneg.f32	s15, s15
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 8001d34 <_ZN12ElecangCalib10elecCalSeqEv+0x320>
 8001b82:	4619      	mov	r1, r3
 8001b84:	edd7 0a05 	vldr	s1, [r7, #20]
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f963 	bl	8001e58 <_ZN12ElecangCalib8calibSubEffPff>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8151 	beq.w	8001e3c <_ZN12ElecangCalib10elecCalSeqEv+0x428>
        seqID_prev = STEP02;
 8001b9a:	4b67      	ldr	r3, [pc, #412]	@ (8001d38 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	791b      	ldrb	r3, [r3, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d101      	bne.n	8001bac <_ZN12ElecangCalib10elecCalSeqEv+0x198>
 8001ba8:	2210      	movs	r2, #16
 8001baa:	e000      	b.n	8001bae <_ZN12ElecangCalib10elecCalSeqEv+0x19a>
 8001bac:	220e      	movs	r2, #14
 8001bae:	4b60      	ldr	r3, [pc, #384]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001bb0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001bb2:	e143      	b.n	8001e3c <_ZN12ElecangCalib10elecCalSeqEv+0x428>
    // 負の電圧印可 電気角オフセット遷移はelecAngOfsRMからFINE_WIDTH/2戻った地点から
    // FINE_WIDTHの範囲で分割
    // elecAngOfsFMに正の回転方向での詳細オフセット値を記録
    case STEP03:
      elecAngOfsCur = elecAngOfsRM - (FINE_WIDTH / 2);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bba:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001d3c <_ZN12ElecangCalib10elecCalSeqEv+0x328>
 8001bbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bc2:	edc7 7a05 	vstr	s15, [r7, #20]
      if (elecAngOfsCur < 0.0f) elecAngOfsCur += user2pi;
 8001bc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd2:	d507      	bpl.n	8001be4 <_ZN12ElecangCalib10elecCalSeqEv+0x1d0>
 8001bd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001d40 <_ZN12ElecangCalib10elecCalSeqEv+0x32c>
 8001bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be0:	edc7 7a05 	vstr	s15, [r7, #20]
      if (calibSub(-ecalVoltDRef, elecAngOfsCur, &elecAngOfsFM, CALIB_FINE)){
 8001be4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be8:	eef1 7a67 	vneg.f32	s15, s15
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3314      	adds	r3, #20
 8001bf0:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 8001d44 <_ZN12ElecangCalib10elecCalSeqEv+0x330>
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	edd7 0a05 	vldr	s1, [r7, #20]
 8001bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f92a 	bl	8001e58 <_ZN12ElecangCalib8calibSubEffPff>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 811a 	beq.w	8001e40 <_ZN12ElecangCalib10elecCalSeqEv+0x42c>
        seqID_prev = STEP03;
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d38 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001c0e:	2203      	movs	r2, #3
 8001c10:	701a      	strb	r2, [r3, #0]
        seqID = (seqIDSub == FAIL) ? END : IDLE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	791b      	ldrb	r3, [r3, #4]
 8001c16:	2b0f      	cmp	r3, #15
 8001c18:	d101      	bne.n	8001c1e <_ZN12ElecangCalib10elecCalSeqEv+0x20a>
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	e000      	b.n	8001c20 <_ZN12ElecangCalib10elecCalSeqEv+0x20c>
 8001c1e:	220e      	movs	r2, #14
 8001c20:	4b43      	ldr	r3, [pc, #268]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001c22:	701a      	strb	r2, [r3, #0]
        data->elecAngOfsMinus = elecAngOfsFM;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fb87 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	6053      	str	r3, [r2, #4]
      }
      break;
 8001c34:	e104      	b.n	8001e40 <_ZN12ElecangCalib10elecCalSeqEv+0x42c>
      
    case STEP04:
      // 最終オフセット値算出
      if (!utildata->eCalib) { seqID = END; break; }
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	f083 0301 	eor.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <_ZN12ElecangCalib10elecCalSeqEv+0x238>
 8001c44:	4b3a      	ldr	r3, [pc, #232]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001c46:	2210      	movs	r2, #16
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	e0fa      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      
      if (((elecAngOfsFP + userpi) < elecAngOfsFM) || (elecAngOfsFM < (elecAngOfsFP - userpi))) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c52:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001d48 <_ZN12ElecangCalib10elecCalSeqEv+0x334>
 8001c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	d40e      	bmi.n	8001c88 <_ZN12ElecangCalib10elecCalSeqEv+0x274>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c76:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001d48 <_ZN12ElecangCalib10elecCalSeqEv+0x334>
 8001c7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	d517      	bpl.n	8001cb8 <_ZN12ElecangCalib10elecCalSeqEv+0x2a4>
        data->elecAngOfs = ((elecAngOfsFP + elecAngOfsFM) / 2) - userpi;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001c9c:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fb49 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8001d48 <_ZN12ElecangCalib10elecCalSeqEv+0x334>
 8001cae:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001cb2:	edc3 7a04 	vstr	s15, [r3, #16]
 8001cb6:	e012      	b.n	8001cde <_ZN12ElecangCalib10elecCalSeqEv+0x2ca>
      } else {
        data->elecAngOfs = (elecAngOfsFP + elecAngOfsFM) / 2;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cc4:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fb35 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001cd6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001cda:	edc3 7a04 	vstr	s15, [r3, #16]
      }
      if (data->elecAngOfs <= 0.0f) data->elecAngOfs += user2pi;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fb2a 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	bf94      	ite	ls
 8001cf6:	2301      	movls	r3, #1
 8001cf8:	2300      	movhi	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00c      	beq.n	8001d1a <_ZN12ElecangCalib10elecCalSeqEv+0x306>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fb19 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d0e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001d40 <_ZN12ElecangCalib10elecCalSeqEv+0x32c>
 8001d12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d16:	edc3 7a04 	vstr	s15, [r3, #16]
      seqID = END;
 8001d1a:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <_ZN12ElecangCalib10elecCalSeqEv+0x31c>)
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	701a      	strb	r2, [r3, #0]
      seqID_prev = IDLE;
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <_ZN12ElecangCalib10elecCalSeqEv+0x324>)
 8001d22:	220e      	movs	r2, #14
 8001d24:	701a      	strb	r2, [r3, #0]
      break;
 8001d26:	e08c      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
 8001d28:	20000658 	.word	0x20000658
 8001d2c:	2000056c 	.word	0x2000056c
 8001d30:	20000000 	.word	0x20000000
 8001d34:	3dd67750 	.word	0x3dd67750
 8001d38:	200002a4 	.word	0x200002a4
 8001d3c:	3e99999a 	.word	0x3e99999a
 8001d40:	40c90fdb 	.word	0x40c90fdb
 8001d44:	3c23d70b 	.word	0x3c23d70b
 8001d48:	40490fdb 	.word	0x40490fdb
      
    case END:
      data->drvMd = 0;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 faf3 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2200      	movs	r2, #0
 8001d58:	721a      	strb	r2, [r3, #8]
      data->voltQRef = 0.0f;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 faec 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
      utildata->eCalib = false;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
      seqID = INIT;
 8001d70:	4b37      	ldr	r3, [pc, #220]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001d72:	220d      	movs	r2, #13
 8001d74:	701a      	strb	r2, [r3, #0]
      break;
 8001d76:	e064      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      
    case IDLE:
      if (idleCount++ < 1000) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	1c59      	adds	r1, r3, #1
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6191      	str	r1, [r2, #24]
 8001d82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d86:	4293      	cmp	r3, r2
 8001d88:	bfd4      	ite	le
 8001d8a:	2301      	movle	r3, #1
 8001d8c:	2300      	movgt	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00f      	beq.n	8001db4 <_ZN12ElecangCalib10elecCalSeqEv+0x3a0>
        data->drvMd = 0;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 facf 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2200      	movs	r2, #0
 8001da0:	721a      	strb	r2, [r3, #8]
        data->voltQRef = 0.0f;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fac8 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
        break;
 8001db2:	e046      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>

      } else {
        idleCount = 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
        switch (seqID_prev)
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <_ZN12ElecangCalib10elecCalSeqEv+0x440>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b0e      	cmp	r3, #14
 8001dc0:	d830      	bhi.n	8001e24 <_ZN12ElecangCalib10elecCalSeqEv+0x410>
 8001dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc8 <_ZN12ElecangCalib10elecCalSeqEv+0x3b4>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001e05 	.word	0x08001e05
 8001dcc:	08001e0d 	.word	0x08001e0d
 8001dd0:	08001e15 	.word	0x08001e15
 8001dd4:	08001e1d 	.word	0x08001e1d
 8001dd8:	08001e25 	.word	0x08001e25
 8001ddc:	08001e25 	.word	0x08001e25
 8001de0:	08001e25 	.word	0x08001e25
 8001de4:	08001e25 	.word	0x08001e25
 8001de8:	08001e25 	.word	0x08001e25
 8001dec:	08001e25 	.word	0x08001e25
 8001df0:	08001e25 	.word	0x08001e25
 8001df4:	08001e25 	.word	0x08001e25
 8001df8:	08001e25 	.word	0x08001e25
 8001dfc:	08001e25 	.word	0x08001e25
 8001e00:	08001e25 	.word	0x08001e25
        {
        case STEP00:
          seqID = STEP01;
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
          break;
 8001e0a:	e00c      	b.n	8001e26 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case STEP01:
          seqID = STEP02;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001e0e:	2202      	movs	r2, #2
 8001e10:	701a      	strb	r2, [r3, #0]
          break;
 8001e12:	e008      	b.n	8001e26 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case STEP02:
          seqID = STEP03;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001e16:	2203      	movs	r2, #3
 8001e18:	701a      	strb	r2, [r3, #0]
          break;
 8001e1a:	e004      	b.n	8001e26 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case STEP03:
          seqID = STEP04;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001e1e:	2204      	movs	r2, #4
 8001e20:	701a      	strb	r2, [r3, #0]
          break;
 8001e22:	e000      	b.n	8001e26 <_ZN12ElecangCalib10elecCalSeqEv+0x412>
        case IDLE:
          break;  

        default:
          break;
 8001e24:	bf00      	nop
        }
      }
      break;
 8001e26:	e00c      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      
    default:
      seqID = INIT;
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <_ZN12ElecangCalib10elecCalSeqEv+0x43c>)
 8001e2a:	220d      	movs	r2, #13
 8001e2c:	701a      	strb	r2, [r3, #0]
      break;
 8001e2e:	e008      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8001e30:	bf00      	nop
 8001e32:	e006      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8001e34:	bf00      	nop
 8001e36:	e004      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8001e38:	bf00      	nop
 8001e3a:	e002      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8001e3c:	bf00      	nop
 8001e3e:	e000      	b.n	8001e42 <_ZN12ElecangCalib10elecCalSeqEv+0x42e>
      break;
 8001e40:	bf00      	nop
  }

}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	ecbd 8b02 	vpop	{d8}
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000000 	.word	0x20000000
 8001e54:	200002a4 	.word	0x200002a4

08001e58 <_ZN12ElecangCalib8calibSubEffPff>:

bool ElecangCalib::calibSub(float _voltDRef, float _elecAngOfsCur, float *_elecAngOfsMax, float _calDelta) {
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b08a      	sub	sp, #40	@ 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6178      	str	r0, [r7, #20]
 8001e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	ed87 1a01 	vstr	s2, [r7, #4]
  Ang::AngData* angdata = ang.getAngData();
 8001e6e:	48aa      	ldr	r0, [pc, #680]	@ (8002118 <_ZN12ElecangCalib8calibSubEffPff+0x2c0>)
 8001e70:	f7ff fd75 	bl	800195e <_ZNK3Ang10getAngDataEv>
 8001e74:	61f8      	str	r0, [r7, #28]
  Util::UtilData* utildata = util.getUtilData();
 8001e76:	48a9      	ldr	r0, [pc, #676]	@ (800211c <_ZN12ElecangCalib8calibSubEffPff+0x2c4>)
 8001e78:	f7ff fd7e 	bl	8001978 <_ZNK4Util11getUtilDataEv>
 8001e7c:	61b8      	str	r0, [r7, #24]
  bool returnVal = false;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  // forloop用
  float velOutMax_ = 0.0f;
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  
  switch (seqIDSub) {
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	791b      	ldrb	r3, [r3, #4]
 8001e8e:	2b10      	cmp	r3, #16
 8001e90:	f200 81d4 	bhi.w	800223c <_ZN12ElecangCalib8calibSubEffPff+0x3e4>
 8001e94:	a201      	add	r2, pc, #4	@ (adr r2, 8001e9c <_ZN12ElecangCalib8calibSubEffPff+0x44>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ee1 	.word	0x08001ee1
 8001ea0:	08001fa9 	.word	0x08001fa9
 8001ea4:	080020e9 	.word	0x080020e9
 8001ea8:	0800223d 	.word	0x0800223d
 8001eac:	0800223d 	.word	0x0800223d
 8001eb0:	0800223d 	.word	0x0800223d
 8001eb4:	0800223d 	.word	0x0800223d
 8001eb8:	0800223d 	.word	0x0800223d
 8001ebc:	0800223d 	.word	0x0800223d
 8001ec0:	0800223d 	.word	0x0800223d
 8001ec4:	0800223d 	.word	0x0800223d
 8001ec8:	0800223d 	.word	0x0800223d
 8001ecc:	0800223d 	.word	0x0800223d
 8001ed0:	0800223d 	.word	0x0800223d
 8001ed4:	0800223d 	.word	0x0800223d
 8001ed8:	08002219 	.word	0x08002219
 8001edc:	080021ef 	.word	0x080021ef
    case STEP00:
      // Standby
      data->drvMd = 1;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fa29 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2201      	movs	r2, #1
 8001eec:	721a      	strb	r2, [r3, #8]
      data->voltQRef = _voltDRef;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fa22 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	60d3      	str	r3, [r2, #12]
      elecAngOfsVal = _elecAngOfsCur;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	621a      	str	r2, [r3, #32]
      angdata->elecAng += elecAngOfsVal;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	ed93 7a00 	vldr	s14, [r3]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	edc3 7a00 	vstr	s15, [r3]

      // 中断処理
      if (!(utildata->eCalib)) { seqIDSub = FAIL; break; }
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	f083 0301 	eor.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <_ZN12ElecangCalib8calibSubEffPff+0xd6>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	220f      	movs	r2, #15
 8001f2a:	711a      	strb	r2, [r3, #4]
 8001f2c:	e18a      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>

      if (count++ < STANDBY_COUNT) {
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	1c59      	adds	r1, r3, #1
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	61d1      	str	r1, [r2, #28]
 8001f38:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	bfd4      	ite	le
 8001f40:	2301      	movle	r3, #1
 8001f42:	2300      	movgt	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d027      	beq.n	8001f9a <_ZN12ElecangCalib8calibSubEffPff+0x142>
        velOutAxLast = (1 - LPF_COEFF) * velOutAxLast + LPF_COEFF * angdata->actVel;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fac6 	bl	80004e0 <__aeabi_f2d>
 8001f54:	a36c      	add	r3, pc, #432	@ (adr r3, 8002108 <_ZN12ElecangCalib8calibSubEffPff+0x2b0>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fb19 	bl	8000590 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4614      	mov	r4, r2
 8001f64:	461d      	mov	r5, r3
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fab8 	bl	80004e0 <__aeabi_f2d>
 8001f70:	a367      	add	r3, pc, #412	@ (adr r3, 8002110 <_ZN12ElecangCalib8calibSubEffPff+0x2b8>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb0b 	bl	8000590 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe f94f 	bl	8000224 <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fd11 	bl	80009b4 <__aeabi_d2f>
 8001f92:	4602      	mov	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	629a      	str	r2, [r3, #40]	@ 0x28
      } else {
        count = 0;
        seqIDSub = STEP01;
      }
      break;
 8001f98:	e154      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
        count = 0;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
        seqIDSub = STEP01;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	711a      	strb	r2, [r3, #4]
      break;
 8001fa6:	e14d      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    case STEP01:
      // Run
      data->drvMd = 1;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f9c5 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	721a      	strb	r2, [r3, #8]
      data->voltQRef = _voltDRef;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f9be 	bl	800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	60d3      	str	r3, [r2, #12]
      angdata->elecAng += elecAngOfsVal;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	ed93 7a00 	vldr	s14, [r3]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	edc3 7a00 	vstr	s15, [r3]

      // 中断処理
      if (!(utildata->eCalib)) { seqIDSub = FAIL; break; }
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	f083 0301 	eor.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <_ZN12ElecangCalib8calibSubEffPff+0x198>
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	220f      	movs	r2, #15
 8001fec:	711a      	strb	r2, [r3, #4]
 8001fee:	e129      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>

      if (count++ < CALIB_COUNT) {
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	1c59      	adds	r1, r3, #1
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	61d1      	str	r1, [r2, #28]
 8001ffa:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001ffe:	4293      	cmp	r3, r2
 8002000:	bfd4      	ite	le
 8002002:	2301      	movle	r3, #1
 8002004:	2300      	movgt	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d03b      	beq.n	8002084 <_ZN12ElecangCalib8calibSubEffPff+0x22c>
        if (user2pi < angdata->elecAng) angdata->elecAng -= user2pi;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002120 <_ZN12ElecangCalib8calibSubEffPff+0x2c8>
 8002016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	dd09      	ble.n	8002034 <_ZN12ElecangCalib8calibSubEffPff+0x1dc>
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002120 <_ZN12ElecangCalib8calibSubEffPff+0x2c8>
 800202a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	edc3 7a00 	vstr	s15, [r3]
        velOutAxLast = (1 - LPF_COEFF) * velOutAxLast + LPF_COEFF * angdata->actVel;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa51 	bl	80004e0 <__aeabi_f2d>
 800203e:	a332      	add	r3, pc, #200	@ (adr r3, 8002108 <_ZN12ElecangCalib8calibSubEffPff+0x2b0>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe faa4 	bl	8000590 <__aeabi_dmul>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4614      	mov	r4, r2
 800204e:	461d      	mov	r5, r3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa43 	bl	80004e0 <__aeabi_f2d>
 800205a:	a32d      	add	r3, pc, #180	@ (adr r3, 8002110 <_ZN12ElecangCalib8calibSubEffPff+0x2b8>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fa96 	bl	8000590 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4620      	mov	r0, r4
 800206a:	4629      	mov	r1, r5
 800206c:	f7fe f8da 	bl	8000224 <__adddf3>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f7fe fc9c 	bl	80009b4 <__aeabi_d2f>
 800207c:	4602      	mov	r2, r0
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	629a      	str	r2, [r3, #40]	@ 0x28
        } else {
          indexnum = 0;
          seqIDSub = STEP02;
        }
      }
      break;
 8002082:	e0df      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
        if (indexnum < CALIB_NUM) {
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	2b3b      	cmp	r3, #59	@ 0x3b
 800208a:	d826      	bhi.n	80020da <_ZN12ElecangCalib8calibSubEffPff+0x282>
          count = 0;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
          velOut[indexnum] = velOutAxLast;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800209a:	6979      	ldr	r1, [r7, #20]
 800209c:	330a      	adds	r3, #10
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	3304      	adds	r3, #4
 80020a4:	601a      	str	r2, [r3, #0]
          elecAngOfs[indexnum] = elecAngOfsVal;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	6a12      	ldr	r2, [r2, #32]
 80020ae:	6979      	ldr	r1, [r7, #20]
 80020b0:	3346      	adds	r3, #70	@ 0x46
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3304      	adds	r3, #4
 80020b8:	601a      	str	r2, [r3, #0]
          elecAngOfsVal += _calDelta;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80020c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	edc3 7a08 	vstr	s15, [r3, #32]
          indexnum++;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 80020d8:	e0b4      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
          indexnum = 0;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24
          seqIDSub = STEP02;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2202      	movs	r2, #2
 80020e4:	711a      	strb	r2, [r3, #4]
      break;
 80020e6:	e0ad      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    case STEP02:
      // Mesuring
      
      // 中断処理
      if (!(utildata->eCalib)) { seqIDSub = FAIL; break; }
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <_ZN12ElecangCalib8calibSubEffPff+0x2a6>
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	220f      	movs	r2, #15
 80020fa:	711a      	strb	r2, [r3, #4]
 80020fc:	e0a2      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>

      for (indexnum = 0; indexnum < CALIB_NUM; indexnum++) {
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2200      	movs	r2, #0
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24
 8002104:	e068      	b.n	80021d8 <_ZN12ElecangCalib8calibSubEffPff+0x380>
 8002106:	bf00      	nop
 8002108:	1b24ce90 	.word	0x1b24ce90
 800210c:	3feff5b5 	.word	0x3feff5b5
 8002110:	b662dffe 	.word	0xb662dffe
 8002114:	3f5495c9 	.word	0x3f5495c9
 8002118:	200005d4 	.word	0x200005d4
 800211c:	20000658 	.word	0x20000658
 8002120:	40c90fdb 	.word	0x40c90fdb
        if ((_voltDRef > 0.0f) && (velOut[indexnum] >= velOutMax_)) {
 8002124:	edd7 7a04 	vldr	s15, [r7, #16]
 8002128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002130:	dd23      	ble.n	800217a <_ZN12ElecangCalib8calibSubEffPff+0x322>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	330a      	adds	r3, #10
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ed97 7a08 	vldr	s14, [r7, #32]
 8002148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002150:	d813      	bhi.n	800217a <_ZN12ElecangCalib8calibSubEffPff+0x322>
          velOutMax_ = velOut[indexnum];
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	330a      	adds	r3, #10
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	3304      	adds	r3, #4
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	623b      	str	r3, [r7, #32]
          *_elecAngOfsMax = elecAngOfs[indexnum];
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	3346      	adds	r3, #70	@ 0x46
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3304      	adds	r3, #4
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e029      	b.n	80021ce <_ZN12ElecangCalib8calibSubEffPff+0x376>
        }
        else if ((_voltDRef < 0.0f) && (velOut[indexnum] <= velOutMax_)) {
 800217a:	edd7 7a04 	vldr	s15, [r7, #16]
 800217e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002186:	d522      	bpl.n	80021ce <_ZN12ElecangCalib8calibSubEffPff+0x376>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	330a      	adds	r3, #10
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ed97 7a08 	vldr	s14, [r7, #32]
 800219e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	db12      	blt.n	80021ce <_ZN12ElecangCalib8calibSubEffPff+0x376>
          velOutMax_ = velOut[indexnum];
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	330a      	adds	r3, #10
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	623b      	str	r3, [r7, #32]
          *_elecAngOfsMax = elecAngOfs[indexnum];
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	3346      	adds	r3, #70	@ 0x46
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	601a      	str	r2, [r3, #0]
      for (indexnum = 0; indexnum < CALIB_NUM; indexnum++) {
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	2b3b      	cmp	r3, #59	@ 0x3b
 80021de:	d9a1      	bls.n	8002124 <_ZN12ElecangCalib8calibSubEffPff+0x2cc>
        }
      }
      indexnum = 0;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
      seqIDSub = END;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2210      	movs	r2, #16
 80021ea:	711a      	strb	r2, [r3, #4]

      break;
 80021ec:	e02a      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
      
    case END:
      // End
      count = 0;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2200      	movs	r2, #0
 80021f2:	61da      	str	r2, [r3, #28]
      indexnum = 0;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2200      	movs	r2, #0
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24
      velOutAxLast = 0.0f;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	@ 0x28
      elecAngOfsVal = 0.0f;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	621a      	str	r2, [r3, #32]
      returnVal = true;
 800220a:	2301      	movs	r3, #1
 800220c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      seqIDSub = STEP00;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2200      	movs	r2, #0
 8002214:	711a      	strb	r2, [r3, #4]
      break;
 8002216:	e015      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    case FAIL:
      // キャンセル処理
      count = 0;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
      indexnum = 0;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2200      	movs	r2, #0
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
      velOutAxLast = 0.0f;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	629a      	str	r2, [r3, #40]	@ 0x28
      elecAngOfsVal = 0.0f;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
      returnVal = true;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      
      break;
 800223a:	e003      	b.n	8002244 <_ZN12ElecangCalib8calibSubEffPff+0x3ec>
    default:
    seqIDSub = STEP00;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2200      	movs	r2, #0
 8002240:	711a      	strb	r2, [r3, #4]
    break;
 8002242:	bf00      	nop
  } 
  return returnVal;
 8002244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002248:	4618      	mov	r0, r3
 800224a:	3728      	adds	r7, #40	@ 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bdb0      	pop	{r4, r5, r7, pc}

08002250 <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f879 	bl	8002352 <_ZNKSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002260:	4603      	mov	r3, r0
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f87a 	bl	800236e <_ZNKSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>
 800227a:	4603      	mov	r3, r0
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <_ZN12ElecangCalib16ElecangCalibDataC1Ev>:
#define CALIB_NUM       (60)                           /* 分割数 [-] */

class ElecangCalib
{
public:
  struct ElecangCalibData
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	721a      	strb	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_ZSt11make_uniqueIN12ElecangCalib16ElecangCalibDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80022c8:	2014      	movs	r0, #20
 80022ca:	f00a fef9 	bl	800d0c0 <_Znwj>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461c      	mov	r4, r3
 80022d2:	4622      	mov	r2, r4
 80022d4:	2300      	movs	r3, #0
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	6053      	str	r3, [r2, #4]
 80022da:	6093      	str	r3, [r2, #8]
 80022dc:	60d3      	str	r3, [r2, #12]
 80022de:	6113      	str	r3, [r2, #16]
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff ffcf 	bl	8002284 <_ZN12ElecangCalib16ElecangCalibDataC1Ev>
 80022e6:	4621      	mov	r1, r4
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f85e 	bl	80023aa <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}

080022f6 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80022f6:	b590      	push	{r4, r7, lr}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4618      	mov	r0, r3
 8002302:	f000 f861 	bl	80023c8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>
 8002306:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00c      	beq.n	800232a <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f866 	bl	80023e2 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE11get_deleterEv>
 8002316:	4604      	mov	r4, r0
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f86f 	bl	80023fc <_ZSt4moveIRPN12ElecangCalib16ElecangCalibDataEEONSt16remove_referenceIT_E4typeEOS5_>
 800231e:	4603      	mov	r3, r0
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	4620      	mov	r0, r4
 8002326:	f000 f874 	bl	8002412 <_ZNKSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEclEPS1_>
	__ptr = pointer();
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
      }
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}

0800233a <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return get();
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ff84 	bl	8002250 <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE3getEv>
 8002348:	4603      	mov	r3, r0
      }
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_ZNKSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f868 	bl	8002432 <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8002362:	4603      	mov	r3, r0
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_ZNKSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>:
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f867 	bl	800244c <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800237e:	4603      	mov	r3, r0
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <_ZNSt15__uniq_ptr_dataIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f863 	bl	8002466 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1EPS1_>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6839      	ldr	r1, [r7, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ffe6 	bl	800238a <_ZNSt15__uniq_ptr_dataIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f85b 	bl	800248e <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80023d8:	4603      	mov	r3, r0
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f85b 	bl	80024a8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE10_M_deleterEv>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_ZSt4moveIRPN12ElecangCalib16ElecangCalibDataEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <_ZNKSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <_ZNKSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEclEPS1_+0x18>
 8002422:	2114      	movs	r1, #20
 8002424:	4618      	mov	r0, r3
 8002426:	f00a fe49 	bl	800d0bc <_ZdlPvj>
      }
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f840 	bl	80024c2 <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002442:	4603      	mov	r3, r0
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f83f 	bl	80024da <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800245c:	4603      	mov	r3, r0
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f83d 	bl	80024f2 <_ZNSt5tupleIJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ffa5 	bl	80023c8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE6_M_ptrEv>
 800247e:	4602      	mov	r2, r0
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_ZSt3getILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f837 	bl	800250c <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800249e:	4603      	mov	r3, r0
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_ZNSt15__uniq_ptr_implIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f836 	bl	8002524 <_ZSt3getILj1EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f836 	bl	800253c <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f837 	bl	8002556 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_ZNSt5tupleIJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f837 	bl	8002570 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1Ev>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZSt12__get_helperILj0EPN12ElecangCalib16ElecangCalibDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f83b 	bl	8002590 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERS5_>
 800251a:	4603      	mov	r3, r0
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_ZSt3getILj1EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f83c 	bl	80025aa <_ZSt12__get_helperILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002532:	4603      	mov	r3, r0
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f83b 	bl	80025c2 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERKS3_>
 800254c:	4603      	mov	r3, r0
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f839 	bl	80025d8 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERKS3_>
 8002566:	4603      	mov	r3, r0
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f838 	bl	80025ee <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEEC1Ev>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f840 	bl	8002606 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EEC1Ev>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZNSt11_Tuple_implILj0EJPN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f841 	bl	8002622 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERS3_>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_ZSt12__get_helperILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f840 	bl	8002638 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEE7_M_headERS4_>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERKS3_>:
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEEC1Ev>:
      _Tuple_impl()
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f82a 	bl	8002650 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EEC1Ev>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EEC1Ev>:
      constexpr _Head_base()
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <_ZNSt10_Head_baseILj0EPN12ElecangCalib16ElecangCalibDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN12ElecangCalib16ElecangCalibDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f810 	bl	8002666 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EE7_M_headERS4_>
 8002646:	4603      	mov	r3, r0
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EEC1Ev>:
      constexpr _Head_base()
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_ZNSt10_Head_baseILj1ESt14default_deleteIN12ElecangCalib16ElecangCalibDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_ZN12ElecangCalibD1Ev>:
class ElecangCalib
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fe35 	bl	80022f6 <_ZNSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EED1Ev>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <_Z41__static_initialization_and_destruction_0ii>:
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d102      	bne.n	80026b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
ElecangCalib elecangcalib;
 80026b2:	4809      	ldr	r0, [pc, #36]	@ (80026d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80026b4:	f7ff f96d 	bl	8001992 <_ZN12ElecangCalibC1Ev>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d107      	bne.n	80026ce <_Z41__static_initialization_and_destruction_0ii+0x36>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d102      	bne.n	80026ce <_Z41__static_initialization_and_destruction_0ii+0x36>
 80026c8:	4803      	ldr	r0, [pc, #12]	@ (80026d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80026ca:	f7ff ffd7 	bl	800267c <_ZN12ElecangCalibD1Ev>
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000098 	.word	0x20000098

080026dc <_GLOBAL__sub_I_elecangcalib>:
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
 80026e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7ff ffd7 	bl	8002698 <_Z41__static_initialization_and_destruction_0ii>
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_GLOBAL__sub_D_elecangcalib>:
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7ff ffcf 	bl	8002698 <_Z41__static_initialization_and_destruction_0ii>
 80026fa:	bd80      	pop	{r7, pc}

080026fc <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <LL_CORDIC_Config+0x44>)
 8002710:	4013      	ands	r3, r2
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4311      	orrs	r1, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	4311      	orrs	r1, r2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4311      	orrs	r1, r2
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	4311      	orrs	r1, r2
 8002724:	6a3a      	ldr	r2, [r7, #32]
 8002726:	4311      	orrs	r1, r2
 8002728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272a:	430a      	orrs	r2, r1
 800272c:	431a      	orrs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	ff87f800 	.word	0xff87f800

08002744 <_ZN10Acrocantho6CordicC1Ev>:
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
}

class Cordic {
  public:
  Cordic() {
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af04      	add	r7, sp, #16
 800274a:	6078      	str	r0, [r7, #4]
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800274c:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 800274e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002750:	4a0e      	ldr	r2, [pc, #56]	@ (800278c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	6493      	str	r3, [r2, #72]	@ 0x48
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <_ZN10Acrocantho6CordicC1Ev+0x48>)
 800275a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
    LL_CORDIC_Config(
 8002764:	2300      	movs	r3, #0
 8002766:	9303      	str	r3, [sp, #12]
 8002768:	2300      	movs	r3, #0
 800276a:	9302      	str	r3, [sp, #8]
 800276c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	2300      	movs	r3, #0
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2300      	movs	r3, #0
 8002778:	2250      	movs	r2, #80	@ 0x50
 800277a:	2100      	movs	r1, #0
 800277c:	4804      	ldr	r0, [pc, #16]	@ (8002790 <_ZN10Acrocantho6CordicC1Ev+0x4c>)
 800277e:	f7ff ffbd 	bl	80026fc <LL_CORDIC_Config>
        LL_CORDIC_SCALE_0,
        LL_CORDIC_NBWRITE_1,
        LL_CORDIC_NBREAD_2,
        LL_CORDIC_INSIZE_32BITS,
        LL_CORDIC_OUTSIZE_32BITS);
  }
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	40020c00 	.word	0x40020c00

08002794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800279a:	f002 fe80 	bl	800549e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800279e:	f000 f88b 	bl	80028b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027a2:	f000 fbcf 	bl	8002f44 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80027a6:	f000 fb9b 	bl	8002ee0 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 80027aa:	f000 f8db 	bl	8002964 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 80027ae:	f000 f96f 	bl	8002a90 <_ZL12MX_ADC2_Initv>
  MX_FDCAN1_Init();
 80027b2:	f000 fa29 	bl	8002c08 <_ZL14MX_FDCAN1_Initv>
  MX_I2C1_Init();
 80027b6:	f000 fa73 	bl	8002ca0 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 80027ba:	f000 fac3 	bl	8002d44 <_ZL12MX_TIM1_Initv>
  MX_CORDIC_Init();
 80027be:	f000 fa0b 	bl	8002bd8 <_ZL14MX_CORDIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80027c2:	217f      	movs	r1, #127	@ 0x7f
 80027c4:	4837      	ldr	r0, [pc, #220]	@ (80028a4 <main+0x110>)
 80027c6:	f003 ffcd 	bl	8006764 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80027ca:	217f      	movs	r1, #127	@ 0x7f
 80027cc:	4836      	ldr	r0, [pc, #216]	@ (80028a8 <main+0x114>)
 80027ce:	f003 ffc9 	bl	8006764 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80027d2:	4834      	ldr	r0, [pc, #208]	@ (80028a4 <main+0x110>)
 80027d4:	f003 f9ca 	bl	8005b6c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80027d8:	4833      	ldr	r0, [pc, #204]	@ (80028a8 <main+0x114>)
 80027da:	f003 f9c7 	bl	8005b6c <HAL_ADC_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80027de:	4831      	ldr	r0, [pc, #196]	@ (80028a4 <main+0x110>)
 80027e0:	f004 f822 	bl	8006828 <HAL_ADCEx_InjectedStart_IT>
  //  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80027e4:	2100      	movs	r1, #0
 80027e6:	4831      	ldr	r0, [pc, #196]	@ (80028ac <main+0x118>)
 80027e8:	f009 fc1a 	bl	800c020 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80027ec:	2104      	movs	r1, #4
 80027ee:	482f      	ldr	r0, [pc, #188]	@ (80028ac <main+0x118>)
 80027f0:	f009 fc16 	bl	800c020 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80027f4:	2108      	movs	r1, #8
 80027f6:	482d      	ldr	r0, [pc, #180]	@ (80028ac <main+0x118>)
 80027f8:	f009 fc12 	bl	800c020 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80027fc:	2100      	movs	r1, #0
 80027fe:	482b      	ldr	r0, [pc, #172]	@ (80028ac <main+0x118>)
 8002800:	f00a fa38 	bl	800cc74 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002804:	2104      	movs	r1, #4
 8002806:	4829      	ldr	r0, [pc, #164]	@ (80028ac <main+0x118>)
 8002808:	f00a fa34 	bl	800cc74 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800280c:	2108      	movs	r1, #8
 800280e:	4827      	ldr	r0, [pc, #156]	@ (80028ac <main+0x118>)
 8002810:	f00a fa30 	bl	800cc74 <HAL_TIMEx_PWMN_Start>
  
  // ゲートドライバON
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002814:	2201      	movs	r2, #1
 8002816:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800281a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800281e:	f006 fb95 	bl	8008f4c <HAL_GPIO_WritePin>

  // CANフィルタ
  FDCAN_FilterTypeDef CAN_FilterConfig;
  CAN_FilterConfig.IdType = FDCAN_STANDARD_ID;
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
  CAN_FilterConfig.FilterIndex = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
  CAN_FilterConfig.FilterType = FDCAN_FILTER_MASK;
 800282a:	2302      	movs	r3, #2
 800282c:	613b      	str	r3, [r7, #16]
  CAN_FilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800282e:	2301      	movs	r3, #1
 8002830:	617b      	str	r3, [r7, #20]
  CAN_FilterConfig.FilterID1 = 0x000;  // フィルタID
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  CAN_FilterConfig.FilterID2 = 0x000;  // マスク
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &CAN_FilterConfig) != HAL_OK)
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4619      	mov	r1, r3
 8002840:	481b      	ldr	r0, [pc, #108]	@ (80028b0 <main+0x11c>)
 8002842:	f005 fcd7 	bl	80081f4 <HAL_FDCAN_ConfigFilter>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf14      	ite	ne
 800284c:	2301      	movne	r3, #1
 800284e:	2300      	moveq	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <main+0xc6>
    {
        // フィルタ設定エラー
        Error_Handler();
 8002856:	f000 fc0b 	bl	8003070 <Error_Handler>
    } 
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK) {
 800285a:	4815      	ldr	r0, [pc, #84]	@ (80028b0 <main+0x11c>)
 800285c:	f005 fd24 	bl	80082a8 <HAL_FDCAN_Start>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <main+0xe0>
	  Error_Handler();
 8002870:	f000 fbfe 	bl	8003070 <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8002874:	2200      	movs	r2, #0
 8002876:	2101      	movs	r1, #1
 8002878:	480d      	ldr	r0, [pc, #52]	@ (80028b0 <main+0x11c>)
 800287a:	f005 fe89 	bl	8008590 <HAL_FDCAN_ActivateNotification>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <main+0xfe>
    /* Notification Error */
    Error_Handler();
 800288e:	f000 fbef 	bl	8003070 <Error_Handler>
  }

  Acrocantho::Cordic cordic;
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff55 	bl	8002744 <_ZN10Acrocantho6CordicC1Ev>
  {
    //Acrocantho::SinCos result = cordic.radians(Acrocantho::userpi);
    //a = result.c;
    //b = result.s;
    
    usertask.idleTask();
 800289a:	4806      	ldr	r0, [pc, #24]	@ (80028b4 <main+0x120>)
 800289c:	f002 fb3c 	bl	8004f18 <_ZN8UserTask8idleTaskEv>
 80028a0:	e7fb      	b.n	800289a <main+0x106>
 80028a2:	bf00      	nop
 80028a4:	200002a8 	.word	0x200002a8
 80028a8:	20000314 	.word	0x20000314
 80028ac:	20000520 	.word	0x20000520
 80028b0:	200003a8 	.word	0x200003a8
 80028b4:	20000650 	.word	0x20000650

080028b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b094      	sub	sp, #80	@ 0x50
 80028bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028be:	f107 0318 	add.w	r3, r7, #24
 80028c2:	2238      	movs	r2, #56	@ 0x38
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f00a fcdc 	bl	800d284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80028da:	2000      	movs	r0, #0
 80028dc:	f008 fb50 	bl	800af80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028e0:	2302      	movs	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ea:	2340      	movs	r3, #64	@ 0x40
 80028ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ee:	2302      	movs	r3, #2
 80028f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028f2:	2302      	movs	r3, #2
 80028f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80028f6:	2304      	movs	r3, #4
 80028f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80028fa:	2355      	movs	r3, #85	@ 0x55
 80028fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028fe:	2302      	movs	r3, #2
 8002900:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002902:	2302      	movs	r3, #2
 8002904:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002906:	2302      	movs	r3, #2
 8002908:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800290a:	f107 0318 	add.w	r3, r7, #24
 800290e:	4618      	mov	r0, r3
 8002910:	f008 fbea 	bl	800b0e8 <HAL_RCC_OscConfig>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf14      	ite	ne
 800291a:	2301      	movne	r3, #1
 800291c:	2300      	moveq	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8002924:	f000 fba4 	bl	8003070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002928:	230f      	movs	r3, #15
 800292a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800292c:	2303      	movs	r3, #3
 800292e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2104      	movs	r1, #4
 8002940:	4618      	mov	r0, r3
 8002942:	f008 fee3 	bl	800b70c <HAL_RCC_ClockConfig>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002956:	f000 fb8b 	bl	8003070 <Error_Handler>
  }
}
 800295a:	bf00      	nop
 800295c:	3750      	adds	r7, #80	@ 0x50
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b092      	sub	sp, #72	@ 0x48
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800296a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002976:	463b      	mov	r3, r7
 8002978:	223c      	movs	r2, #60	@ 0x3c
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f00a fc81 	bl	800d284 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002982:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 8002984:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002988:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800298a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 800298c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002990:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002992:	4b3d      	ldr	r3, [pc, #244]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002998:	4b3b      	ldr	r3, [pc, #236]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800299e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029a4:	4b38      	ldr	r3, [pc, #224]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029aa:	4b37      	ldr	r3, [pc, #220]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029ac:	2204      	movs	r2, #4
 80029ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80029b0:	4b35      	ldr	r3, [pc, #212]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029b6:	4b34      	ldr	r3, [pc, #208]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80029bc:	4b32      	ldr	r3, [pc, #200]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029be:	2201      	movs	r2, #1
 80029c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029c2:	4b31      	ldr	r3, [pc, #196]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80029d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029e0:	4829      	ldr	r0, [pc, #164]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 80029e2:	f002 ff07 	bl	80057f4 <HAL_ADC_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <_ZL12MX_ADC1_Initv+0x96>
  {
    Error_Handler();
 80029f6:	f000 fb3b 	bl	8003070 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 80029fa:	2305      	movs	r3, #5
 80029fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80029fe:	2300      	movs	r3, #0
 8002a00:	643b      	str	r3, [r7, #64]	@ 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a06:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	481e      	ldr	r0, [pc, #120]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 8002a0e:	f004 fd65 	bl	80074dc <HAL_ADCEx_MultiModeConfigChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf14      	ite	ne
 8002a18:	2301      	movne	r3, #1
 8002a1a:	2300      	moveq	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8002a22:	f000 fb25 	bl	8003070 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8002a26:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <_ZL12MX_ADC1_Initv+0x128>)
 8002a28:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002a2a:	2309      	movs	r3, #9
 8002a2c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002a32:	237f      	movs	r3, #127	@ 0x7f
 8002a34:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002a36:	2304      	movs	r3, #4
 8002a38:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002a58:	2380      	movs	r3, #128	@ 0x80
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002a62:	463b      	mov	r3, r7
 8002a64:	4619      	mov	r1, r3
 8002a66:	4808      	ldr	r0, [pc, #32]	@ (8002a88 <_ZL12MX_ADC1_Initv+0x124>)
 8002a68:	f004 f80c 	bl	8006a84 <HAL_ADCEx_InjectedConfigChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	bf14      	ite	ne
 8002a72:	2301      	movne	r3, #1
 8002a74:	2300      	moveq	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <_ZL12MX_ADC1_Initv+0x11c>
  {
    Error_Handler();
 8002a7c:	f000 faf8 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a80:	bf00      	nop
 8002a82:	3748      	adds	r7, #72	@ 0x48
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200002a8 	.word	0x200002a8
 8002a8c:	04300002 	.word	0x04300002

08002a90 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b090      	sub	sp, #64	@ 0x40
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	223c      	movs	r2, #60	@ 0x3c
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f00a fbf1 	bl	800d284 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002aa2:	4b48      	ldr	r3, [pc, #288]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002aa4:	4a48      	ldr	r2, [pc, #288]	@ (8002bc8 <_ZL12MX_ADC2_Initv+0x138>)
 8002aa6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002aa8:	4b46      	ldr	r3, [pc, #280]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002aaa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002aae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002ab0:	4b44      	ldr	r3, [pc, #272]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ab6:	4b43      	ldr	r3, [pc, #268]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002abc:	4b41      	ldr	r3, [pc, #260]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ac2:	4b40      	ldr	r3, [pc, #256]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002aca:	2208      	movs	r2, #8
 8002acc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002ace:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002ada:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002ae0:	4b38      	ldr	r3, [pc, #224]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002ae8:	4b36      	ldr	r3, [pc, #216]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002af0:	4b34      	ldr	r3, [pc, #208]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002af6:	4b33      	ldr	r3, [pc, #204]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002afe:	4831      	ldr	r0, [pc, #196]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002b00:	f002 fe78 	bl	80057f4 <HAL_ADC_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 8002b14:	f000 faac 	bl	8003070 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8002b18:	4b2c      	ldr	r3, [pc, #176]	@ (8002bcc <_ZL12MX_ADC2_Initv+0x13c>)
 8002b1a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002b1c:	2309      	movs	r3, #9
 8002b1e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002b24:	237f      	movs	r3, #127	@ 0x7f
 8002b26:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8002b30:	2303      	movs	r3, #3
 8002b32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	4619      	mov	r1, r3
 8002b50:	481c      	ldr	r0, [pc, #112]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002b52:	f003 ff97 	bl	8006a84 <HAL_ADCEx_InjectedConfigChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <_ZL12MX_ADC2_Initv+0xda>
  {
    Error_Handler();
 8002b66:	f000 fa83 	bl	8003070 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8002b6a:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <_ZL12MX_ADC2_Initv+0x140>)
 8002b6c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002b6e:	f240 130f 	movw	r3, #271	@ 0x10f
 8002b72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	4812      	ldr	r0, [pc, #72]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002b7a:	f003 ff83 	bl	8006a84 <HAL_ADCEx_InjectedConfigChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <_ZL12MX_ADC2_Initv+0x102>
  {
    Error_Handler();
 8002b8e:	f000 fa6f 	bl	8003070 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8002b92:	4b10      	ldr	r3, [pc, #64]	@ (8002bd4 <_ZL12MX_ADC2_Initv+0x144>)
 8002b94:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8002b96:	f240 2315 	movw	r3, #533	@ 0x215
 8002b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4808      	ldr	r0, [pc, #32]	@ (8002bc4 <_ZL12MX_ADC2_Initv+0x134>)
 8002ba2:	f003 ff6f 	bl	8006a84 <HAL_ADCEx_InjectedConfigChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <_ZL12MX_ADC2_Initv+0x12a>
  {
    Error_Handler();
 8002bb6:	f000 fa5b 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002bba:	bf00      	nop
 8002bbc:	3740      	adds	r7, #64	@ 0x40
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000314 	.word	0x20000314
 8002bc8:	50000100 	.word	0x50000100
 8002bcc:	08600004 	.word	0x08600004
 8002bd0:	0c900008 	.word	0x0c900008
 8002bd4:	10c00010 	.word	0x10c00010

08002bd8 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8002bdc:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <_ZL14MX_CORDIC_Initv+0x28>)
 8002bde:	4a09      	ldr	r2, [pc, #36]	@ (8002c04 <_ZL14MX_CORDIC_Initv+0x2c>)
 8002be0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8002be2:	4807      	ldr	r0, [pc, #28]	@ (8002c00 <_ZL14MX_CORDIC_Initv+0x28>)
 8002be4:	f004 fd82 	bl	80076ec <HAL_CORDIC_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bf14      	ite	ne
 8002bee:	2301      	movne	r3, #1
 8002bf0:	2300      	moveq	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 8002bf8:	f000 fa3a 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000380 	.word	0x20000380
 8002c04:	40020c00 	.word	0x40020c00

08002c08 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002c0c:	4b22      	ldr	r3, [pc, #136]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c0e:	4a23      	ldr	r2, [pc, #140]	@ (8002c9c <_ZL14MX_FDCAN1_Initv+0x94>)
 8002c10:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002c12:	4b21      	ldr	r3, [pc, #132]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002c18:	4b1f      	ldr	r3, [pc, #124]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002c24:	4b1c      	ldr	r3, [pc, #112]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002c30:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8002c36:	4b18      	ldr	r3, [pc, #96]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c38:	2205      	movs	r2, #5
 8002c3a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8002c3c:	4b16      	ldr	r3, [pc, #88]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c3e:	220b      	movs	r2, #11
 8002c40:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c44:	2238      	movs	r2, #56	@ 0x38
 8002c46:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8002c48:	4b13      	ldr	r3, [pc, #76]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c4a:	220b      	movs	r2, #11
 8002c4c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 8002c4e:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c50:	2205      	movs	r2, #5
 8002c52:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8002c54:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c56:	2204      	movs	r2, #4
 8002c58:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c5c:	220c      	movs	r2, #12
 8002c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8002c60:	4b0d      	ldr	r3, [pc, #52]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c62:	2204      	movs	r2, #4
 8002c64:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8002c66:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002c78:	4807      	ldr	r0, [pc, #28]	@ (8002c98 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002c7a:	f005 f961 	bl	8007f40 <HAL_FDCAN_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8002c8e:	f000 f9ef 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200003a8 	.word	0x200003a8
 8002c9c:	40006400 	.word	0x40006400

08002ca0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ca4:	4b24      	ldr	r3, [pc, #144]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002ca6:	4a25      	ldr	r2, [pc, #148]	@ (8002d3c <_ZL12MX_I2C1_Initv+0x9c>)
 8002ca8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x4052060F;
 8002caa:	4b23      	ldr	r3, [pc, #140]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002cac:	4a24      	ldr	r2, [pc, #144]	@ (8002d40 <_ZL12MX_I2C1_Initv+0xa0>)
 8002cae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002cb0:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cb6:	4b20      	ldr	r3, [pc, #128]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cce:	4b1a      	ldr	r3, [pc, #104]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cd4:	4b18      	ldr	r3, [pc, #96]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cda:	4817      	ldr	r0, [pc, #92]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002cdc:	f006 f971 	bl	8008fc2 <HAL_I2C_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf14      	ite	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	2300      	moveq	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8002cf0:	f000 f9be 	bl	8003070 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4810      	ldr	r0, [pc, #64]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002cf8:	f008 f88a 	bl	800ae10 <HAL_I2CEx_ConfigAnalogFilter>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf14      	ite	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	2300      	moveq	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8002d0c:	f000 f9b0 	bl	8003070 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d10:	2100      	movs	r1, #0
 8002d12:	4809      	ldr	r0, [pc, #36]	@ (8002d38 <_ZL12MX_I2C1_Initv+0x98>)
 8002d14:	f008 f8c7 	bl	800aea6 <HAL_I2CEx_ConfigDigitalFilter>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf14      	ite	ne
 8002d1e:	2301      	movne	r3, #1
 8002d20:	2300      	moveq	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8002d28:	f000 f9a2 	bl	8003070 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002d2c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002d30:	f008 f906 	bl	800af40 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	2000040c 	.word	0x2000040c
 8002d3c:	40005400 	.word	0x40005400
 8002d40:	4052060f 	.word	0x4052060f

08002d44 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b098      	sub	sp, #96	@ 0x60
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	611a      	str	r2, [r3, #16]
 8002d66:	615a      	str	r2, [r3, #20]
 8002d68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	2234      	movs	r2, #52	@ 0x34
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f00a fa87 	bl	800d284 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d76:	4b58      	ldr	r3, [pc, #352]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002d78:	4a58      	ldr	r2, [pc, #352]	@ (8002edc <_ZL12MX_TIM1_Initv+0x198>)
 8002d7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d7c:	4b56      	ldr	r3, [pc, #344]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002d82:	4b55      	ldr	r3, [pc, #340]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002d84:	2220      	movs	r2, #32
 8002d86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8002d88:	4b53      	ldr	r3, [pc, #332]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002d8a:	f242 1233 	movw	r2, #8499	@ 0x2133
 8002d8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d90:	4b51      	ldr	r3, [pc, #324]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8002d96:	4b50      	ldr	r3, [pc, #320]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002d9e:	2280      	movs	r2, #128	@ 0x80
 8002da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002da2:	484d      	ldr	r0, [pc, #308]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002da4:	f009 f8e4 	bl	800bf70 <HAL_TIM_PWM_Init>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf14      	ite	ne
 8002dae:	2301      	movne	r3, #1
 8002db0:	2300      	moveq	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8002db8:	f000 f95a 	bl	8003070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8002dc0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4841      	ldr	r0, [pc, #260]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002dd2:	f00a f811 	bl	800cdf8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <_ZL12MX_TIM1_Initv+0xa6>
  {
    Error_Handler();
 8002de6:	f000 f943 	bl	8003070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dea:	2360      	movs	r3, #96	@ 0x60
 8002dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df2:	2300      	movs	r3, #0
 8002df4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002df6:	2300      	movs	r3, #0
 8002df8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4832      	ldr	r0, [pc, #200]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002e10:	f009 fa18 	bl	800c244 <HAL_TIM_PWM_ConfigChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf14      	ite	ne
 8002e1a:	2301      	movne	r3, #1
 8002e1c:	2300      	moveq	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <_ZL12MX_TIM1_Initv+0xe4>
  {
    Error_Handler();
 8002e24:	f000 f924 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4829      	ldr	r0, [pc, #164]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002e32:	f009 fa07 	bl	800c244 <HAL_TIM_PWM_ConfigChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <_ZL12MX_TIM1_Initv+0x106>
  {
    Error_Handler();
 8002e46:	f000 f913 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e4e:	2208      	movs	r2, #8
 8002e50:	4619      	mov	r1, r3
 8002e52:	4821      	ldr	r0, [pc, #132]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002e54:	f009 f9f6 	bl	800c244 <HAL_TIM_PWM_ConfigChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf14      	ite	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	2300      	moveq	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8002e68:	f000 f902 	bl	8003070 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8002e6c:	481a      	ldr	r0, [pc, #104]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002e6e:	f00a f8ed 	bl	800d04c <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8002e7e:	2314      	movs	r3, #20
 8002e80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002e90:	2300      	movs	r3, #0
 8002e92:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	480a      	ldr	r0, [pc, #40]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002eb0:	f00a f838 	bl	800cf24 <HAL_TIMEx_ConfigBreakDeadTime>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bf14      	ite	ne
 8002eba:	2301      	movne	r3, #1
 8002ebc:	2300      	moveq	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 8002ec4:	f000 f8d4 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ec8:	4803      	ldr	r0, [pc, #12]	@ (8002ed8 <_ZL12MX_TIM1_Initv+0x194>)
 8002eca:	f001 fce3 	bl	8004894 <HAL_TIM_MspPostInit>

}
 8002ece:	bf00      	nop
 8002ed0:	3760      	adds	r7, #96	@ 0x60
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000520 	.word	0x20000520
 8002edc:	40012c00 	.word	0x40012c00

08002ee0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ee6:	4b16      	ldr	r3, [pc, #88]	@ (8002f40 <_ZL11MX_DMA_Initv+0x60>)
 8002ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eea:	4a15      	ldr	r2, [pc, #84]	@ (8002f40 <_ZL11MX_DMA_Initv+0x60>)
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ef2:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <_ZL11MX_DMA_Initv+0x60>)
 8002ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <_ZL11MX_DMA_Initv+0x60>)
 8002f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f02:	4a0f      	ldr	r2, [pc, #60]	@ (8002f40 <_ZL11MX_DMA_Initv+0x60>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <_ZL11MX_DMA_Initv+0x60>)
 8002f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	200b      	movs	r0, #11
 8002f1c:	f004 fcf3 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f20:	200b      	movs	r0, #11
 8002f22:	f004 fd0a 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	200c      	movs	r0, #12
 8002f2c:	f004 fceb 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002f30:	200c      	movs	r0, #12
 8002f32:	f004 fd02 	bl	800793a <HAL_NVIC_EnableIRQ>

}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000

08002f44 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	@ 0x28
 8002f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5a:	4b43      	ldr	r3, [pc, #268]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5e:	4a42      	ldr	r2, [pc, #264]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002f60:	f043 0304 	orr.w	r3, r3, #4
 8002f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f66:	4b40      	ldr	r3, [pc, #256]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f72:	4b3d      	ldr	r3, [pc, #244]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f76:	4a3c      	ldr	r2, [pc, #240]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002f78:	f043 0320 	orr.w	r3, r3, #32
 8002f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8a:	4b37      	ldr	r3, [pc, #220]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8e:	4a36      	ldr	r2, [pc, #216]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f96:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	4a30      	ldr	r2, [pc, #192]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fae:	4b2e      	ldr	r3, [pc, #184]	@ (8003068 <_ZL12MX_GPIO_Initv+0x124>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fc4:	f005 ffc2 	bl	8008f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fce:	4827      	ldr	r0, [pc, #156]	@ (800306c <_ZL12MX_GPIO_Initv+0x128>)
 8002fd0:	f005 ffbc 	bl	8008f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4820      	ldr	r0, [pc, #128]	@ (800306c <_ZL12MX_GPIO_Initv+0x128>)
 8002fec:	f005 fe2c 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002ff0:	230c      	movs	r3, #12
 8002ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003000:	230c      	movs	r3, #12
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4619      	mov	r1, r3
 800300a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800300e:	f005 fe1b 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8003012:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8003016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003018:	2301      	movs	r3, #1
 800301a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4619      	mov	r1, r3
 800302a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800302e:	f005 fe0b 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003032:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003038:	2301      	movs	r3, #1
 800303a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003040:	2300      	movs	r3, #0
 8003042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	4619      	mov	r1, r3
 800304a:	4808      	ldr	r0, [pc, #32]	@ (800306c <_ZL12MX_GPIO_Initv+0x128>)
 800304c:	f005 fdfc 	bl	8008c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	2100      	movs	r1, #0
 8003054:	2028      	movs	r0, #40	@ 0x28
 8003056:	f004 fc56 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800305a:	2028      	movs	r0, #40	@ 0x28
 800305c:	f004 fc6d 	bl	800793a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003060:	bf00      	nop
 8003062:	3728      	adds	r7, #40	@ 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	48000800 	.word	0x48000800

08003070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003074:	b672      	cpsid	i
}
 8003076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <Error_Handler+0x8>

0800307c <_ZN3AngD1Ev>:
class Ang {
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f842 	bl	8003110 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <_ZN6CanComD1Ev>:
class CanCom {
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f857 	bl	8003154 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10c      	bne.n	80030da <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d107      	bne.n	80030da <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanCom cancom(hfdcan1);
 80030ca:	490d      	ldr	r1, [pc, #52]	@ (8003100 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80030cc:	480d      	ldr	r0, [pc, #52]	@ (8003104 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80030ce:	f7fe f9bc 	bl	800144a <_ZN6CanComC1ER19FDCAN_HandleTypeDef>
Ang ang(hi2c1);
 80030d2:	490d      	ldr	r1, [pc, #52]	@ (8003108 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80030d4:	480d      	ldr	r0, [pc, #52]	@ (800310c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80030d6:	f7fd fd35 	bl	8000b44 <_ZN3AngC1ER19__I2C_HandleTypeDef>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d105      	bne.n	80030f6 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80030ea:	4808      	ldr	r0, [pc, #32]	@ (800310c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80030ec:	f7ff ffc6 	bl	800307c <_ZN3AngD1Ev>
CanCom cancom(hfdcan1);
 80030f0:	4804      	ldr	r0, [pc, #16]	@ (8003104 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80030f2:	f7ff ffd0 	bl	8003096 <_ZN6CanComD1Ev>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200003a8 	.word	0x200003a8
 8003104:	2000056c 	.word	0x2000056c
 8003108:	2000040c 	.word	0x2000040c
 800310c:	200005d4 	.word	0x200005d4

08003110 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe f89f 	bl	800125e <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003120:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f834 	bl	8003198 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE11get_deleterEv>
 8003130:	4604      	mov	r4, r0
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f83d 	bl	80031b2 <_ZSt4moveIRPN3Ang7AngDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8003138:	4603      	mov	r3, r0
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	4620      	mov	r0, r4
 8003140:	f000 f842 	bl	80031c8 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_>
	__ptr = pointer();
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
      }
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	bd90      	pop	{r4, r7, pc}

08003154 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fb69 	bl	8001836 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003164:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f83a 	bl	80031e8 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE11get_deleterEv>
 8003174:	4604      	mov	r4, r0
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f843 	bl	8003202 <_ZSt4moveIRPN6CanCom7CanDataEEONSt16remove_referenceIT_E4typeEOS5_>
 800317c:	4603      	mov	r3, r0
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	4620      	mov	r0, r4
 8003184:	f000 f848 	bl	8003218 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_>
	__ptr = pointer();
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
      }
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}

08003198 <_ZNSt10unique_ptrIN3Ang7AngDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f848 	bl	8003238 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE10_M_deleterEv>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <_ZSt4moveIRPN3Ang7AngDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <_ZNKSt14default_deleteIN3Ang7AngDataEEclEPS1_+0x18>
 80031d8:	2120      	movs	r1, #32
 80031da:	4618      	mov	r0, r3
 80031dc:	f009 ff6e 	bl	800d0bc <_ZdlPvj>
      }
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_ZNSt10unique_ptrIN6CanCom7CanDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f82d 	bl	8003252 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE10_M_deleterEv>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_ZSt4moveIRPN6CanCom7CanDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <_ZNKSt14default_deleteIN6CanCom7CanDataEEclEPS1_+0x18>
 8003228:	2124      	movs	r1, #36	@ 0x24
 800322a:	4618      	mov	r0, r3
 800322c:	f009 ff46 	bl	800d0bc <_ZdlPvj>
      }
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_ZNSt15__uniq_ptr_implIN3Ang7AngDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f812 	bl	800326c <_ZSt3getILj1EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003248:	4603      	mov	r3, r0
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <_ZNSt15__uniq_ptr_implIN6CanCom7CanDataESt14default_deleteIS1_EE10_M_deleterEv>:
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f811 	bl	8003284 <_ZSt3getILj1EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8003262:	4603      	mov	r3, r0
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <_ZSt3getILj1EJPN3Ang7AngDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f811 	bl	800329c <_ZSt12__get_helperILj1ESt14default_deleteIN3Ang7AngDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800327a:	4603      	mov	r3, r0
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <_ZSt3getILj1EJPN6CanCom7CanDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f811 	bl	80032b4 <_ZSt12__get_helperILj1ESt14default_deleteIN6CanCom7CanDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003292:	4603      	mov	r3, r0
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <_ZSt12__get_helperILj1ESt14default_deleteIN3Ang7AngDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f811 	bl	80032cc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEE7_M_headERS4_>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_ZSt12__get_helperILj1ESt14default_deleteIN6CanCom7CanDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f811 	bl	80032e4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEE7_M_headERS4_>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN3Ang7AngDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f811 	bl	80032fc <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EE7_M_headERS4_>
 80032da:	4603      	mov	r3, r0
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN6CanCom7CanDataEEEE7_M_headERS4_>:
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f810 	bl	8003312 <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EE7_M_headERS4_>
 80032f2:	4603      	mov	r3, r0
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <_ZNSt10_Head_baseILj1ESt14default_deleteIN3Ang7AngDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <_ZNSt10_Head_baseILj1ESt14default_deleteIN6CanCom7CanDataEELb1EE7_M_headERS4_>:
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <_GLOBAL__sub_I_hadc1>:
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
 800332c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003330:	2001      	movs	r0, #1
 8003332:	f7ff febd 	bl	80030b0 <_Z41__static_initialization_and_destruction_0ii>
 8003336:	bd80      	pop	{r7, pc}

08003338 <_GLOBAL__sub_D_hadc1>:
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
 800333c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003340:	2000      	movs	r0, #0
 8003342:	f7ff feb5 	bl	80030b0 <_Z41__static_initialization_and_destruction_0ii>
 8003346:	bd80      	pop	{r7, pc}

08003348 <_ZNK12ElecangCalib7getDataEv>:
public:
  ElecangCalib();
  
  void elecCalSeq();

  ElecangCalibData* getData() const { return data.get(); }
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe ff7c 	bl	8002250 <_ZNKSt10unique_ptrIN12ElecangCalib16ElecangCalibDataESt14default_deleteIS1_EE3getEv>
 8003358:	4603      	mov	r3, r0
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <_ZN11ModeControlC1Ev>:
extern UserTask usertask;
extern CanCom cancom;
extern Util util;
extern ElecangCalib elecangcalib;

ModeControl::ModeControl()
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<ModeControlData>()){}
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 f8c5 	bl	80034fc <_ZSt11make_uniqueIN11ModeControl15ModeControlDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	711a      	strb	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	60da      	str	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	751a      	strb	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <_ZN11ModeControl8modeCtrlEv>:


void ModeControl::modeCtrl(){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  float voltQRef_ = 0.0f;
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
  float voltDRef_ = 0.0f;
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
  
  refCtrl();
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f837 	bl	8003428 <_ZN11ModeControl7refCtrlEv>
  
  switch (s_drvMdRef) {
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	791b      	ldrb	r3, [r3, #4]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d81a      	bhi.n	80033f8 <_ZN11ModeControl8modeCtrlEv+0x58>
 80033c2:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <_ZN11ModeControl8modeCtrlEv+0x28>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033dd 	.word	0x080033dd
 80033cc:	080033eb 	.word	0x080033eb
 80033d0:	08003401 	.word	0x08003401
 80033d4:	08003401 	.word	0x08003401
 80033d8:	08003401 	.word	0x08003401
    case CTRLMODE_NONE:
      voltQRef_ = 0.0f;
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
      voltDRef_ = 0.0f;
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
      break;
 80033e8:	e00b      	b.n	8003402 <_ZN11ModeControl8modeCtrlEv+0x62>
    case CTRLMODE_VOLT:
      voltDRef_ = s_voltDRef;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	60bb      	str	r3, [r7, #8]
      voltQRef_ = s_voltQRef;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	60fb      	str	r3, [r7, #12]
      break;
 80033f6:	e004      	b.n	8003402 <_ZN11ModeControl8modeCtrlEv+0x62>
    case CTRLMODE_VEL:
      break;
    case CTRLMODE_POS:
      break;
    default:
      mode = CTRLMODE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	751a      	strb	r2, [r3, #20]
      break;
 80033fe:	e000      	b.n	8003402 <_ZN11ModeControl8modeCtrlEv+0x62>
      break;
 8003400:	bf00      	nop
  }
  
  data->voltDRef = voltDRef_;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f8b5 	bl	8003574 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEptEv>
 800340a:	4602      	mov	r2, r0
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	6053      	str	r3, [r2, #4]
  data->voltQRef = voltQRef_;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f8ae 	bl	8003574 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEptEv>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6093      	str	r3, [r2, #8]
  
}
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop

08003428 <_ZN11ModeControl7refCtrlEv>:

void ModeControl::refCtrl(){
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  Util::UtilData* utildata = util.getUtilData();
 8003430:	4819      	ldr	r0, [pc, #100]	@ (8003498 <_ZN11ModeControl7refCtrlEv+0x70>)
 8003432:	f7fe faa1 	bl	8001978 <_ZNK4Util11getUtilDataEv>
 8003436:	6178      	str	r0, [r7, #20]
  CanCom::CanData* candata = cancom.getData();
 8003438:	4818      	ldr	r0, [pc, #96]	@ (800349c <_ZN11ModeControl7refCtrlEv+0x74>)
 800343a:	f7fd fb75 	bl	8000b28 <_ZN6CanCom7getDataEv>
 800343e:	6138      	str	r0, [r7, #16]
  ElecangCalib::ElecangCalibData* elecangcalibdata = elecangcalib.getData();
 8003440:	4817      	ldr	r0, [pc, #92]	@ (80034a0 <_ZN11ModeControl7refCtrlEv+0x78>)
 8003442:	f7ff ff81 	bl	8003348 <_ZNK12ElecangCalib7getDataEv>
 8003446:	60f8      	str	r0, [r7, #12]

  if (usertask.servoCheck()) {
 8003448:	4816      	ldr	r0, [pc, #88]	@ (80034a4 <_ZN11ModeControl7refCtrlEv+0x7c>)
 800344a:	f001 fde9 	bl	8005020 <_ZN8UserTask10servoCheckEv>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01c      	beq.n	800348e <_ZN11ModeControl7refCtrlEv+0x66>
    // 電気角キャリブ
    if (utildata->eCalib) {
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00c      	beq.n	8003476 <_ZN11ModeControl7refCtrlEv+0x4e>
      s_drvMdRef = elecangcalibdata->drvMd;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	7a1a      	ldrb	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	711a      	strb	r2, [r3, #4]
      s_voltQRef = elecangcalibdata->voltQRef;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]
      s_voltDRef = 0.0f;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	60da      	str	r2, [r3, #12]
      s_drvMdRef = candata->drvMdRef;
      s_voltDRef = candata->voltDRef;
      s_voltQRef = candata->voltQRef;
    }
  }
 8003474:	e00b      	b.n	800348e <_ZN11ModeControl7refCtrlEv+0x66>
      s_drvMdRef = candata->drvMdRef;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	785a      	ldrb	r2, [r3, #1]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	711a      	strb	r2, [r3, #4]
      s_voltDRef = candata->voltDRef;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60da      	str	r2, [r3, #12]
      s_voltQRef = candata->voltQRef;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000658 	.word	0x20000658
 800349c:	2000056c 	.word	0x2000056c
 80034a0:	20000098 	.word	0x20000098
 80034a4:	20000650 	.word	0x20000650

080034a8 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f86a 	bl	800358c <_ZNKSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <_ZN11ModeControl15ModeControlDataC1Ev>:
  CTRLMODE_POS
} st_mode;

class ModeControl {
public:
  struct ModeControlData {
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	705a      	strb	r2, [r3, #1]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <_ZSt11make_uniqueIN11ModeControl15ModeControlDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8003504:	2010      	movs	r0, #16
 8003506:	f009 fddb 	bl	800d0c0 <_Znwj>
 800350a:	4603      	mov	r3, r0
 800350c:	461c      	mov	r4, r3
 800350e:	4622      	mov	r2, r4
 8003510:	2300      	movs	r3, #0
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	6053      	str	r3, [r2, #4]
 8003516:	6093      	str	r3, [r2, #8]
 8003518:	60d3      	str	r3, [r2, #12]
 800351a:	4620      	mov	r0, r4
 800351c:	f7ff ffd1 	bl	80034c2 <_ZN11ModeControl15ModeControlDataC1Ev>
 8003520:	4621      	mov	r1, r4
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f850 	bl	80035c8 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bd90      	pop	{r4, r7, pc}

08003530 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f853 	bl	80035e6 <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003540:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f858 	bl	8003600 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE11get_deleterEv>
 8003550:	4604      	mov	r4, r0
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f861 	bl	800361a <_ZSt4moveIRPN11ModeControl15ModeControlDataEEONSt16remove_referenceIT_E4typeEOS5_>
 8003558:	4603      	mov	r3, r0
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	4620      	mov	r0, r4
 8003560:	f000 f866 	bl	8003630 <_ZNKSt14default_deleteIN11ModeControl15ModeControlDataEEclEPS1_>
	__ptr = pointer();
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
      }
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}

08003574 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	return get();
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ff93 	bl	80034a8 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE3getEv>
 8003582:	4603      	mov	r3, r0
      }
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <_ZNKSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f85a 	bl	8003650 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800359c:	4603      	mov	r3, r0
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_ZNSt15__uniq_ptr_dataIN11ModeControl15ModeControlDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f856 	bl	800366a <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1EPS1_>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ffe6 	bl	80035a8 <_ZNSt15__uniq_ptr_dataIN11ModeControl15ModeControlDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f84e 	bl	8003692 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80035f6:	4603      	mov	r3, r0
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f84e 	bl	80036ac <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE10_M_deleterEv>
 8003610:	4603      	mov	r3, r0
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <_ZSt4moveIRPN11ModeControl15ModeControlDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <_ZNKSt14default_deleteIN11ModeControl15ModeControlDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <_ZNKSt14default_deleteIN11ModeControl15ModeControlDataEEclEPS1_+0x18>
 8003640:	2110      	movs	r1, #16
 8003642:	4618      	mov	r0, r3
 8003644:	f009 fd3a 	bl	800d0bc <_ZdlPvj>
      }
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f833 	bl	80036c6 <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8003660:	4603      	mov	r3, r0
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f831 	bl	80036de <_ZNSt5tupleIJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ffb2 	bl	80035e6 <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003682:	4602      	mov	r2, r0
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZSt3getILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f82b 	bl	80036f8 <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <_ZNSt15__uniq_ptr_implIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f82a 	bl	8003710 <_ZSt3getILj1EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80036bc:	4603      	mov	r3, r0
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f82a 	bl	8003728 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80036d4:	4603      	mov	r3, r0
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_ZNSt5tupleIJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f82a 	bl	8003742 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1Ev>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_ZSt12__get_helperILj0EPN11ModeControl15ModeControlDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f82e 	bl	8003762 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8003706:	4603      	mov	r3, r0
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_ZSt3getILj1EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f82f 	bl	800377c <_ZSt12__get_helperILj1ESt14default_deleteIN11ModeControl15ModeControlDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800371e:	4603      	mov	r3, r0
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f82e 	bl	8003794 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERKS3_>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f82d 	bl	80037aa <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEEC1Ev>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f835 	bl	80037c2 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EEC1Ev>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_ZNSt11_Tuple_implILj0EJPN11ModeControl15ModeControlDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f836 	bl	80037de <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERS3_>
 8003772:	4603      	mov	r3, r0
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <_ZSt12__get_helperILj1ESt14default_deleteIN11ModeControl15ModeControlDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f835 	bl	80037f4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEE7_M_headERS4_>
 800378a:	4603      	mov	r3, r0
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEEC1Ev>:
      _Tuple_impl()
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f82a 	bl	800380c <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EEC1Ev>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EEC1Ev>:
      constexpr _Head_base()
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <_ZNSt10_Head_baseILj0EPN11ModeControl15ModeControlDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN11ModeControl15ModeControlDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f810 	bl	8003822 <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EE7_M_headERS4_>
 8003802:	4603      	mov	r3, r0
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EEC1Ev>:
      constexpr _Head_base()
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <_ZNSt10_Head_baseILj1ESt14default_deleteIN11ModeControl15ModeControlDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <_ZN11ModeControlD1Ev>:
class ModeControl {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fe74 	bl	8003530 <_ZNSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EED1Ev>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <_Z41__static_initialization_and_destruction_0ii>:
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800386a:	4293      	cmp	r3, r2
 800386c:	d102      	bne.n	8003874 <_Z41__static_initialization_and_destruction_0ii+0x20>
ModeControl modecontrol;
 800386e:	4809      	ldr	r0, [pc, #36]	@ (8003894 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003870:	f7ff fd77 	bl	8003362 <_ZN11ModeControlC1Ev>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d107      	bne.n	800388a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003880:	4293      	cmp	r3, r2
 8003882:	d102      	bne.n	800388a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003884:	4803      	ldr	r0, [pc, #12]	@ (8003894 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003886:	f7ff ffd7 	bl	8003838 <_ZN11ModeControlD1Ev>
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000604 	.word	0x20000604

08003898 <_GLOBAL__sub_I_modecontrol>:
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
 800389c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80038a0:	2001      	movs	r0, #1
 80038a2:	f7ff ffd7 	bl	8003854 <_Z41__static_initialization_and_destruction_0ii>
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <_GLOBAL__sub_D_modecontrol>:
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7ff ffcf 	bl	8003854 <_Z41__static_initialization_and_destruction_0ii>
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_ZN6OutPwmC1Ev>:
#include "param.h"
#include "can_communication.h"

OutPwm outpwm;

OutPwm::OutPwm()
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
    : data(std::make_unique<outPwmData>()) {}
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a07      	ldr	r2, [pc, #28]	@ (80038f8 <_ZN6OutPwmC1Ev+0x40>)
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a06      	ldr	r2, [pc, #24]	@ (80038fc <_ZN6OutPwmC1Ev+0x44>)
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3314      	adds	r3, #20
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f8e0 	bl	8003aae <_ZSt11make_uniqueI10outPwmDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	3c23d70a 	.word	0x3c23d70a
 80038fc:	3f733333 	.word	0x3f733333

08003900 <_ZN6OutPwm3PonEv>:

void OutPwm::Pon(){
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  setReg(DUTY_BASE, DUTY_BASE, DUTY_BASE);
 8003908:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800390c:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8003910:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f81b 	bl	8003950 <_ZN6OutPwm6setRegEfff>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <_ZN6OutPwm4PoffEv>:

void OutPwm::Poff(){
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  TIM1->CCR1 = 0; 
 800392c:	4b07      	ldr	r3, [pc, #28]	@ (800394c <_ZN6OutPwm4PoffEv+0x28>)
 800392e:	2200      	movs	r2, #0
 8003930:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 0; 
 8003932:	4b06      	ldr	r3, [pc, #24]	@ (800394c <_ZN6OutPwm4PoffEv+0x28>)
 8003934:	2200      	movs	r2, #0
 8003936:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 0; 
 8003938:	4b04      	ldr	r3, [pc, #16]	@ (800394c <_ZN6OutPwm4PoffEv+0x28>)
 800393a:	2200      	movs	r2, #0
 800393c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40012c00 	.word	0x40012c00

08003950 <_ZN6OutPwm6setRegEfff>:

void OutPwm::setReg(float u, float v, float w){
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	ed87 0a02 	vstr	s0, [r7, #8]
 800395c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003960:	ed87 1a00 	vstr	s2, [r7]

  TIM1->CCR1 = (uint16_t)((1.0f - dutyGuard(u)) * (float)CCR_MAX);
 8003964:	ed97 0a02 	vldr	s0, [r7, #8]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f845 	bl	80039f8 <_ZN6OutPwm9dutyGuardEf>
 800396e:	eef0 7a40 	vmov.f32	s15, s0
 8003972:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800397a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80039f0 <_ZN6OutPwm6setRegEfff+0xa0>
 800397e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003986:	ee17 3a90 	vmov	r3, s15
 800398a:	b29a      	uxth	r2, r3
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <_ZN6OutPwm6setRegEfff+0xa4>)
 800398e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = (uint16_t)((1.0f - dutyGuard(v)) * (float)CCR_MAX);
 8003990:	ed97 0a01 	vldr	s0, [r7, #4]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f82f 	bl	80039f8 <_ZN6OutPwm9dutyGuardEf>
 800399a:	eef0 7a40 	vmov.f32	s15, s0
 800399e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80039f0 <_ZN6OutPwm6setRegEfff+0xa0>
 80039aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b2:	ee17 3a90 	vmov	r3, s15
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <_ZN6OutPwm6setRegEfff+0xa4>)
 80039ba:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = (uint16_t)((1.0f - dutyGuard(w)) * (float)CCR_MAX);
 80039bc:	ed97 0a00 	vldr	s0, [r7]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f819 	bl	80039f8 <_ZN6OutPwm9dutyGuardEf>
 80039c6:	eef0 7a40 	vmov.f32	s15, s0
 80039ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80039f0 <_ZN6OutPwm6setRegEfff+0xa0>
 80039d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039de:	ee17 3a90 	vmov	r3, s15
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	4b03      	ldr	r3, [pc, #12]	@ (80039f4 <_ZN6OutPwm6setRegEfff+0xa4>)
 80039e6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	4604cc00 	.word	0x4604cc00
 80039f4:	40012c00 	.word	0x40012c00

080039f8 <_ZN6OutPwm9dutyGuardEf>:


float OutPwm::dutyGuard(float _rawDuty){
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	ed87 0a00 	vstr	s0, [r7]
    float result = 0.0f;
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
    float sum = 0.0f;
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
    static float limp = 0.95f;
    static float limm = 0.01f;
    
    sum = (_rawDuty / VOLT_PBM) + DUTY_BASE;
 8003a10:	ed97 7a00 	vldr	s14, [r7]
 8003a14:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a1c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003a20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a24:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (sum > limp){
 8003a28:	4b13      	ldr	r3, [pc, #76]	@ (8003a78 <_ZN6OutPwm9dutyGuardEf+0x80>)
 8003a2a:	edd3 7a00 	vldr	s15, [r3]
 8003a2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3a:	dd03      	ble.n	8003a44 <_ZN6OutPwm9dutyGuardEf+0x4c>
        result = limp;
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <_ZN6OutPwm9dutyGuardEf+0x80>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e00f      	b.n	8003a64 <_ZN6OutPwm9dutyGuardEf+0x6c>
    }else if(sum < limm){
 8003a44:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <_ZN6OutPwm9dutyGuardEf+0x84>)
 8003a46:	edd3 7a00 	vldr	s15, [r3]
 8003a4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a56:	d503      	bpl.n	8003a60 <_ZN6OutPwm9dutyGuardEf+0x68>
        result = limm;
 8003a58:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <_ZN6OutPwm9dutyGuardEf+0x84>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e001      	b.n	8003a64 <_ZN6OutPwm9dutyGuardEf+0x6c>
    }else{
        result = sum;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	60fb      	str	r3, [r7, #12]
    }
    return result;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	ee07 3a90 	vmov	s15, r3
}
 8003a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	20000004 	.word	0x20000004
 8003a7c:	20000008 	.word	0x20000008

08003a80 <_ZN10outPwmDataC1Ev>:
#include <memory>
#include "main.h"
#include "user_math.h"


struct outPwmData {
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <_ZSt11make_uniqueI10outPwmDataJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8003aae:	b590      	push	{r4, r7, lr}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8003ab6:	200c      	movs	r0, #12
 8003ab8:	f009 fb02 	bl	800d0c0 <_Znwj>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461c      	mov	r4, r3
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	6063      	str	r3, [r4, #4]
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	60a3      	str	r3, [r4, #8]
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f7ff ffd4 	bl	8003a80 <_ZN10outPwmDataC1Ev>
 8003ad8:	4621      	mov	r1, r4
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f836 	bl	8003b4c <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd90      	pop	{r4, r7, pc}

08003ae8 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f839 	bl	8003b6a <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE6_M_ptrEv>
 8003af8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f83e 	bl	8003b84 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EE11get_deleterEv>
 8003b08:	4604      	mov	r4, r0
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f847 	bl	8003b9e <_ZSt4moveIRP10outPwmDataEONSt16remove_referenceIT_E4typeEOS4_>
 8003b10:	4603      	mov	r3, r0
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4619      	mov	r1, r3
 8003b16:	4620      	mov	r0, r4
 8003b18:	f000 f84c 	bl	8003bb4 <_ZNKSt14default_deleteI10outPwmDataEclEPS0_>
	__ptr = pointer();
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
      }
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd90      	pop	{r4, r7, pc}

08003b2c <_ZNSt15__uniq_ptr_dataI10outPwmDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f849 	bl	8003bd4 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EEC1EPS0_>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ffe6 	bl	8003b2c <_ZNSt15__uniq_ptr_dataI10outPwmDataSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 f841 	bl	8003bfc <_ZSt3getILj0EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f841 	bl	8003c16 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE10_M_deleterEv>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <_ZSt4moveIRP10outPwmDataEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <_ZNKSt14default_deleteI10outPwmDataEclEPS0_>:
      operator()(_Tp* __ptr) const
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <_ZNKSt14default_deleteI10outPwmDataEclEPS0_+0x18>
 8003bc4:	210c      	movs	r1, #12
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f009 fa78 	bl	800d0bc <_ZdlPvj>
      }
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f825 	bl	8003c30 <_ZNSt5tupleIJP10outPwmDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ffbf 	bl	8003b6a <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE6_M_ptrEv>
 8003bec:	4602      	mov	r2, r0
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <_ZSt3getILj0EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f81f 	bl	8003c4a <_ZSt12__get_helperILj0EP10outPwmDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <_ZNSt15__uniq_ptr_implI10outPwmDataSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f81e 	bl	8003c62 <_ZSt3getILj1EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_ZNSt5tupleIJP10outPwmDataSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f81d 	bl	8003c7a <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEEC1Ev>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZSt12__get_helperILj0EP10outPwmDataJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f821 	bl	8003c9a <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEE7_M_headERS4_>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <_ZSt3getILj1EJP10outPwmDataSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f822 	bl	8003cb4 <_ZSt12__get_helperILj1ESt14default_deleteI10outPwmDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f822 	bl	8003ccc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEEC1Ev>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f82a 	bl	8003ce4 <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EEC1Ev>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <_ZNSt11_Tuple_implILj0EJP10outPwmDataSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 f82b 	bl	8003d00 <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EE7_M_headERS2_>
 8003caa:	4603      	mov	r3, r0
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <_ZSt12__get_helperILj1ESt14default_deleteI10outPwmDataEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f82a 	bl	8003d16 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEE7_M_headERS3_>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEEC1Ev>:
      _Tuple_impl()
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f82a 	bl	8003d2e <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EEC1Ev>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EEC1Ev>:
      constexpr _Head_base()
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <_ZNSt10_Head_baseILj0EP10outPwmDataLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10outPwmDataEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f810 	bl	8003d44 <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EE7_M_headERS3_>
 8003d24:	4603      	mov	r3, r0
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EEC1Ev>:
      constexpr _Head_base()
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <_ZNSt10_Head_baseILj1ESt14default_deleteI10outPwmDataELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <_ZN6OutPwmD1Ev>:
  float dutyU = 0.0f;
  float dutyV = 0.0f;
  float dutyW = 0.0f;
};

class OutPwm{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3314      	adds	r3, #20
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff febe 	bl	8003ae8 <_ZNSt10unique_ptrI10outPwmDataSt14default_deleteIS0_EED1Ev>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <_Z41__static_initialization_and_destruction_0ii>:
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d107      	bne.n	8003d98 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d102      	bne.n	8003d98 <_Z41__static_initialization_and_destruction_0ii+0x20>
OutPwm outpwm;
 8003d92:	4809      	ldr	r0, [pc, #36]	@ (8003db8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003d94:	f7ff fd90 	bl	80038b8 <_ZN6OutPwmC1Ev>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d107      	bne.n	8003dae <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d102      	bne.n	8003dae <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003da8:	4803      	ldr	r0, [pc, #12]	@ (8003db8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003daa:	f7ff ffd6 	bl	8003d5a <_ZN6OutPwmD1Ev>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	2000061c 	.word	0x2000061c

08003dbc <_GLOBAL__sub_I_outpwm>:
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	f7ff ffd7 	bl	8003d78 <_Z41__static_initialization_and_destruction_0ii>
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <_GLOBAL__sub_D_outpwm>:
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7ff ffcf 	bl	8003d78 <_Z41__static_initialization_and_destruction_0ii>
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_ZN7SensCurC1Ev>:
#define ADC_TO_CUR(U2_V, U2_OFFS) (((float)((int16_t)U2_V - (int16_t)U2_OFFS)) * ADGAIN) /* アンプからモータへの電流流し込みでプラス */

SensCur senscur;
extern OutPwm outpwm;

SensCur::SensCur()
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<SensCurData>()) {}
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f906 	bl	8003ff8 <_ZSt11make_uniqueIN7SensCur11SensCurDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	819a      	strh	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	81da      	strh	r2, [r3, #14]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <_ZN7SensCur9getRawCurEv>:
  
void SensCur::getRawCur() {
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  rawCurU = ADC1 -> JDR1;
 8003e18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	819a      	strh	r2, [r3, #12]
  rawCurW = ADC2 -> JDR1;
 8003e26:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <_ZN7SensCur9getRawCurEv+0x30>)
 8003e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	81da      	strh	r2, [r3, #14]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	50000100 	.word	0x50000100

08003e44 <_ZN7SensCur9sensCurINEv>:

void SensCur::sensCurIN() {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	ed2d 8b02 	vpush	{d8}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  getRawCur();
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ffdd 	bl	8003e10 <_ZN7SensCur9getRawCurEv>
  
  data->curU = ADC_TO_CUR(rawCurU, curOffsU);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	899b      	ldrh	r3, [r3, #12]
 8003e5a:	b21b      	sxth	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b21b      	sxth	r3, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f900 	bl	8004076 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8003e76:	4603      	mov	r3, r0
 8003e78:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8003ef0 <_ZN7SensCur9sensCurINEv+0xac>
 8003e7c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e80:	edc3 7a00 	vstr	s15, [r3]
  data->curW = ADC_TO_CUR(rawCurW, curOffsW);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	89db      	ldrh	r3, [r3, #14]
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f8e9 	bl	8004076 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8003ef0 <_ZN7SensCur9sensCurINEv+0xac>
 8003eaa:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003eae:	edc3 7a02 	vstr	s15, [r3, #8]
  

  // V相電流はIu + Iv + Iw = 0より計算
  data->curV = -data->curU - data->curW;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f8de 	bl	8004076 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	eef1 8a67 	vneg.f32	s17, s15
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f8d5 	bl	8004076 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	ed93 8a02 	vldr	s16, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f8ce 	bl	8004076 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>
 8003eda:	4603      	mov	r3, r0
 8003edc:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8003ee0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	ecbd 8b02 	vpop	{d8}
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	3b840842 	.word	0x3b840842

08003ef4 <_ZN7SensCur11sensCurInitEv>:

bool SensCur::sensCurInit() {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  static SeqID_t seqID = STEP00;
  static bool _getReady = false;
  static uint16_t _calcount = 0;
  
  switch (seqID) {
 8003efc:	4b28      	ldr	r3, [pc, #160]	@ (8003fa0 <_ZN7SensCur11sensCurInitEv+0xac>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d03d      	beq.n	8003f80 <_ZN7SensCur11sensCurInitEv+0x8c>
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	dc41      	bgt.n	8003f8c <_ZN7SensCur11sensCurInitEv+0x98>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <_ZN7SensCur11sensCurInitEv+0x1e>
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d007      	beq.n	8003f20 <_ZN7SensCur11sensCurInitEv+0x2c>
 8003f10:	e03c      	b.n	8003f8c <_ZN7SensCur11sensCurInitEv+0x98>
    case STEP00:
      // ServoON
      outpwm.Pon();
 8003f12:	4824      	ldr	r0, [pc, #144]	@ (8003fa4 <_ZN7SensCur11sensCurInitEv+0xb0>)
 8003f14:	f7ff fcf4 	bl	8003900 <_ZN6OutPwm3PonEv>
      seqID = STEP01;
 8003f18:	4b21      	ldr	r3, [pc, #132]	@ (8003fa0 <_ZN7SensCur11sensCurInitEv+0xac>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
      break;
 8003f1e:	e039      	b.n	8003f94 <_ZN7SensCur11sensCurInitEv+0xa0>
    case STEP01:
      // キャリブレーション
      if (_calcount < CALCOUNT) {
 8003f20:	4b21      	ldr	r3, [pc, #132]	@ (8003fa8 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	2b63      	cmp	r3, #99	@ 0x63
 8003f26:	d817      	bhi.n	8003f58 <_ZN7SensCur11sensCurInitEv+0x64>
        getRawCur();
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff71 	bl	8003e10 <_ZN7SensCur9getRawCurEv>
        curOffsU += rawCurU;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	8992      	ldrh	r2, [r2, #12]
 8003f36:	441a      	add	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]
        curOffsW += rawCurW;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	89d2      	ldrh	r2, [r2, #14]
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	609a      	str	r2, [r3, #8]
        _calcount++;
 8003f4a:	4b17      	ldr	r3, [pc, #92]	@ (8003fa8 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	4b15      	ldr	r3, [pc, #84]	@ (8003fa8 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8003f54:	801a      	strh	r2, [r3, #0]
      } else {
        curOffsU /= _calcount;
        curOffsW /= _calcount;
        seqID = STEP02;
      }
      break;
 8003f56:	e01d      	b.n	8003f94 <_ZN7SensCur11sensCurInitEv+0xa0>
        curOffsU /= _calcount;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8003f5e:	8812      	ldrh	r2, [r2, #0]
 8003f60:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	605a      	str	r2, [r3, #4]
        curOffsW /= _calcount;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa8 <_ZN7SensCur11sensCurInitEv+0xb4>)
 8003f6e:	8812      	ldrh	r2, [r2, #0]
 8003f70:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	609a      	str	r2, [r3, #8]
        seqID = STEP02;
 8003f78:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <_ZN7SensCur11sensCurInitEv+0xac>)
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	701a      	strb	r2, [r3, #0]
      break;
 8003f7e:	e009      	b.n	8003f94 <_ZN7SensCur11sensCurInitEv+0xa0>
    case STEP02:
      // キャリブ完了
      outpwm.Poff();
 8003f80:	4808      	ldr	r0, [pc, #32]	@ (8003fa4 <_ZN7SensCur11sensCurInitEv+0xb0>)
 8003f82:	f7ff fccf 	bl	8003924 <_ZN6OutPwm4PoffEv>
      _getReady = true;
 8003f86:	4b09      	ldr	r3, [pc, #36]	@ (8003fac <_ZN7SensCur11sensCurInitEv+0xb8>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	701a      	strb	r2, [r3, #0]
    default:
      seqID = STEP00;
 8003f8c:	4b04      	ldr	r3, [pc, #16]	@ (8003fa0 <_ZN7SensCur11sensCurInitEv+0xac>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
      break;
 8003f92:	bf00      	nop
  }
  return _getReady;
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <_ZN7SensCur11sensCurInitEv+0xb8>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000644 	.word	0x20000644
 8003fa4:	2000061c 	.word	0x2000061c
 8003fa8:	20000646 	.word	0x20000646
 8003fac:	20000645 	.word	0x20000645

08003fb0 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f867 	bl	800408e <_ZNKSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <_ZN7SensCur11SensCurDataC1Ev>:

#include "main.h"

class SensCur {
public:
  struct SensCurData {
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <_ZSt11make_uniqueIN7SensCur11SensCurDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8004000:	200c      	movs	r0, #12
 8004002:	f009 f85d 	bl	800d0c0 <_Znwj>
 8004006:	4603      	mov	r3, r0
 8004008:	461c      	mov	r4, r3
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	6023      	str	r3, [r4, #0]
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	6063      	str	r3, [r4, #4]
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	60a3      	str	r3, [r4, #8]
 800401c:	4620      	mov	r0, r4
 800401e:	f7ff ffd4 	bl	8003fca <_ZN7SensCur11SensCurDataC1Ev>
 8004022:	4621      	mov	r1, r4
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f850 	bl	80040ca <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}

08004032 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8004032:	b590      	push	{r4, r7, lr}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f853 	bl	80040e8 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8004042:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00c      	beq.n	8004066 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f858 	bl	8004102 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE11get_deleterEv>
 8004052:	4604      	mov	r4, r0
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f861 	bl	800411c <_ZSt4moveIRPN7SensCur11SensCurDataEEONSt16remove_referenceIT_E4typeEOS5_>
 800405a:	4603      	mov	r3, r0
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4619      	mov	r1, r3
 8004060:	4620      	mov	r0, r4
 8004062:	f000 f866 	bl	8004132 <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_>
	__ptr = pointer();
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
      }
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bd90      	pop	{r4, r7, pc}

08004076 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
	return get();
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff ff96 	bl	8003fb0 <_ZNKSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE3getEv>
 8004084:	4603      	mov	r3, r0
      }
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <_ZNKSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 f85a 	bl	8004152 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800409e:	4603      	mov	r3, r0
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <_ZNSt15__uniq_ptr_dataIN7SensCur11SensCurDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	4611      	mov	r1, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f856 	bl	800416c <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1EPS1_>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6839      	ldr	r1, [r7, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ffe6 	bl	80040aa <_ZNSt15__uniq_ptr_dataIN7SensCur11SensCurDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f84e 	bl	8004194 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80040f8:	4603      	mov	r3, r0
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f84e 	bl	80041ae <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE10_M_deleterEv>
 8004112:	4603      	mov	r3, r0
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <_ZSt4moveIRPN7SensCur11SensCurDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <_ZNKSt14default_deleteIN7SensCur11SensCurDataEEclEPS1_+0x18>
 8004142:	210c      	movs	r1, #12
 8004144:	4618      	mov	r0, r3
 8004146:	f008 ffb9 	bl	800d0bc <_ZdlPvj>
      }
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f833 	bl	80041c8 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8004162:	4603      	mov	r3, r0
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	f000 f831 	bl	80041e0 <_ZNSt5tupleIJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ffb2 	bl	80040e8 <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE6_M_ptrEv>
 8004184:	4602      	mov	r2, r0
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_ZSt3getILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f82b 	bl	80041fa <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80041a4:	4603      	mov	r3, r0
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <_ZNSt15__uniq_ptr_implIN7SensCur11SensCurDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f82a 	bl	8004212 <_ZSt3getILj1EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80041be:	4603      	mov	r3, r0
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f82a 	bl	800422a <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERKS5_>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_ZNSt5tupleIJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f82a 	bl	8004244 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1Ev>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <_ZSt12__get_helperILj0EPN7SensCur11SensCurDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f82e 	bl	8004264 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERS5_>
 8004208:	4603      	mov	r3, r0
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_ZSt3getILj1EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f82f 	bl	800427e <_ZSt12__get_helperILj1ESt14default_deleteIN7SensCur11SensCurDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004220:	4603      	mov	r3, r0
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f82e 	bl	8004296 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERKS3_>
 800423a:	4603      	mov	r3, r0
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f82d 	bl	80042ac <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEEC1Ev>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f835 	bl	80042c4 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EEC1Ev>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <_ZNSt11_Tuple_implILj0EJPN7SensCur11SensCurDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f836 	bl	80042e0 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERS3_>
 8004274:	4603      	mov	r3, r0
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <_ZSt12__get_helperILj1ESt14default_deleteIN7SensCur11SensCurDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f835 	bl	80042f6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEE7_M_headERS4_>
 800428c:	4603      	mov	r3, r0
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEEC1Ev>:
      _Tuple_impl()
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f82a 	bl	800430e <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EEC1Ev>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EEC1Ev>:
      constexpr _Head_base()
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <_ZNSt10_Head_baseILj0EPN7SensCur11SensCurDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN7SensCur11SensCurDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f810 	bl	8004324 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EE7_M_headERS4_>
 8004304:	4603      	mov	r3, r0
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EEC1Ev>:
      constexpr _Head_base()
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <_ZNSt10_Head_baseILj1ESt14default_deleteIN7SensCur11SensCurDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <_ZN7SensCurD1Ev>:
class SensCur {
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fe74 	bl	8004032 <_ZNSt10unique_ptrIN7SensCur11SensCurDataESt14default_deleteIS1_EED1Ev>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_Z41__static_initialization_and_destruction_0ii>:

bool SensCur::adjustCur() {
  
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d107      	bne.n	8004374 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800436a:	4293      	cmp	r3, r2
 800436c:	d102      	bne.n	8004374 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensCur senscur;
 800436e:	4809      	ldr	r0, [pc, #36]	@ (8004394 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004370:	f7ff fd34 	bl	8003ddc <_ZN7SensCurC1Ev>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d107      	bne.n	800438a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004380:	4293      	cmp	r3, r2
 8004382:	d102      	bne.n	800438a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004384:	4803      	ldr	r0, [pc, #12]	@ (8004394 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004386:	f7ff ffd8 	bl	800433a <_ZN7SensCurD1Ev>
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000634 	.word	0x20000634

08004398 <_GLOBAL__sub_I_senscur>:
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
 800439c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80043a0:	2001      	movs	r0, #1
 80043a2:	f7ff ffd7 	bl	8004354 <_Z41__static_initialization_and_destruction_0ii>
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <_GLOBAL__sub_D_senscur>:
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80043b0:	2000      	movs	r0, #0
 80043b2:	f7ff ffcf 	bl	8004354 <_Z41__static_initialization_and_destruction_0ii>
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043be:	4b0f      	ldr	r3, [pc, #60]	@ (80043fc <HAL_MspInit+0x44>)
 80043c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c2:	4a0e      	ldr	r2, [pc, #56]	@ (80043fc <HAL_MspInit+0x44>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80043ca:	4b0c      	ldr	r3, [pc, #48]	@ (80043fc <HAL_MspInit+0x44>)
 80043cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	607b      	str	r3, [r7, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043d6:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <HAL_MspInit+0x44>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <HAL_MspInit+0x44>)
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043e2:	4b06      	ldr	r3, [pc, #24]	@ (80043fc <HAL_MspInit+0x44>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80043ee:	f006 fe6b 	bl	800b0c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000

08004400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b0a0      	sub	sp, #128	@ 0x80
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004408:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004418:	f107 0318 	add.w	r3, r7, #24
 800441c:	2254      	movs	r2, #84	@ 0x54
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f008 ff2f 	bl	800d284 <memset>
  if(hadc->Instance==ADC1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800442e:	d146      	bne.n	80044be <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004434:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004436:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800443a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800443c:	f107 0318 	add.w	r3, r7, #24
 8004440:	4618      	mov	r0, r3
 8004442:	f007 fb47 	bl	800bad4 <HAL_RCCEx_PeriphCLKConfig>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800444c:	f7fe fe10 	bl	8003070 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004450:	4b42      	ldr	r3, [pc, #264]	@ (800455c <HAL_ADC_MspInit+0x15c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3301      	adds	r3, #1
 8004456:	4a41      	ldr	r2, [pc, #260]	@ (800455c <HAL_ADC_MspInit+0x15c>)
 8004458:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800445a:	4b40      	ldr	r3, [pc, #256]	@ (800455c <HAL_ADC_MspInit+0x15c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10b      	bne.n	800447a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004462:	4b3f      	ldr	r3, [pc, #252]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 8004464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004466:	4a3e      	ldr	r2, [pc, #248]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 8004468:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800446c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800446e:	4b3c      	ldr	r3, [pc, #240]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 8004470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800447a:	4b39      	ldr	r3, [pc, #228]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447e:	4a38      	ldr	r2, [pc, #224]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004486:	4b36      	ldr	r3, [pc, #216]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 8004488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004492:	2301      	movs	r3, #1
 8004494:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004496:	2303      	movs	r3, #3
 8004498:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449a:	2300      	movs	r3, #0
 800449c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800449e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80044a2:	4619      	mov	r1, r3
 80044a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044a8:	f004 fbce 	bl	8008c48 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80044ac:	2200      	movs	r2, #0
 80044ae:	2100      	movs	r1, #0
 80044b0:	2012      	movs	r0, #18
 80044b2:	f003 fa28 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80044b6:	2012      	movs	r0, #18
 80044b8:	f003 fa3f 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80044bc:	e04a      	b.n	8004554 <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a28      	ldr	r2, [pc, #160]	@ (8004564 <HAL_ADC_MspInit+0x164>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d145      	bne.n	8004554 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80044c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80044ce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80044d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044d4:	f107 0318 	add.w	r3, r7, #24
 80044d8:	4618      	mov	r0, r3
 80044da:	f007 fafb 	bl	800bad4 <HAL_RCCEx_PeriphCLKConfig>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80044e4:	f7fe fdc4 	bl	8003070 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80044e8:	4b1c      	ldr	r3, [pc, #112]	@ (800455c <HAL_ADC_MspInit+0x15c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	4a1b      	ldr	r2, [pc, #108]	@ (800455c <HAL_ADC_MspInit+0x15c>)
 80044f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80044f2:	4b1a      	ldr	r3, [pc, #104]	@ (800455c <HAL_ADC_MspInit+0x15c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10b      	bne.n	8004512 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80044fa:	4b19      	ldr	r3, [pc, #100]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 80044fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fe:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 8004500:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004506:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 8004508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004512:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 8004514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004516:	4a12      	ldr	r2, [pc, #72]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800451e:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <HAL_ADC_MspInit+0x160>)
 8004520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800452a:	23c2      	movs	r3, #194	@ 0xc2
 800452c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800452e:	2303      	movs	r3, #3
 8004530:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004536:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800453a:	4619      	mov	r1, r3
 800453c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004540:	f004 fb82 	bl	8008c48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004544:	2200      	movs	r2, #0
 8004546:	2100      	movs	r1, #0
 8004548:	2012      	movs	r0, #18
 800454a:	f003 f9dc 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800454e:	2012      	movs	r0, #18
 8004550:	f003 f9f3 	bl	800793a <HAL_NVIC_EnableIRQ>
}
 8004554:	bf00      	nop
 8004556:	3780      	adds	r7, #128	@ 0x80
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000648 	.word	0x20000648
 8004560:	40021000 	.word	0x40021000
 8004564:	50000100 	.word	0x50000100

08004568 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <HAL_CORDIC_MspInit+0x38>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10b      	bne.n	8004592 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800457a:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <HAL_CORDIC_MspInit+0x3c>)
 800457c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800457e:	4a09      	ldr	r2, [pc, #36]	@ (80045a4 <HAL_CORDIC_MspInit+0x3c>)
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	6493      	str	r3, [r2, #72]	@ 0x48
 8004586:	4b07      	ldr	r3, [pc, #28]	@ (80045a4 <HAL_CORDIC_MspInit+0x3c>)
 8004588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40020c00 	.word	0x40020c00
 80045a4:	40021000 	.word	0x40021000

080045a8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b09e      	sub	sp, #120	@ 0x78
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045c0:	f107 0310 	add.w	r3, r7, #16
 80045c4:	2254      	movs	r2, #84	@ 0x54
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f008 fe5b 	bl	800d284 <memset>
  if(hfdcan->Instance==FDCAN1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004688 <HAL_FDCAN_MspInit+0xe0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d153      	bne.n	8004680 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80045d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80045de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045e2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045e4:	f107 0310 	add.w	r3, r7, #16
 80045e8:	4618      	mov	r0, r3
 80045ea:	f007 fa73 	bl	800bad4 <HAL_RCCEx_PeriphCLKConfig>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80045f4:	f7fe fd3c 	bl	8003070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80045f8:	4b24      	ldr	r3, [pc, #144]	@ (800468c <HAL_FDCAN_MspInit+0xe4>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fc:	4a23      	ldr	r2, [pc, #140]	@ (800468c <HAL_FDCAN_MspInit+0xe4>)
 80045fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004602:	6593      	str	r3, [r2, #88]	@ 0x58
 8004604:	4b21      	ldr	r3, [pc, #132]	@ (800468c <HAL_FDCAN_MspInit+0xe4>)
 8004606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004610:	4b1e      	ldr	r3, [pc, #120]	@ (800468c <HAL_FDCAN_MspInit+0xe4>)
 8004612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004614:	4a1d      	ldr	r2, [pc, #116]	@ (800468c <HAL_FDCAN_MspInit+0xe4>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800461c:	4b1b      	ldr	r3, [pc, #108]	@ (800468c <HAL_FDCAN_MspInit+0xe4>)
 800461e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004628:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800462c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462e:	2302      	movs	r3, #2
 8004630:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004632:	2301      	movs	r3, #1
 8004634:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004636:	2303      	movs	r3, #3
 8004638:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800463a:	2309      	movs	r3, #9
 800463c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800463e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004642:	4619      	mov	r1, r3
 8004644:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004648:	f004 fafe 	bl	8008c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800464c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004650:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004652:	2302      	movs	r3, #2
 8004654:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004656:	2300      	movs	r3, #0
 8004658:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800465a:	2303      	movs	r3, #3
 800465c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800465e:	2309      	movs	r3, #9
 8004660:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004662:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004666:	4619      	mov	r1, r3
 8004668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800466c:	f004 faec 	bl	8008c48 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004670:	2200      	movs	r2, #0
 8004672:	2100      	movs	r1, #0
 8004674:	2015      	movs	r0, #21
 8004676:	f003 f946 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800467a:	2015      	movs	r0, #21
 800467c:	f003 f95d 	bl	800793a <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8004680:	bf00      	nop
 8004682:	3778      	adds	r7, #120	@ 0x78
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40006400 	.word	0x40006400
 800468c:	40021000 	.word	0x40021000

08004690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b0a0      	sub	sp, #128	@ 0x80
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046a8:	f107 0318 	add.w	r3, r7, #24
 80046ac:	2254      	movs	r2, #84	@ 0x54
 80046ae:	2100      	movs	r1, #0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f008 fde7 	bl	800d284 <memset>
  if(hi2c->Instance==I2C1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a5f      	ldr	r2, [pc, #380]	@ (8004838 <HAL_I2C_MspInit+0x1a8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	f040 80b6 	bne.w	800482e <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80046c2:	2340      	movs	r3, #64	@ 0x40
 80046c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80046c6:	2300      	movs	r3, #0
 80046c8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046ca:	f107 0318 	add.w	r3, r7, #24
 80046ce:	4618      	mov	r0, r3
 80046d0:	f007 fa00 	bl	800bad4 <HAL_RCCEx_PeriphCLKConfig>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80046da:	f7fe fcc9 	bl	8003070 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046de:	4b57      	ldr	r3, [pc, #348]	@ (800483c <HAL_I2C_MspInit+0x1ac>)
 80046e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046e2:	4a56      	ldr	r2, [pc, #344]	@ (800483c <HAL_I2C_MspInit+0x1ac>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046ea:	4b54      	ldr	r3, [pc, #336]	@ (800483c <HAL_I2C_MspInit+0x1ac>)
 80046ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f6:	4b51      	ldr	r3, [pc, #324]	@ (800483c <HAL_I2C_MspInit+0x1ac>)
 80046f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fa:	4a50      	ldr	r2, [pc, #320]	@ (800483c <HAL_I2C_MspInit+0x1ac>)
 80046fc:	f043 0302 	orr.w	r3, r3, #2
 8004700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004702:	4b4e      	ldr	r3, [pc, #312]	@ (800483c <HAL_I2C_MspInit+0x1ac>)
 8004704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800470e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004712:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004714:	2312      	movs	r3, #18
 8004716:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	2300      	movs	r3, #0
 800471a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471c:	2300      	movs	r3, #0
 800471e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004720:	2304      	movs	r3, #4
 8004722:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004724:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004728:	4619      	mov	r1, r3
 800472a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800472e:	f004 fa8b 	bl	8008c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004732:	2380      	movs	r3, #128	@ 0x80
 8004734:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004736:	2312      	movs	r3, #18
 8004738:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473a:	2300      	movs	r3, #0
 800473c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473e:	2300      	movs	r3, #0
 8004740:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004742:	2304      	movs	r3, #4
 8004744:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004746:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800474a:	4619      	mov	r1, r3
 800474c:	483c      	ldr	r0, [pc, #240]	@ (8004840 <HAL_I2C_MspInit+0x1b0>)
 800474e:	f004 fa7b 	bl	8008c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004752:	4b3a      	ldr	r3, [pc, #232]	@ (800483c <HAL_I2C_MspInit+0x1ac>)
 8004754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004756:	4a39      	ldr	r2, [pc, #228]	@ (800483c <HAL_I2C_MspInit+0x1ac>)
 8004758:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800475c:	6593      	str	r3, [r2, #88]	@ 0x58
 800475e:	4b37      	ldr	r3, [pc, #220]	@ (800483c <HAL_I2C_MspInit+0x1ac>)
 8004760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 800476a:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 800476c:	4a36      	ldr	r2, [pc, #216]	@ (8004848 <HAL_I2C_MspInit+0x1b8>)
 800476e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8004770:	4b34      	ldr	r3, [pc, #208]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 8004772:	2210      	movs	r2, #16
 8004774:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004776:	4b33      	ldr	r3, [pc, #204]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 8004778:	2200      	movs	r2, #0
 800477a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800477c:	4b31      	ldr	r3, [pc, #196]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 800477e:	2200      	movs	r2, #0
 8004780:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004782:	4b30      	ldr	r3, [pc, #192]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 8004784:	2280      	movs	r2, #128	@ 0x80
 8004786:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004788:	4b2e      	ldr	r3, [pc, #184]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 800478a:	2200      	movs	r2, #0
 800478c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800478e:	4b2d      	ldr	r3, [pc, #180]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 8004790:	2200      	movs	r2, #0
 8004792:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004794:	4b2b      	ldr	r3, [pc, #172]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 8004796:	2200      	movs	r2, #0
 8004798:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800479a:	4b2a      	ldr	r3, [pc, #168]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 800479c:	2200      	movs	r2, #0
 800479e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80047a0:	4828      	ldr	r0, [pc, #160]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 80047a2:	f003 f8e5 	bl	8007970 <HAL_DMA_Init>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 80047ac:	f7fe fc60 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a24      	ldr	r2, [pc, #144]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 80047b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047b6:	4a23      	ldr	r2, [pc, #140]	@ (8004844 <HAL_I2C_MspInit+0x1b4>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80047bc:	4b23      	ldr	r3, [pc, #140]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 80047be:	4a24      	ldr	r2, [pc, #144]	@ (8004850 <HAL_I2C_MspInit+0x1c0>)
 80047c0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80047c2:	4b22      	ldr	r3, [pc, #136]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 80047c4:	2211      	movs	r2, #17
 80047c6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047c8:	4b20      	ldr	r3, [pc, #128]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 80047ca:	2210      	movs	r2, #16
 80047cc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ce:	4b1f      	ldr	r3, [pc, #124]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047d4:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 80047d6:	2280      	movs	r2, #128	@ 0x80
 80047d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047da:	4b1c      	ldr	r3, [pc, #112]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 80047dc:	2200      	movs	r2, #0
 80047de:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e0:	4b1a      	ldr	r3, [pc, #104]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80047e6:	4b19      	ldr	r3, [pc, #100]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047ec:	4b17      	ldr	r3, [pc, #92]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80047f2:	4816      	ldr	r0, [pc, #88]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 80047f4:	f003 f8bc 	bl	8007970 <HAL_DMA_Init>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 80047fe:	f7fe fc37 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a11      	ldr	r2, [pc, #68]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 8004806:	639a      	str	r2, [r3, #56]	@ 0x38
 8004808:	4a10      	ldr	r2, [pc, #64]	@ (800484c <HAL_I2C_MspInit+0x1bc>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800480e:	2200      	movs	r2, #0
 8004810:	2100      	movs	r1, #0
 8004812:	201f      	movs	r0, #31
 8004814:	f003 f877 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004818:	201f      	movs	r0, #31
 800481a:	f003 f88e 	bl	800793a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	2020      	movs	r0, #32
 8004824:	f003 f86f 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004828:	2020      	movs	r0, #32
 800482a:	f003 f886 	bl	800793a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800482e:	bf00      	nop
 8004830:	3780      	adds	r7, #128	@ 0x80
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40005400 	.word	0x40005400
 800483c:	40021000 	.word	0x40021000
 8004840:	48000400 	.word	0x48000400
 8004844:	20000460 	.word	0x20000460
 8004848:	40020008 	.word	0x40020008
 800484c:	200004c0 	.word	0x200004c0
 8004850:	4002001c 	.word	0x4002001c

08004854 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0a      	ldr	r2, [pc, #40]	@ (800488c <HAL_TIM_PWM_MspInit+0x38>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10b      	bne.n	800487e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004866:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <HAL_TIM_PWM_MspInit+0x3c>)
 8004868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486a:	4a09      	ldr	r2, [pc, #36]	@ (8004890 <HAL_TIM_PWM_MspInit+0x3c>)
 800486c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004870:	6613      	str	r3, [r2, #96]	@ 0x60
 8004872:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <HAL_TIM_PWM_MspInit+0x3c>)
 8004874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40021000 	.word	0x40021000

08004894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	@ 0x28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	60da      	str	r2, [r3, #12]
 80048aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004930 <HAL_TIM_MspPostInit+0x9c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d138      	bne.n	8004928 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004934 <HAL_TIM_MspPostInit+0xa0>)
 80048b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004934 <HAL_TIM_MspPostInit+0xa0>)
 80048bc:	f043 0304 	orr.w	r3, r3, #4
 80048c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004934 <HAL_TIM_MspPostInit+0xa0>)
 80048c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ce:	4b19      	ldr	r3, [pc, #100]	@ (8004934 <HAL_TIM_MspPostInit+0xa0>)
 80048d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d2:	4a18      	ldr	r2, [pc, #96]	@ (8004934 <HAL_TIM_MspPostInit+0xa0>)
 80048d4:	f043 0302 	orr.w	r3, r3, #2
 80048d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048da:	4b16      	ldr	r3, [pc, #88]	@ (8004934 <HAL_TIM_MspPostInit+0xa0>)
 80048dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80048e6:	2307      	movs	r3, #7
 80048e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ea:	2302      	movs	r3, #2
 80048ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80048f6:	2302      	movs	r3, #2
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048fa:	f107 0314 	add.w	r3, r7, #20
 80048fe:	4619      	mov	r1, r3
 8004900:	480d      	ldr	r0, [pc, #52]	@ (8004938 <HAL_TIM_MspPostInit+0xa4>)
 8004902:	f004 f9a1 	bl	8008c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8004906:	f242 0303 	movw	r3, #8195	@ 0x2003
 800490a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490c:	2302      	movs	r3, #2
 800490e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004914:	2300      	movs	r3, #0
 8004916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004918:	2306      	movs	r3, #6
 800491a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491c:	f107 0314 	add.w	r3, r7, #20
 8004920:	4619      	mov	r1, r3
 8004922:	4806      	ldr	r0, [pc, #24]	@ (800493c <HAL_TIM_MspPostInit+0xa8>)
 8004924:	f004 f990 	bl	8008c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004928:	bf00      	nop
 800492a:	3728      	adds	r7, #40	@ 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40012c00 	.word	0x40012c00
 8004934:	40021000 	.word	0x40021000
 8004938:	48000800 	.word	0x48000800
 800493c:	48000400 	.word	0x48000400

08004940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004944:	bf00      	nop
 8004946:	e7fd      	b.n	8004944 <NMI_Handler+0x4>

08004948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <HardFault_Handler+0x4>

08004950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <MemManage_Handler+0x4>

08004958 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800495c:	bf00      	nop
 800495e:	e7fd      	b.n	800495c <BusFault_Handler+0x4>

08004960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <UsageFault_Handler+0x4>

08004968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800496c:	bf00      	nop
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004976:	b480      	push	{r7}
 8004978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004996:	f000 fdd5 	bl	8005544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80049a4:	4802      	ldr	r0, [pc, #8]	@ (80049b0 <DMA1_Channel1_IRQHandler+0x10>)
 80049a6:	f003 f96d 	bl	8007c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000460 	.word	0x20000460

080049b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80049b8:	4802      	ldr	r0, [pc, #8]	@ (80049c4 <DMA1_Channel2_IRQHandler+0x10>)
 80049ba:	f003 f963 	bl	8007c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	200004c0 	.word	0x200004c0

080049c8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80049cc:	4803      	ldr	r0, [pc, #12]	@ (80049dc <ADC1_2_IRQHandler+0x14>)
 80049ce:	f001 f9b1 	bl	8005d34 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80049d2:	4803      	ldr	r0, [pc, #12]	@ (80049e0 <ADC1_2_IRQHandler+0x18>)
 80049d4:	f001 f9ae 	bl	8005d34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	200002a8 	.word	0x200002a8
 80049e0:	20000314 	.word	0x20000314

080049e4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80049e8:	4802      	ldr	r0, [pc, #8]	@ (80049f4 <FDCAN1_IT0_IRQHandler+0x10>)
 80049ea:	f003 feb7 	bl	800875c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	200003a8 	.word	0x200003a8

080049f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80049fc:	4802      	ldr	r0, [pc, #8]	@ (8004a08 <I2C1_EV_IRQHandler+0x10>)
 80049fe:	f004 fd7f 	bl	8009500 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	2000040c 	.word	0x2000040c

08004a0c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a10:	4802      	ldr	r0, [pc, #8]	@ (8004a1c <I2C1_ER_IRQHandler+0x10>)
 8004a12:	f004 fd8f 	bl	8009534 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	2000040c 	.word	0x2000040c

08004a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004a24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004a28:	f004 faa8 	bl	8008f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a2c:	bf00      	nop
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return 1;
 8004a34:	2301      	movs	r3, #1
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <_kill>:

int _kill(int pid, int sig)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a4a:	f008 fc77 	bl	800d33c <__errno>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2216      	movs	r2, #22
 8004a52:	601a      	str	r2, [r3, #0]
  return -1;
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <_exit>:

void _exit (int status)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a68:	f04f 31ff 	mov.w	r1, #4294967295
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ffe7 	bl	8004a40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a72:	bf00      	nop
 8004a74:	e7fd      	b.n	8004a72 <_exit+0x12>
	...

08004a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a80:	4a14      	ldr	r2, [pc, #80]	@ (8004ad4 <_sbrk+0x5c>)
 8004a82:	4b15      	ldr	r3, [pc, #84]	@ (8004ad8 <_sbrk+0x60>)
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a8c:	4b13      	ldr	r3, [pc, #76]	@ (8004adc <_sbrk+0x64>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d102      	bne.n	8004a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a94:	4b11      	ldr	r3, [pc, #68]	@ (8004adc <_sbrk+0x64>)
 8004a96:	4a12      	ldr	r2, [pc, #72]	@ (8004ae0 <_sbrk+0x68>)
 8004a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a9a:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <_sbrk+0x64>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d207      	bcs.n	8004ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004aa8:	f008 fc48 	bl	800d33c <__errno>
 8004aac:	4603      	mov	r3, r0
 8004aae:	220c      	movs	r2, #12
 8004ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab6:	e009      	b.n	8004acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ab8:	4b08      	ldr	r3, [pc, #32]	@ (8004adc <_sbrk+0x64>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004abe:	4b07      	ldr	r3, [pc, #28]	@ (8004adc <_sbrk+0x64>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	4a05      	ldr	r2, [pc, #20]	@ (8004adc <_sbrk+0x64>)
 8004ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004aca:	68fb      	ldr	r3, [r7, #12]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20020000 	.word	0x20020000
 8004ad8:	00000400 	.word	0x00000400
 8004adc:	2000064c 	.word	0x2000064c
 8004ae0:	200007b0 	.word	0x200007b0

08004ae4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004ae8:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <SystemInit+0x20>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aee:	4a05      	ldr	r2, [pc, #20]	@ (8004b04 <SystemInit+0x20>)
 8004af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004af8:	bf00      	nop
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <LL_CORDIC_WriteData>:
  * @param  CORDICx CORDIC Instance
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	605a      	str	r2, [r3, #4]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <LL_CORDIC_ReadData>:
  * @rmtoll RDATA        RES           LL_CORDIC_ReadData
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <_ZNK10Acrocantho6CordicclEl>:

  SinCos operator()(int32_t theta_q31) const {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
    LL_CORDIC_WriteData(CORDIC, theta_q31);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4817      	ldr	r0, [pc, #92]	@ (8004ba8 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8004b4c:	f7ff ffdc 	bl	8004b08 <LL_CORDIC_WriteData>
    SinCos result;
    result.c = from_q31(LL_CORDIC_ReadData(CORDIC));
 8004b50:	4815      	ldr	r0, [pc, #84]	@ (8004ba8 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8004b52:	f7ff ffe7 	bl	8004b24 <LL_CORDIC_ReadData>
 8004b56:	4603      	mov	r3, r0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 f88f 	bl	8004c7c <_ZN10Acrocantho6Cordic8from_q31Em>
 8004b5e:	eef0 7a40 	vmov.f32	s15, s0
 8004b62:	edc7 7a05 	vstr	s15, [r7, #20]
    result.s = from_q31(LL_CORDIC_ReadData(CORDIC));
 8004b66:	4810      	ldr	r0, [pc, #64]	@ (8004ba8 <_ZNK10Acrocantho6CordicclEl+0x6c>)
 8004b68:	f7ff ffdc 	bl	8004b24 <LL_CORDIC_ReadData>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f884 	bl	8004c7c <_ZN10Acrocantho6Cordic8from_q31Em>
 8004b74:	eef0 7a40 	vmov.f32	s15, s0
 8004b78:	edc7 7a04 	vstr	s15, [r7, #16]
    return result;
 8004b7c:	f107 0318 	add.w	r3, r7, #24
 8004b80:	f107 0210 	add.w	r2, r7, #16
 8004b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b88:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	ee07 2a10 	vmov	s14, r2
 8004b94:	ee07 3a90 	vmov	s15, r3
  };
 8004b98:	eeb0 0a47 	vmov.f32	s0, s14
 8004b9c:	eef0 0a67 	vmov.f32	s1, s15
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40020c00 	.word	0x40020c00

08004bac <_ZNK10Acrocantho6Cordic7radiansEf>:
  
  SinCos radians(float theta) const {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	@ 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
  const float scaled = x / user2pi;
 8004bbc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004bc0:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8004c74 <_ZNK10Acrocantho6Cordic7radiansEf+0xc8>
 8004bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bc8:	edc7 7a08 	vstr	s15, [r7, #32]
  const int32_t i = static_cast<int>(scaled);
 8004bcc:	edd7 7a08 	vldr	s15, [r7, #32]
 8004bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bd4:	ee17 3a90 	vmov	r3, s15
 8004bd8:	61fb      	str	r3, [r7, #28]
  float mod = scaled - i;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be4:	ed97 7a08 	vldr	s14, [r7, #32]
 8004be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bec:	edc7 7a06 	vstr	s15, [r7, #24]
  if (mod < 0) { mod += 1.0f; }
 8004bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	d507      	bpl.n	8004c0e <_ZNK10Acrocantho6Cordic7radiansEf+0x62>
 8004bfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c0a:	edc7 7a06 	vstr	s15, [r7, #24]
  return static_cast<int32_t>(((mod > 0.5f) ? (mod - 1.0f) : mod) * 4294967296.0f);
 8004c0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c12:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1e:	dd06      	ble.n	8004c2e <_ZNK10Acrocantho6Cordic7radiansEf+0x82>
 8004c20:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c2c:	e001      	b.n	8004c32 <_ZNK10Acrocantho6Cordic7radiansEf+0x86>
 8004c2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c32:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004c78 <_ZNK10Acrocantho6Cordic7radiansEf+0xcc>
 8004c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    return (*this)(floatToQ31(theta));
 8004c3e:	ee17 1a90 	vmov	r1, s15
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff ff7a 	bl	8004b3c <_ZNK10Acrocantho6CordicclEl>
 8004c48:	eeb0 7a40 	vmov.f32	s14, s0
 8004c4c:	eef0 7a60 	vmov.f32	s15, s1
 8004c50:	ed87 7a04 	vstr	s14, [r7, #16]
 8004c54:	edc7 7a05 	vstr	s15, [r7, #20]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	ee07 2a10 	vmov	s14, r2
 8004c60:	ee07 3a90 	vmov	s15, r3
  }
 8004c64:	eeb0 0a47 	vmov.f32	s0, s14
 8004c68:	eef0 0a67 	vmov.f32	s1, s15
 8004c6c:	3728      	adds	r7, #40	@ 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40c90fdb 	.word	0x40c90fdb
 8004c78:	4f800000 	.word	0x4f800000

08004c7c <_ZN10Acrocantho6Cordic8from_q31Em>:

  static float from_q31(uint32_t val) {
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
    return static_cast<float>(static_cast<int32_t>(val)) * (1.0f / 2147483648.0f);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c8e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004ca4 <_ZN10Acrocantho6Cordic8from_q31Em+0x28>
 8004c92:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
 8004c96:	eeb0 0a67 	vmov.f32	s0, s15
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	30000000 	.word	0x30000000

08004ca8 <_ZN10Acrocantho15TrigonTransformC1ERKNS_6SinCosEff>:
};
struct TrigonTransform {
  /* f4t_trigon1 : V_d*cos - V_q*sin */
  /* f4t_trigon2 : V_d*sin + V_q*cos */
  TrigonTransform(const SinCos& sc, float vd, float vq)
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8004cb6:	edc7 0a00 	vstr	s1, [r7]
    : _trigon1(sc.c * vd - sc.s * vq),
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004cc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	edd3 6a00 	vldr	s13, [r3]
 8004cce:	edd7 7a00 	vldr	s15, [r7]
 8004cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	edc3 7a00 	vstr	s15, [r3]
      _trigon2(sc.s * vd + sc.c * vq) {}
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	ed93 7a00 	vldr	s14, [r3]
 8004ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	edd3 6a01 	vldr	s13, [r3, #4]
 8004cf4:	edd7 7a00 	vldr	s15, [r7]
 8004cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	edc3 7a01 	vstr	s15, [r3, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <_ZN10Acrocantho18InverseDqTransformC1Eff>:
  const float _trigon1;
  const float _trigon2;
};

struct InverseDqTransform {
  InverseDqTransform(float _tri1, float _tri2)
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d20:	edc7 0a01 	vstr	s1, [r7, #4]
      : u_ini(_tri1 * usersqrt1),
 8004d24:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d28:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004d8c <_ZN10Acrocantho18InverseDqTransformC1Eff+0x78>
 8004d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	edc3 7a00 	vstr	s15, [r3]
        v_ini(-(_tri1 * usersqrt3) + _tri2 * usersqrt2),
 8004d36:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d3a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004d90 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x7c>
 8004d3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d42:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d46:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8004d94 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x80>
 8004d4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	edc3 7a01 	vstr	s15, [r3, #4]
        w_ini(-(_tri1 * usersqrt3) - _tri2 * usersqrt2) {}
 8004d58:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d5c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004d94 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x80>
 8004d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d64:	eeb1 7a67 	vneg.f32	s14, s15
 8004d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d6c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8004d90 <_ZN10Acrocantho18InverseDqTransformC1Eff+0x7c>
 8004d70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	edc3 7a02 	vstr	s15, [r3, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	3f5105eb 	.word	0x3f5105eb
 8004d90:	3f3504f3 	.word	0x3f3504f3
 8004d94:	3ed105eb 	.word	0x3ed105eb

08004d98 <_ZN11ModeControl7getDataEv>:
public:
  ModeControl();
  void modeCtrl();
  void modeCtrlReset();
  
  ModeControlData* getData() { return data.get(); }
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe fb80 	bl	80034a8 <_ZNKSt10unique_ptrIN11ModeControl15ModeControlDataESt14default_deleteIS1_EE3getEv>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <_ZN8UserTaskC1Ev>:
extern CanCom cancom;
extern ModeControl modecontrol;
extern Util util;
extern ElecangCalib elecangcalib;

UserTask::UserTask()
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  : count(0){}
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	711a      	strb	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	715a      	strb	r2, [r3, #5]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	719a      	strb	r2, [r3, #6]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <_ZN8UserTask10cyclicTaskEv>:


void UserTask::cyclicTask() {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  Ang::AngData* angdata = ang.getAngData();
 8004dec:	4845      	ldr	r0, [pc, #276]	@ (8004f04 <_ZN8UserTask10cyclicTaskEv+0x120>)
 8004dee:	f7fc fdb6 	bl	800195e <_ZNK3Ang10getAngDataEv>
 8004df2:	60f8      	str	r0, [r7, #12]
  ElecangCalib::ElecangCalibData* ecaldata = elecangcalib.getData();
 8004df4:	4844      	ldr	r0, [pc, #272]	@ (8004f08 <_ZN8UserTask10cyclicTaskEv+0x124>)
 8004df6:	f7fe faa7 	bl	8003348 <_ZNK12ElecangCalib7getDataEv>
 8004dfa:	60b8      	str	r0, [r7, #8]
  static SeqID_t seqID = INIT;
  static bool curcal = false;

   switch (seqID) {
 8004dfc:	4b43      	ldr	r3, [pc, #268]	@ (8004f0c <_ZN8UserTask10cyclicTaskEv+0x128>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b0d      	cmp	r3, #13
 8004e02:	d02f      	beq.n	8004e64 <_ZN8UserTask10cyclicTaskEv+0x80>
 8004e04:	2b0d      	cmp	r3, #13
 8004e06:	dc74      	bgt.n	8004ef2 <_ZN8UserTask10cyclicTaskEv+0x10e>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d04f      	beq.n	8004eac <_ZN8UserTask10cyclicTaskEv+0xc8>
 8004e0c:	2b0b      	cmp	r3, #11
 8004e0e:	d170      	bne.n	8004ef2 <_ZN8UserTask10cyclicTaskEv+0x10e>
    case LOOP:

      // 強制停止
      if (!servoCheck()) {
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f905 	bl	8005020 <_ZN8UserTask10servoCheckEv>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f083 0301 	eor.w	r3, r3, #1
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d006      	beq.n	8004e30 <_ZN8UserTask10cyclicTaskEv+0x4c>
        outpwm.Poff();
 8004e22:	483b      	ldr	r0, [pc, #236]	@ (8004f10 <_ZN8UserTask10cyclicTaskEv+0x12c>)
 8004e24:	f7fe fd7e 	bl	8003924 <_ZN6OutPwm4PoffEv>
        seqID = STEP00;
 8004e28:	4b38      	ldr	r3, [pc, #224]	@ (8004f0c <_ZN8UserTask10cyclicTaskEv+0x128>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
        break;
 8004e2e:	e065      	b.n	8004efc <_ZN8UserTask10cyclicTaskEv+0x118>
      }

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8004e30:	2201      	movs	r2, #1
 8004e32:	2120      	movs	r1, #32
 8004e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e38:	f004 f888 	bl	8008f4c <HAL_GPIO_WritePin>
      ang.getAngle();
 8004e3c:	4831      	ldr	r0, [pc, #196]	@ (8004f04 <_ZN8UserTask10cyclicTaskEv+0x120>)
 8004e3e:	f7fb fef5 	bl	8000c2c <_ZN3Ang8getAngleEv>
      ang.getVel();
 8004e42:	4830      	ldr	r0, [pc, #192]	@ (8004f04 <_ZN8UserTask10cyclicTaskEv+0x120>)
 8004e44:	f7fb ff45 	bl	8000cd2 <_ZN3Ang6getVelEv>
      ang.elecAngleIn();
 8004e48:	482e      	ldr	r0, [pc, #184]	@ (8004f04 <_ZN8UserTask10cyclicTaskEv+0x120>)
 8004e4a:	f7fc f8cd 	bl	8000fe8 <_ZN3Ang11elecAngleInEv>
      
      elecangcalib.elecCalSeq();
 8004e4e:	482e      	ldr	r0, [pc, #184]	@ (8004f08 <_ZN8UserTask10cyclicTaskEv+0x124>)
 8004e50:	f7fc fde0 	bl	8001a14 <_ZN12ElecangCalib10elecCalSeqEv>
      test = ecaldata->elecAngOfs;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	601a      	str	r2, [r3, #0]
      motorControl();
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f877 	bl	8004f50 <_ZN8UserTask12motorControlEv>

      break;
 8004e62:	e04b      	b.n	8004efc <_ZN8UserTask10cyclicTaskEv+0x118>
    case INIT:
      // 初期化のためにエンコーダ値の初回読み取り
      if (count < 10) {
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	791b      	ldrb	r3, [r3, #4]
 8004e68:	2b09      	cmp	r3, #9
 8004e6a:	d809      	bhi.n	8004e80 <_ZN8UserTask10cyclicTaskEv+0x9c>
        ang.getAngle();
 8004e6c:	4825      	ldr	r0, [pc, #148]	@ (8004f04 <_ZN8UserTask10cyclicTaskEv+0x120>)
 8004e6e:	f7fb fedd 	bl	8000c2c <_ZN3Ang8getAngleEv>
        count++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	791b      	ldrb	r3, [r3, #4]
 8004e76:	3301      	adds	r3, #1
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	711a      	strb	r2, [r3, #4]
          seqID = STEP00;
          count = 0;
        }
        
      }
      break;
 8004e7e:	e03c      	b.n	8004efa <_ZN8UserTask10cyclicTaskEv+0x116>
        ang.getAngle();
 8004e80:	4820      	ldr	r0, [pc, #128]	@ (8004f04 <_ZN8UserTask10cyclicTaskEv+0x120>)
 8004e82:	f7fb fed3 	bl	8000c2c <_ZN3Ang8getAngleEv>
        ang.getVel();
 8004e86:	481f      	ldr	r0, [pc, #124]	@ (8004f04 <_ZN8UserTask10cyclicTaskEv+0x120>)
 8004e88:	f7fb ff23 	bl	8000cd2 <_ZN3Ang6getVelEv>
        if (senscur.sensCurInit()) {
 8004e8c:	4821      	ldr	r0, [pc, #132]	@ (8004f14 <_ZN8UserTask10cyclicTaskEv+0x130>)
 8004e8e:	f7ff f831 	bl	8003ef4 <_ZN7SensCur11sensCurInitEv>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d030      	beq.n	8004efa <_ZN8UserTask10cyclicTaskEv+0x116>
          senscur.sensCurIN();
 8004e98:	481e      	ldr	r0, [pc, #120]	@ (8004f14 <_ZN8UserTask10cyclicTaskEv+0x130>)
 8004e9a:	f7fe ffd3 	bl	8003e44 <_ZN7SensCur9sensCurINEv>
          seqID = STEP00;
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f0c <_ZN8UserTask10cyclicTaskEv+0x128>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
          count = 0;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	711a      	strb	r2, [r3, #4]
      break;
 8004eaa:	e026      	b.n	8004efa <_ZN8UserTask10cyclicTaskEv+0x116>
    case STEP00:
      ang.getAngle();
 8004eac:	4815      	ldr	r0, [pc, #84]	@ (8004f04 <_ZN8UserTask10cyclicTaskEv+0x120>)
 8004eae:	f7fb febd 	bl	8000c2c <_ZN3Ang8getAngleEv>
      ang.getVel();
 8004eb2:	4814      	ldr	r0, [pc, #80]	@ (8004f04 <_ZN8UserTask10cyclicTaskEv+0x120>)
 8004eb4:	f7fb ff0d 	bl	8000cd2 <_ZN3Ang6getVelEv>
      ang.elecAngleIn();
 8004eb8:	4812      	ldr	r0, [pc, #72]	@ (8004f04 <_ZN8UserTask10cyclicTaskEv+0x120>)
 8004eba:	f7fc f895 	bl	8000fe8 <_ZN3Ang11elecAngleInEv>
      if (servoCheck()){
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8ae 	bl	8005020 <_ZN8UserTask10servoCheckEv>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d006      	beq.n	8004ed8 <_ZN8UserTask10cyclicTaskEv+0xf4>
        outpwm.Pon();
 8004eca:	4811      	ldr	r0, [pc, #68]	@ (8004f10 <_ZN8UserTask10cyclicTaskEv+0x12c>)
 8004ecc:	f7fe fd18 	bl	8003900 <_ZN6OutPwm3PonEv>
        seqID = LOOP;
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <_ZN8UserTask10cyclicTaskEv+0x128>)
 8004ed2:	220b      	movs	r2, #11
 8004ed4:	701a      	strb	r2, [r3, #0]
        break;
 8004ed6:	e011      	b.n	8004efc <_ZN8UserTask10cyclicTaskEv+0x118>
      }
      senscur.sensCurIN();
 8004ed8:	480e      	ldr	r0, [pc, #56]	@ (8004f14 <_ZN8UserTask10cyclicTaskEv+0x130>)
 8004eda:	f7fe ffb3 	bl	8003e44 <_ZN7SensCur9sensCurINEv>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2120      	movs	r1, #32
 8004ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ee6:	f004 f831 	bl	8008f4c <HAL_GPIO_WritePin>
      outpwm.Poff();
 8004eea:	4809      	ldr	r0, [pc, #36]	@ (8004f10 <_ZN8UserTask10cyclicTaskEv+0x12c>)
 8004eec:	f7fe fd1a 	bl	8003924 <_ZN6OutPwm4PoffEv>
      break;
 8004ef0:	e004      	b.n	8004efc <_ZN8UserTask10cyclicTaskEv+0x118>

    default:
      seqID = INIT;
 8004ef2:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <_ZN8UserTask10cyclicTaskEv+0x128>)
 8004ef4:	220d      	movs	r2, #13
 8004ef6:	701a      	strb	r2, [r3, #0]
      break;
 8004ef8:	e000      	b.n	8004efc <_ZN8UserTask10cyclicTaskEv+0x118>
      break;
 8004efa:	bf00      	nop
    }
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	200005d4 	.word	0x200005d4
 8004f08:	20000098 	.word	0x20000098
 8004f0c:	20000010 	.word	0x20000010
 8004f10:	2000061c 	.word	0x2000061c
 8004f14:	20000634 	.word	0x20000634

08004f18 <_ZN8UserTask8idleTaskEv>:

void UserTask::idleTask() {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  cancom.rxTask();
 8004f20:	4809      	ldr	r0, [pc, #36]	@ (8004f48 <_ZN8UserTask8idleTaskEv+0x30>)
 8004f22:	f7fc fbb5 	bl	8001690 <_ZN6CanCom6rxTaskEv>
  util.genFuncCtrl();
 8004f26:	4809      	ldr	r0, [pc, #36]	@ (8004f4c <_ZN8UserTask8idleTaskEv+0x34>)
 8004f28:	f000 f8c8 	bl	80050bc <_ZN4Util11genFuncCtrlEv>

  cancom.initTxHeader(0x01, false, false);
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2101      	movs	r1, #1
 8004f32:	4805      	ldr	r0, [pc, #20]	@ (8004f48 <_ZN8UserTask8idleTaskEv+0x30>)
 8004f34:	f7fc faa6 	bl	8001484 <_ZN6CanCom12initTxHeaderEmbb>
  cancom.txTask();
 8004f38:	4803      	ldr	r0, [pc, #12]	@ (8004f48 <_ZN8UserTask8idleTaskEv+0x30>)
 8004f3a:	f7fc fbd3 	bl	80016e4 <_ZN6CanCom6txTaskEv>
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	2000056c 	.word	0x2000056c
 8004f4c:	20000658 	.word	0x20000658

08004f50 <_ZN8UserTask12motorControlEv>:

// PON後のモータ制御
void UserTask::motorControl() {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	@ 0x38
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  ModeControl::ModeControlData* mdctrldata = modecontrol.getData();
 8004f58:	482d      	ldr	r0, [pc, #180]	@ (8005010 <_ZN8UserTask12motorControlEv+0xc0>)
 8004f5a:	f7ff ff1d 	bl	8004d98 <_ZN11ModeControl7getDataEv>
 8004f5e:	6378      	str	r0, [r7, #52]	@ 0x34
  Ang::AngData* angdata = ang.getAngData();
 8004f60:	482c      	ldr	r0, [pc, #176]	@ (8005014 <_ZN8UserTask12motorControlEv+0xc4>)
 8004f62:	f7fc fcfc 	bl	800195e <_ZNK3Ang10getAngDataEv>
 8004f66:	6338      	str	r0, [r7, #48]	@ 0x30
  Acrocantho::Cordic cordic;
 8004f68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fd fbe9 	bl	8002744 <_ZN10Acrocantho6CordicC1Ev>

  modecontrol.modeCtrl();
 8004f72:	4827      	ldr	r0, [pc, #156]	@ (8005010 <_ZN8UserTask12motorControlEv+0xc0>)
 8004f74:	f7fe fa14 	bl	80033a0 <_ZN11ModeControl8modeCtrlEv>

  senscur.sensCurIN();
 8004f78:	4827      	ldr	r0, [pc, #156]	@ (8005018 <_ZN8UserTask12motorControlEv+0xc8>)
 8004f7a:	f7fe ff63 	bl	8003e44 <_ZN7SensCur9sensCurINEv>
  
  // SinCos演算
  Acrocantho::SinCos result = cordic.radians(angdata->elecAng);
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	edd3 7a00 	vldr	s15, [r3]
 8004f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f88:	eeb0 0a67 	vmov.f32	s0, s15
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fe0d 	bl	8004bac <_ZNK10Acrocantho6Cordic7radiansEf>
 8004f92:	eeb0 7a40 	vmov.f32	s14, s0
 8004f96:	eef0 7a60 	vmov.f32	s15, s1
 8004f9a:	ed87 7a07 	vstr	s14, [r7, #28]
 8004f9e:	edc7 7a08 	vstr	s15, [r7, #32]
  float s = result.s;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float c = result.c;
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  // dq逆変換
  Acrocantho::TrigonTransform tt(result, mdctrldata->voltDRef, mdctrldata->voltQRef);
 8004faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fac:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8004fb6:	f107 021c 	add.w	r2, r7, #28
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	eef0 0a47 	vmov.f32	s1, s14
 8004fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fe6d 	bl	8004ca8 <_ZN10Acrocantho15TrigonTransformC1ERKNS_6SinCosEff>
  Acrocantho::InverseDqTransform idt(tt._trigon1, tt._trigon2);
 8004fce:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8004fd6:	f107 0308 	add.w	r3, r7, #8
 8004fda:	eef0 0a47 	vmov.f32	s1, s14
 8004fde:	eeb0 0a67 	vmov.f32	s0, s15
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fe96 	bl	8004d14 <_ZN10Acrocantho18InverseDqTransformC1Eff>
  
  outpwm.setReg(idt.u_ini, idt.v_ini, idt.w_ini);
 8004fe8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fec:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ff0:	edd7 6a04 	vldr	s13, [r7, #16]
 8004ff4:	eeb0 1a66 	vmov.f32	s2, s13
 8004ff8:	eef0 0a47 	vmov.f32	s1, s14
 8004ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8005000:	4806      	ldr	r0, [pc, #24]	@ (800501c <_ZN8UserTask12motorControlEv+0xcc>)
 8005002:	f7fe fca5 	bl	8003950 <_ZN6OutPwm6setRegEfff>
}
 8005006:	bf00      	nop
 8005008:	3738      	adds	r7, #56	@ 0x38
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000604 	.word	0x20000604
 8005014:	200005d4 	.word	0x200005d4
 8005018:	20000634 	.word	0x20000634
 800501c:	2000061c 	.word	0x2000061c

08005020 <_ZN8UserTask10servoCheckEv>:

bool UserTask::servoCheck() {
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 8005028:	4806      	ldr	r0, [pc, #24]	@ (8005044 <_ZN8UserTask10servoCheckEv+0x24>)
 800502a:	f7fb fd7d 	bl	8000b28 <_ZN6CanCom7getDataEv>
 800502e:	60f8      	str	r0, [r7, #12]
  return (candata->genFuncRef & 0x01) != 0 ? true : false;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	b2db      	uxtb	r3, r3
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	2000056c 	.word	0x2000056c

08005048 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc){
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  usertask.cyclicTask();
 8005050:	4803      	ldr	r0, [pc, #12]	@ (8005060 <HAL_ADCEx_InjectedConvCpltCallback+0x18>)
 8005052:	f7ff fec7 	bl	8004de4 <_ZN8UserTask10cyclicTaskEv>
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000650 	.word	0x20000650

08005064 <_Z41__static_initialization_and_destruction_0ii>:
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d107      	bne.n	8005084 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800507a:	4293      	cmp	r3, r2
 800507c:	d102      	bne.n	8005084 <_Z41__static_initialization_and_destruction_0ii+0x20>
UserTask usertask;
 800507e:	4803      	ldr	r0, [pc, #12]	@ (800508c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005080:	f7ff fe97 	bl	8004db2 <_ZN8UserTaskC1Ev>
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000650 	.word	0x20000650

08005090 <_GLOBAL__sub_I_usertask>:
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
 8005094:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005098:	2001      	movs	r0, #1
 800509a:	f7ff ffe3 	bl	8005064 <_Z41__static_initialization_and_destruction_0ii>
 800509e:	bd80      	pop	{r7, pc}

080050a0 <_ZN4UtilC1Ev>:
#include "can_communication.h"

Util util;
extern CanCom cancom;

Util::Util()
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  : data(std::make_unique<UtilData>()) {}
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f834 	bl	8005118 <_ZSt11make_uniqueIN4Util8UtilDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <_ZN4Util11genFuncCtrlEv>:

// PON以外の機能制御
void Util::genFuncCtrl() {
 80050bc:	b590      	push	{r4, r7, lr}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  CanCom::CanData* candata = cancom.getData();
 80050c4:	480c      	ldr	r0, [pc, #48]	@ (80050f8 <_ZN4Util11genFuncCtrlEv+0x3c>)
 80050c6:	f7fb fd2f 	bl	8000b28 <_ZN6CanCom7getDataEv>
 80050ca:	60f8      	str	r0, [r7, #12]

  if (candata->genFuncCheck){
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	7c1b      	ldrb	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00c      	beq.n	80050ee <_ZN4Util11genFuncCtrlEv+0x32>
    // genfuncRef 0b00010000
    data->eCalib = (candata->genFuncRef & 0x10) != 0 ? true : false;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	111c      	asrs	r4, r3, #4
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 f853 	bl	8005188 <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEptEv>
 80050e2:	4603      	mov	r3, r0
 80050e4:	4622      	mov	r2, r4
 80050e6:	f002 0201 	and.w	r2, r2, #1
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
  }
  
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd90      	pop	{r4, r7, pc}
 80050f6:	bf00      	nop
 80050f8:	2000056c 	.word	0x2000056c

080050fc <_ZN4Util8UtilDataC1Ev>:
  struct UtilData {
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <_ZSt11make_uniqueIN4Util8UtilDataEJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8005120:	2001      	movs	r0, #1
 8005122:	f007 ffcd 	bl	800d0c0 <_Znwj>
 8005126:	4603      	mov	r3, r0
 8005128:	461c      	mov	r4, r3
 800512a:	2300      	movs	r3, #0
 800512c:	7023      	strb	r3, [r4, #0]
 800512e:	4620      	mov	r0, r4
 8005130:	f7ff ffe4 	bl	80050fc <_ZN4Util8UtilDataC1Ev>
 8005134:	4621      	mov	r1, r4
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f842 	bl	80051c0 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	bd90      	pop	{r4, r7, pc}

08005144 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8005144:	b590      	push	{r4, r7, lr}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f845 	bl	80051de <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>
 8005154:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f84a 	bl	80051f8 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE11get_deleterEv>
 8005164:	4604      	mov	r4, r0
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f853 	bl	8005212 <_ZSt4moveIRPN4Util8UtilDataEEONSt16remove_referenceIT_E4typeEOS5_>
 800516c:	4603      	mov	r3, r0
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4619      	mov	r1, r3
 8005172:	4620      	mov	r0, r4
 8005174:	f000 f858 	bl	8005228 <_ZNKSt14default_deleteIN4Util8UtilDataEEclEPS1_>
	__ptr = pointer();
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
      }
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bd90      	pop	{r4, r7, pc}

08005188 <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	return get();
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7fd f86a 	bl	800226a <_ZNKSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE3getEv>
 8005196:	4603      	mov	r3, r0
      }
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <_ZNSt15__uniq_ptr_dataIN4Util8UtilDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f849 	bl	8005248 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EEC1EPS1_>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff ffe6 	bl	80051a0 <_ZNSt15__uniq_ptr_dataIN4Util8UtilDataESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 f841 	bl	8005270 <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80051ee:	4603      	mov	r3, r0
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 f841 	bl	800528a <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE10_M_deleterEv>
 8005208:	4603      	mov	r3, r0
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <_ZSt4moveIRPN4Util8UtilDataEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <_ZNKSt14default_deleteIN4Util8UtilDataEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <_ZNKSt14default_deleteIN4Util8UtilDataEEclEPS1_+0x18>
 8005238:	2101      	movs	r1, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f007 ff3e 	bl	800d0bc <_ZdlPvj>
      }
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 f825 	bl	80052a4 <_ZNSt5tupleIJPN4Util8UtilDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff ffbf 	bl	80051de <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE6_M_ptrEv>
 8005260:	4602      	mov	r2, r0
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <_ZSt3getILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f81f 	bl	80052be <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8005280:	4603      	mov	r3, r0
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <_ZNSt15__uniq_ptr_implIN4Util8UtilDataESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f81e 	bl	80052d6 <_ZSt3getILj1EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800529a:	4603      	mov	r3, r0
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <_ZNSt5tupleIJPN4Util8UtilDataESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:
	tuple()
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f81d 	bl	80052ee <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEEC1Ev>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <_ZSt12__get_helperILj0EPN4Util8UtilDataEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f821 	bl	800530e <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERS5_>
 80052cc:	4603      	mov	r3, r0
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <_ZSt3getILj1EJPN4Util8UtilDataESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f822 	bl	8005328 <_ZSt12__get_helperILj1ESt14default_deleteIN4Util8UtilDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f822 	bl	8005340 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEEC1Ev>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f82a 	bl	8005358 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EEC1Ev>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <_ZNSt11_Tuple_implILj0EJPN4Util8UtilDataESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f82b 	bl	8005374 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERS3_>
 800531e:	4603      	mov	r3, r0
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <_ZSt12__get_helperILj1ESt14default_deleteIN4Util8UtilDataEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f82a 	bl	800538a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEE7_M_headERS4_>
 8005336:	4603      	mov	r3, r0
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEEC1Ev>:
      _Tuple_impl()
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f82a 	bl	80053a2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EEC1Ev>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EEC1Ev>:
      constexpr _Head_base()
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <_ZNSt10_Head_baseILj0EPN4Util8UtilDataELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4Util8UtilDataEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f810 	bl	80053b8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EE7_M_headERS4_>
 8005398:	4603      	mov	r3, r0
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EEC1Ev>:
      constexpr _Head_base()
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4Util8UtilDataEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <_ZN4UtilD1Ev>:
class Util {
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff feb3 	bl	8005144 <_ZNSt10unique_ptrIN4Util8UtilDataESt14default_deleteIS1_EED1Ev>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <_Z41__static_initialization_and_destruction_0ii>:
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d107      	bne.n	8005408 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053fe:	4293      	cmp	r3, r2
 8005400:	d102      	bne.n	8005408 <_Z41__static_initialization_and_destruction_0ii+0x20>
Util util;
 8005402:	4809      	ldr	r0, [pc, #36]	@ (8005428 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005404:	f7ff fe4c 	bl	80050a0 <_ZN4UtilC1Ev>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d107      	bne.n	800541e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005414:	4293      	cmp	r3, r2
 8005416:	d102      	bne.n	800541e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005418:	4803      	ldr	r0, [pc, #12]	@ (8005428 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800541a:	f7ff ffd8 	bl	80053ce <_ZN4UtilD1Ev>
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000658 	.word	0x20000658

0800542c <_GLOBAL__sub_I_util>:
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
 8005430:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005434:	2001      	movs	r0, #1
 8005436:	f7ff ffd7 	bl	80053e8 <_Z41__static_initialization_and_destruction_0ii>
 800543a:	bd80      	pop	{r7, pc}

0800543c <_GLOBAL__sub_D_util>:
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
 8005440:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005444:	2000      	movs	r0, #0
 8005446:	f7ff ffcf 	bl	80053e8 <_Z41__static_initialization_and_destruction_0ii>
 800544a:	bd80      	pop	{r7, pc}

0800544c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800544c:	480d      	ldr	r0, [pc, #52]	@ (8005484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800544e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005450:	f7ff fb48 	bl	8004ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005454:	480c      	ldr	r0, [pc, #48]	@ (8005488 <LoopForever+0x6>)
  ldr r1, =_edata
 8005456:	490d      	ldr	r1, [pc, #52]	@ (800548c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005458:	4a0d      	ldr	r2, [pc, #52]	@ (8005490 <LoopForever+0xe>)
  movs r3, #0
 800545a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800545c:	e002      	b.n	8005464 <LoopCopyDataInit>

0800545e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800545e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005462:	3304      	adds	r3, #4

08005464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005468:	d3f9      	bcc.n	800545e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800546a:	4a0a      	ldr	r2, [pc, #40]	@ (8005494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800546c:	4c0a      	ldr	r4, [pc, #40]	@ (8005498 <LoopForever+0x16>)
  movs r3, #0
 800546e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005470:	e001      	b.n	8005476 <LoopFillZerobss>

08005472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005474:	3204      	adds	r2, #4

08005476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005478:	d3fb      	bcc.n	8005472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800547a:	f007 ff65 	bl	800d348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800547e:	f7fd f989 	bl	8002794 <main>

08005482 <LoopForever>:

LoopForever:
    b LoopForever
 8005482:	e7fe      	b.n	8005482 <LoopForever>
  ldr   r0, =_estack
 8005484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800548c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8005490:	0800d49c 	.word	0x0800d49c
  ldr r2, =_sbss
 8005494:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8005498:	200007ac 	.word	0x200007ac

0800549c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800549c:	e7fe      	b.n	800549c <ADC3_IRQHandler>

0800549e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054a8:	2003      	movs	r0, #3
 80054aa:	f002 fa21 	bl	80078f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054ae:	2000      	movs	r0, #0
 80054b0:	f000 f80e 	bl	80054d0 <HAL_InitTick>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	71fb      	strb	r3, [r7, #7]
 80054be:	e001      	b.n	80054c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054c0:	f7fe ff7a 	bl	80043b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054c4:	79fb      	ldrb	r3, [r7, #7]

}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054dc:	4b16      	ldr	r3, [pc, #88]	@ (8005538 <HAL_InitTick+0x68>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d022      	beq.n	800552a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054e4:	4b15      	ldr	r3, [pc, #84]	@ (800553c <HAL_InitTick+0x6c>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <HAL_InitTick+0x68>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	4618      	mov	r0, r3
 80054fa:	f002 fa2c 	bl	8007956 <HAL_SYSTICK_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10f      	bne.n	8005524 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b0f      	cmp	r3, #15
 8005508:	d809      	bhi.n	800551e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800550a:	2200      	movs	r2, #0
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	f04f 30ff 	mov.w	r0, #4294967295
 8005512:	f002 f9f8 	bl	8007906 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005516:	4a0a      	ldr	r2, [pc, #40]	@ (8005540 <HAL_InitTick+0x70>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	e007      	b.n	800552e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
 8005522:	e004      	b.n	800552e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
 8005528:	e001      	b.n	800552e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800552e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20000018 	.word	0x20000018
 800553c:	2000000c 	.word	0x2000000c
 8005540:	20000014 	.word	0x20000014

08005544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <HAL_IncTick+0x1c>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <HAL_IncTick+0x20>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4413      	add	r3, r2
 8005552:	4a03      	ldr	r2, [pc, #12]	@ (8005560 <HAL_IncTick+0x1c>)
 8005554:	6013      	str	r3, [r2, #0]
}
 8005556:	bf00      	nop
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	2000065c 	.word	0x2000065c
 8005564:	20000018 	.word	0x20000018

08005568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return uwTick;
 800556c:	4b03      	ldr	r3, [pc, #12]	@ (800557c <HAL_GetTick+0x14>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	4618      	mov	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	2000065c 	.word	0x2000065c

08005580 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	609a      	str	r2, [r3, #8]
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 031f 	and.w	r3, r3, #31
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005656:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6093      	str	r3, [r2, #8]
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800567a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800567e:	d101      	bne.n	8005684 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80056a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056ce:	d101      	bne.n	80056d4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056f6:	f043 0201 	orr.w	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800571a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800571e:	f043 0202 	orr.w	r2, r3, #2
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <LL_ADC_IsEnabled+0x18>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <LL_ADC_IsEnabled+0x1a>
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b02      	cmp	r3, #2
 800576a:	d101      	bne.n	8005770 <LL_ADC_IsDisableOngoing+0x18>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <LL_ADC_IsDisableOngoing+0x1a>
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800578e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005792:	f043 0204 	orr.w	r2, r3, #4
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d101      	bne.n	80057be <LL_ADC_REG_IsConversionOngoing+0x18>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d101      	bne.n	80057e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057f4:	b590      	push	{r4, r7, lr}
 80057f6:	b089      	sub	sp, #36	@ 0x24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e1a9      	b.n	8005b62 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7fe fdef 	bl	8004400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff ff18 	bl	800566a <LL_ADC_IsDeepPowerDownEnabled>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fefe 	bl	8005646 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff ff33 	bl	80056ba <LL_ADC_IsInternalRegulatorEnabled>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d115      	bne.n	8005886 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff ff17 	bl	8005692 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005864:	4b9c      	ldr	r3, [pc, #624]	@ (8005ad8 <HAL_ADC_Init+0x2e4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	099b      	lsrs	r3, r3, #6
 800586a:	4a9c      	ldr	r2, [pc, #624]	@ (8005adc <HAL_ADC_Init+0x2e8>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	099b      	lsrs	r3, r3, #6
 8005872:	3301      	adds	r3, #1
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005878:	e002      	b.n	8005880 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3b01      	subs	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f9      	bne.n	800587a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff ff15 	bl	80056ba <LL_ADC_IsInternalRegulatorEnabled>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10d      	bne.n	80058b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800589a:	f043 0210 	orr.w	r2, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a6:	f043 0201 	orr.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff ff75 	bl	80057a6 <LL_ADC_REG_IsConversionOngoing>
 80058bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f040 8142 	bne.w	8005b50 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 813e 	bne.w	8005b50 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80058dc:	f043 0202 	orr.w	r2, r3, #2
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ff22 	bl	8005732 <LL_ADC_IsEnabled>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d141      	bne.n	8005978 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058fc:	d004      	beq.n	8005908 <HAL_ADC_Init+0x114>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a77      	ldr	r2, [pc, #476]	@ (8005ae0 <HAL_ADC_Init+0x2ec>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d10f      	bne.n	8005928 <HAL_ADC_Init+0x134>
 8005908:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800590c:	f7ff ff11 	bl	8005732 <LL_ADC_IsEnabled>
 8005910:	4604      	mov	r4, r0
 8005912:	4873      	ldr	r0, [pc, #460]	@ (8005ae0 <HAL_ADC_Init+0x2ec>)
 8005914:	f7ff ff0d 	bl	8005732 <LL_ADC_IsEnabled>
 8005918:	4603      	mov	r3, r0
 800591a:	4323      	orrs	r3, r4
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf0c      	ite	eq
 8005920:	2301      	moveq	r3, #1
 8005922:	2300      	movne	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	e012      	b.n	800594e <HAL_ADC_Init+0x15a>
 8005928:	486e      	ldr	r0, [pc, #440]	@ (8005ae4 <HAL_ADC_Init+0x2f0>)
 800592a:	f7ff ff02 	bl	8005732 <LL_ADC_IsEnabled>
 800592e:	4604      	mov	r4, r0
 8005930:	486d      	ldr	r0, [pc, #436]	@ (8005ae8 <HAL_ADC_Init+0x2f4>)
 8005932:	f7ff fefe 	bl	8005732 <LL_ADC_IsEnabled>
 8005936:	4603      	mov	r3, r0
 8005938:	431c      	orrs	r4, r3
 800593a:	486c      	ldr	r0, [pc, #432]	@ (8005aec <HAL_ADC_Init+0x2f8>)
 800593c:	f7ff fef9 	bl	8005732 <LL_ADC_IsEnabled>
 8005940:	4603      	mov	r3, r0
 8005942:	4323      	orrs	r3, r4
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d012      	beq.n	8005978 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800595a:	d004      	beq.n	8005966 <HAL_ADC_Init+0x172>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a5f      	ldr	r2, [pc, #380]	@ (8005ae0 <HAL_ADC_Init+0x2ec>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <HAL_ADC_Init+0x176>
 8005966:	4a62      	ldr	r2, [pc, #392]	@ (8005af0 <HAL_ADC_Init+0x2fc>)
 8005968:	e000      	b.n	800596c <HAL_ADC_Init+0x178>
 800596a:	4a62      	ldr	r2, [pc, #392]	@ (8005af4 <HAL_ADC_Init+0x300>)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f7ff fe04 	bl	8005580 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	7f5b      	ldrb	r3, [r3, #29]
 800597c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005982:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005988:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800598e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005996:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d106      	bne.n	80059b4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	3b01      	subs	r3, #1
 80059ac:	045b      	lsls	r3, r3, #17
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d009      	beq.n	80059d0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	4b48      	ldr	r3, [pc, #288]	@ (8005af8 <HAL_ADC_Init+0x304>)
 80059d8:	4013      	ands	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	69b9      	ldr	r1, [r7, #24]
 80059e0:	430b      	orrs	r3, r1
 80059e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff fee4 	bl	80057cc <LL_ADC_INJ_IsConversionOngoing>
 8005a04:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d17f      	bne.n	8005b0c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d17c      	bne.n	8005b0c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a16:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a2e:	f023 0302 	bic.w	r3, r3, #2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	69b9      	ldr	r1, [r7, #24]
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d017      	beq.n	8005a74 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005a52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005a5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6911      	ldr	r1, [r2, #16]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005a72:	e013      	b.n	8005a9c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005a82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a98:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d12a      	bne.n	8005afc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005ab0:	f023 0304 	bic.w	r3, r3, #4
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005abc:	4311      	orrs	r1, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005ac2:	4311      	orrs	r1, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	611a      	str	r2, [r3, #16]
 8005ad6:	e019      	b.n	8005b0c <HAL_ADC_Init+0x318>
 8005ad8:	2000000c 	.word	0x2000000c
 8005adc:	053e2d63 	.word	0x053e2d63
 8005ae0:	50000100 	.word	0x50000100
 8005ae4:	50000400 	.word	0x50000400
 8005ae8:	50000500 	.word	0x50000500
 8005aec:	50000600 	.word	0x50000600
 8005af0:	50000300 	.word	0x50000300
 8005af4:	50000700 	.word	0x50000700
 8005af8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10c      	bne.n	8005b2e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	f023 010f 	bic.w	r1, r3, #15
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	1e5a      	subs	r2, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b2c:	e007      	b.n	8005b3e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 020f 	bic.w	r2, r2, #15
 8005b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	f043 0201 	orr.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b4e:	e007      	b.n	8005b60 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b54:	f043 0210 	orr.w	r2, r3, #16
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b60:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3724      	adds	r7, #36	@ 0x24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd90      	pop	{r4, r7, pc}
 8005b6a:	bf00      	nop

08005b6c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b7c:	d004      	beq.n	8005b88 <HAL_ADC_Start+0x1c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a67      	ldr	r2, [pc, #412]	@ (8005d20 <HAL_ADC_Start+0x1b4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d101      	bne.n	8005b8c <HAL_ADC_Start+0x20>
 8005b88:	4b66      	ldr	r3, [pc, #408]	@ (8005d24 <HAL_ADC_Start+0x1b8>)
 8005b8a:	e000      	b.n	8005b8e <HAL_ADC_Start+0x22>
 8005b8c:	4b66      	ldr	r3, [pc, #408]	@ (8005d28 <HAL_ADC_Start+0x1bc>)
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fd3d 	bl	800560e <LL_ADC_GetMultimode>
 8005b94:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fe03 	bl	80057a6 <LL_ADC_REG_IsConversionOngoing>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f040 80b4 	bne.w	8005d10 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_ADC_Start+0x4a>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e0af      	b.n	8005d16 <HAL_ADC_Start+0x1aa>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fb36 	bl	8006230 <ADC_Enable>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f040 809b 	bne.w	8005d06 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a4d      	ldr	r2, [pc, #308]	@ (8005d20 <HAL_ADC_Start+0x1b4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d009      	beq.n	8005c02 <HAL_ADC_Start+0x96>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8005d2c <HAL_ADC_Start+0x1c0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d002      	beq.n	8005bfe <HAL_ADC_Start+0x92>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	e003      	b.n	8005c06 <HAL_ADC_Start+0x9a>
 8005bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8005d30 <HAL_ADC_Start+0x1c4>)
 8005c00:	e001      	b.n	8005c06 <HAL_ADC_Start+0x9a>
 8005c02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d002      	beq.n	8005c14 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c2c:	d106      	bne.n	8005c3c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c32:	f023 0206 	bic.w	r2, r3, #6
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	661a      	str	r2, [r3, #96]	@ 0x60
 8005c3a:	e002      	b.n	8005c42 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	221c      	movs	r2, #28
 8005c48:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a32      	ldr	r2, [pc, #200]	@ (8005d20 <HAL_ADC_Start+0x1b4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_ADC_Start+0x104>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a32      	ldr	r2, [pc, #200]	@ (8005d2c <HAL_ADC_Start+0x1c0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d002      	beq.n	8005c6c <HAL_ADC_Start+0x100>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	e003      	b.n	8005c74 <HAL_ADC_Start+0x108>
 8005c6c:	4b30      	ldr	r3, [pc, #192]	@ (8005d30 <HAL_ADC_Start+0x1c4>)
 8005c6e:	e001      	b.n	8005c74 <HAL_ADC_Start+0x108>
 8005c70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d008      	beq.n	8005c8e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b05      	cmp	r3, #5
 8005c86:	d002      	beq.n	8005c8e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b09      	cmp	r3, #9
 8005c8c:	d114      	bne.n	8005cb8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005ca4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fd64 	bl	800577e <LL_ADC_REG_StartConversion>
 8005cb6:	e02d      	b.n	8005d14 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a15      	ldr	r2, [pc, #84]	@ (8005d20 <HAL_ADC_Start+0x1b4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d009      	beq.n	8005ce2 <HAL_ADC_Start+0x176>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	@ (8005d2c <HAL_ADC_Start+0x1c0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d002      	beq.n	8005cde <HAL_ADC_Start+0x172>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	e003      	b.n	8005ce6 <HAL_ADC_Start+0x17a>
 8005cde:	4b14      	ldr	r3, [pc, #80]	@ (8005d30 <HAL_ADC_Start+0x1c4>)
 8005ce0:	e001      	b.n	8005ce6 <HAL_ADC_Start+0x17a>
 8005ce2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005ce6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00f      	beq.n	8005d14 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005cfc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d04:	e006      	b.n	8005d14 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005d0e:	e001      	b.n	8005d14 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
 8005d12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	50000100 	.word	0x50000100
 8005d24:	50000300 	.word	0x50000300
 8005d28:	50000700 	.word	0x50000700
 8005d2c:	50000500 	.word	0x50000500
 8005d30:	50000400 	.word	0x50000400

08005d34 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08a      	sub	sp, #40	@ 0x28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d58:	d004      	beq.n	8005d64 <HAL_ADC_IRQHandler+0x30>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a8e      	ldr	r2, [pc, #568]	@ (8005f98 <HAL_ADC_IRQHandler+0x264>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d101      	bne.n	8005d68 <HAL_ADC_IRQHandler+0x34>
 8005d64:	4b8d      	ldr	r3, [pc, #564]	@ (8005f9c <HAL_ADC_IRQHandler+0x268>)
 8005d66:	e000      	b.n	8005d6a <HAL_ADC_IRQHandler+0x36>
 8005d68:	4b8d      	ldr	r3, [pc, #564]	@ (8005fa0 <HAL_ADC_IRQHandler+0x26c>)
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fc4f 	bl	800560e <LL_ADC_GetMultimode>
 8005d70:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d017      	beq.n	8005dac <HAL_ADC_IRQHandler+0x78>
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d012      	beq.n	8005dac <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d105      	bne.n	8005d9e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d96:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fe66 	bl	8006a70 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2202      	movs	r2, #2
 8005daa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d004      	beq.n	8005dc0 <HAL_ADC_IRQHandler+0x8c>
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 8094 	beq.w	8005ef4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 808e 	beq.w	8005ef4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fbe4 	bl	80055c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d072      	beq.n	8005ee6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a64      	ldr	r2, [pc, #400]	@ (8005f98 <HAL_ADC_IRQHandler+0x264>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_ADC_IRQHandler+0xea>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a65      	ldr	r2, [pc, #404]	@ (8005fa4 <HAL_ADC_IRQHandler+0x270>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d002      	beq.n	8005e1a <HAL_ADC_IRQHandler+0xe6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	e003      	b.n	8005e22 <HAL_ADC_IRQHandler+0xee>
 8005e1a:	4b63      	ldr	r3, [pc, #396]	@ (8005fa8 <HAL_ADC_IRQHandler+0x274>)
 8005e1c:	e001      	b.n	8005e22 <HAL_ADC_IRQHandler+0xee>
 8005e1e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d008      	beq.n	8005e3c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	d002      	beq.n	8005e3c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b09      	cmp	r3, #9
 8005e3a:	d104      	bne.n	8005e46 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	e014      	b.n	8005e70 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a53      	ldr	r2, [pc, #332]	@ (8005f98 <HAL_ADC_IRQHandler+0x264>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_ADC_IRQHandler+0x130>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a53      	ldr	r2, [pc, #332]	@ (8005fa4 <HAL_ADC_IRQHandler+0x270>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d002      	beq.n	8005e60 <HAL_ADC_IRQHandler+0x12c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	e003      	b.n	8005e68 <HAL_ADC_IRQHandler+0x134>
 8005e60:	4b51      	ldr	r3, [pc, #324]	@ (8005fa8 <HAL_ADC_IRQHandler+0x274>)
 8005e62:	e001      	b.n	8005e68 <HAL_ADC_IRQHandler+0x134>
 8005e64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005e68:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d135      	bne.n	8005ee6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d12e      	bne.n	8005ee6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff fc8a 	bl	80057a6 <LL_ADC_REG_IsConversionOngoing>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11a      	bne.n	8005ece <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 020c 	bic.w	r2, r2, #12
 8005ea6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d112      	bne.n	8005ee6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec4:	f043 0201 	orr.w	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ecc:	e00b      	b.n	8005ee6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed2:	f043 0210 	orr.w	r2, r3, #16
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ede:	f043 0201 	orr.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f984 	bl	80061f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	220c      	movs	r2, #12
 8005ef2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d004      	beq.n	8005f08 <HAL_ADC_IRQHandler+0x1d4>
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10b      	bne.n	8005f20 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80b3 	beq.w	800607a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 80ad 	beq.w	800607a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fb53 	bl	80055e8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005f42:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fb3a 	bl	80055c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f4e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a10      	ldr	r2, [pc, #64]	@ (8005f98 <HAL_ADC_IRQHandler+0x264>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_ADC_IRQHandler+0x23a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a11      	ldr	r2, [pc, #68]	@ (8005fa4 <HAL_ADC_IRQHandler+0x270>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d002      	beq.n	8005f6a <HAL_ADC_IRQHandler+0x236>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	e003      	b.n	8005f72 <HAL_ADC_IRQHandler+0x23e>
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa8 <HAL_ADC_IRQHandler+0x274>)
 8005f6c:	e001      	b.n	8005f72 <HAL_ADC_IRQHandler+0x23e>
 8005f6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d008      	beq.n	8005f8c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2b06      	cmp	r3, #6
 8005f84:	d002      	beq.n	8005f8c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b07      	cmp	r3, #7
 8005f8a:	d10f      	bne.n	8005fac <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	623b      	str	r3, [r7, #32]
 8005f94:	e01f      	b.n	8005fd6 <HAL_ADC_IRQHandler+0x2a2>
 8005f96:	bf00      	nop
 8005f98:	50000100 	.word	0x50000100
 8005f9c:	50000300 	.word	0x50000300
 8005fa0:	50000700 	.word	0x50000700
 8005fa4:	50000500 	.word	0x50000500
 8005fa8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a8b      	ldr	r2, [pc, #556]	@ (80061e0 <HAL_ADC_IRQHandler+0x4ac>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d009      	beq.n	8005fca <HAL_ADC_IRQHandler+0x296>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a8a      	ldr	r2, [pc, #552]	@ (80061e4 <HAL_ADC_IRQHandler+0x4b0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d002      	beq.n	8005fc6 <HAL_ADC_IRQHandler+0x292>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	e003      	b.n	8005fce <HAL_ADC_IRQHandler+0x29a>
 8005fc6:	4b88      	ldr	r3, [pc, #544]	@ (80061e8 <HAL_ADC_IRQHandler+0x4b4>)
 8005fc8:	e001      	b.n	8005fce <HAL_ADC_IRQHandler+0x29a>
 8005fca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005fce:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d047      	beq.n	800606c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_ADC_IRQHandler+0x2c2>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d03f      	beq.n	800606c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d13a      	bne.n	800606c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006000:	2b40      	cmp	r3, #64	@ 0x40
 8006002:	d133      	bne.n	800606c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d12e      	bne.n	800606c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff fbda 	bl	80057cc <LL_ADC_INJ_IsConversionOngoing>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d11a      	bne.n	8006054 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800602c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006032:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006042:	2b00      	cmp	r3, #0
 8006044:	d112      	bne.n	800606c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604a:	f043 0201 	orr.w	r2, r3, #1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006052:	e00b      	b.n	800606c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006058:	f043 0210 	orr.w	r2, r3, #16
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006064:	f043 0201 	orr.w	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fe ffeb 	bl	8005048 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2260      	movs	r2, #96	@ 0x60
 8006078:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	d011      	beq.n	80060a8 <HAL_ADC_IRQHandler+0x374>
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00c      	beq.n	80060a8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006092:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8b4 	bl	8006208 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2280      	movs	r2, #128	@ 0x80
 80060a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d012      	beq.n	80060d8 <HAL_ADC_IRQHandler+0x3a4>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00d      	beq.n	80060d8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fcbd 	bl	8006a48 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d012      	beq.n	8006108 <HAL_ADC_IRQHandler+0x3d4>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00d      	beq.n	8006108 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fcaf 	bl	8006a5c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006106:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f003 0310 	and.w	r3, r3, #16
 800610e:	2b00      	cmp	r3, #0
 8006110:	d043      	beq.n	800619a <HAL_ADC_IRQHandler+0x466>
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	d03e      	beq.n	800619a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8006124:	2301      	movs	r3, #1
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
 8006128:	e021      	b.n	800616e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006138:	d004      	beq.n	8006144 <HAL_ADC_IRQHandler+0x410>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a28      	ldr	r2, [pc, #160]	@ (80061e0 <HAL_ADC_IRQHandler+0x4ac>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d101      	bne.n	8006148 <HAL_ADC_IRQHandler+0x414>
 8006144:	4b29      	ldr	r3, [pc, #164]	@ (80061ec <HAL_ADC_IRQHandler+0x4b8>)
 8006146:	e000      	b.n	800614a <HAL_ADC_IRQHandler+0x416>
 8006148:	4b29      	ldr	r3, [pc, #164]	@ (80061f0 <HAL_ADC_IRQHandler+0x4bc>)
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fa6d 	bl	800562a <LL_ADC_GetMultiDMATransfer>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8006156:	2301      	movs	r3, #1
 8006158:	627b      	str	r3, [r7, #36]	@ 0x24
 800615a:	e008      	b.n	800616e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800616a:	2301      	movs	r3, #1
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	2b01      	cmp	r3, #1
 8006172:	d10e      	bne.n	8006192 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006178:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006184:	f043 0202 	orr.w	r2, r3, #2
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f845 	bl	800621c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2210      	movs	r2, #16
 8006198:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d018      	beq.n	80061d6 <HAL_ADC_IRQHandler+0x4a2>
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d013      	beq.n	80061d6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061be:	f043 0208 	orr.w	r2, r3, #8
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061ce:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fc2f 	bl	8006a34 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80061d6:	bf00      	nop
 80061d8:	3728      	adds	r7, #40	@ 0x28
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	50000100 	.word	0x50000100
 80061e4:	50000500 	.word	0x50000500
 80061e8:	50000400 	.word	0x50000400
 80061ec:	50000300 	.word	0x50000300
 80061f0:	50000700 	.word	0x50000700

080061f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006238:	2300      	movs	r3, #0
 800623a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff fa76 	bl	8005732 <LL_ADC_IsEnabled>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d176      	bne.n	800633a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	4b3c      	ldr	r3, [pc, #240]	@ (8006344 <ADC_Enable+0x114>)
 8006254:	4013      	ands	r3, r2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00d      	beq.n	8006276 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800625e:	f043 0210 	orr.w	r2, r3, #16
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800626a:	f043 0201 	orr.w	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e062      	b.n	800633c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fa31 	bl	80056e2 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006288:	d004      	beq.n	8006294 <ADC_Enable+0x64>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2e      	ldr	r2, [pc, #184]	@ (8006348 <ADC_Enable+0x118>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d101      	bne.n	8006298 <ADC_Enable+0x68>
 8006294:	4b2d      	ldr	r3, [pc, #180]	@ (800634c <ADC_Enable+0x11c>)
 8006296:	e000      	b.n	800629a <ADC_Enable+0x6a>
 8006298:	4b2d      	ldr	r3, [pc, #180]	@ (8006350 <ADC_Enable+0x120>)
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff f983 	bl	80055a6 <LL_ADC_GetCommonPathInternalCh>
 80062a0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80062a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d013      	beq.n	80062d2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006354 <ADC_Enable+0x124>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	099b      	lsrs	r3, r3, #6
 80062b0:	4a29      	ldr	r2, [pc, #164]	@ (8006358 <ADC_Enable+0x128>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	099b      	lsrs	r3, r3, #6
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	4613      	mov	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80062c4:	e002      	b.n	80062cc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f9      	bne.n	80062c6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80062d2:	f7ff f949 	bl	8005568 <HAL_GetTick>
 80062d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80062d8:	e028      	b.n	800632c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff fa27 	bl	8005732 <LL_ADC_IsEnabled>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d104      	bne.n	80062f4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff f9f7 	bl	80056e2 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80062f4:	f7ff f938 	bl	8005568 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d914      	bls.n	800632c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b01      	cmp	r3, #1
 800630e:	d00d      	beq.n	800632c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006314:	f043 0210 	orr.w	r2, r3, #16
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006320:	f043 0201 	orr.w	r2, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e007      	b.n	800633c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b01      	cmp	r3, #1
 8006338:	d1cf      	bne.n	80062da <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	8000003f 	.word	0x8000003f
 8006348:	50000100 	.word	0x50000100
 800634c:	50000300 	.word	0x50000300
 8006350:	50000700 	.word	0x50000700
 8006354:	2000000c 	.word	0x2000000c
 8006358:	053e2d63 	.word	0x053e2d63

0800635c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff f9f5 	bl	8005758 <LL_ADC_IsDisableOngoing>
 800636e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff f9dc 	bl	8005732 <LL_ADC_IsEnabled>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d047      	beq.n	8006410 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d144      	bne.n	8006410 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 030d 	and.w	r3, r3, #13
 8006390:	2b01      	cmp	r3, #1
 8006392:	d10c      	bne.n	80063ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff f9b6 	bl	800570a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2203      	movs	r2, #3
 80063a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80063a6:	f7ff f8df 	bl	8005568 <HAL_GetTick>
 80063aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80063ac:	e029      	b.n	8006402 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b2:	f043 0210 	orr.w	r2, r3, #16
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063be:	f043 0201 	orr.w	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e023      	b.n	8006412 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80063ca:	f7ff f8cd 	bl	8005568 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d914      	bls.n	8006402 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00d      	beq.n	8006402 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ea:	f043 0210 	orr.w	r2, r3, #16
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f6:	f043 0201 	orr.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e007      	b.n	8006412 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1dc      	bne.n	80063ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <LL_ADC_SetCommonPathInternalCh>:
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	609a      	str	r2, [r3, #8]
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <LL_ADC_GetCommonPathInternalCh>:
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <LL_ADC_SetOffset>:
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3360      	adds	r3, #96	@ 0x60
 800646e:	461a      	mov	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b08      	ldr	r3, [pc, #32]	@ (80064a0 <LL_ADC_SetOffset+0x44>)
 800647e:	4013      	ands	r3, r2
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	4313      	orrs	r3, r2
 800648c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	bf00      	nop
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	03fff000 	.word	0x03fff000

080064a4 <LL_ADC_GetOffsetChannel>:
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3360      	adds	r3, #96	@ 0x60
 80064b2:	461a      	mov	r2, r3
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <LL_ADC_SetOffsetState>:
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3360      	adds	r3, #96	@ 0x60
 80064e0:	461a      	mov	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	431a      	orrs	r2, r3
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	601a      	str	r2, [r3, #0]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <LL_ADC_SetOffsetSign>:
{
 8006506:	b480      	push	{r7}
 8006508:	b087      	sub	sp, #28
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3360      	adds	r3, #96	@ 0x60
 8006516:	461a      	mov	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	431a      	orrs	r2, r3
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	601a      	str	r2, [r3, #0]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <LL_ADC_SetOffsetSaturation>:
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3360      	adds	r3, #96	@ 0x60
 800654c:	461a      	mov	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	431a      	orrs	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	601a      	str	r2, [r3, #0]
}
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	615a      	str	r2, [r3, #20]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <LL_ADC_INJ_GetTrigAuto>:
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <LL_ADC_SetChannelSamplingTime>:
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3314      	adds	r3, #20
 80065c4:	461a      	mov	r2, r3
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	0e5b      	lsrs	r3, r3, #25
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	4413      	add	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	0d1b      	lsrs	r3, r3, #20
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	2107      	movs	r1, #7
 80065e2:	fa01 f303 	lsl.w	r3, r1, r3
 80065e6:	43db      	mvns	r3, r3
 80065e8:	401a      	ands	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	0d1b      	lsrs	r3, r3, #20
 80065ee:	f003 031f 	and.w	r3, r3, #31
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	fa01 f303 	lsl.w	r3, r1, r3
 80065f8:	431a      	orrs	r2, r3
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	601a      	str	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <LL_ADC_SetChannelSingleDiff>:
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006624:	43db      	mvns	r3, r3
 8006626:	401a      	ands	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f003 0318 	and.w	r3, r3, #24
 800662e:	4908      	ldr	r1, [pc, #32]	@ (8006650 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006630:	40d9      	lsrs	r1, r3
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	400b      	ands	r3, r1
 8006636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800663a:	431a      	orrs	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	0007ffff 	.word	0x0007ffff

08006654 <LL_ADC_GetMultimode>:
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 031f 	and.w	r3, r3, #31
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <LL_ADC_IsEnabled>:
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <LL_ADC_IsEnabled+0x18>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <LL_ADC_IsEnabled+0x1a>
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <LL_ADC_StartCalibration>:
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80066a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	609a      	str	r2, [r3, #8]
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066dc:	d101      	bne.n	80066e2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <LL_ADC_REG_IsConversionOngoing>:
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b04      	cmp	r3, #4
 8006702:	d101      	bne.n	8006708 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <LL_ADC_INJ_StartConversion>:
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006726:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800672a:	f043 0208 	orr.w	r2, r3, #8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	609a      	str	r2, [r3, #8]
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <LL_ADC_INJ_IsConversionOngoing>:
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b08      	cmp	r3, #8
 8006750:	d101      	bne.n	8006756 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800676e:	2300      	movs	r3, #0
 8006770:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_ADCEx_Calibration_Start+0x1c>
 800677c:	2302      	movs	r3, #2
 800677e:	e04d      	b.n	800681c <HAL_ADCEx_Calibration_Start+0xb8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff fde7 	bl	800635c <ADC_Disable>
 800678e:	4603      	mov	r3, r0
 8006790:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d136      	bne.n	8006806 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800679c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80067a0:	f023 0302 	bic.w	r3, r3, #2
 80067a4:	f043 0202 	orr.w	r2, r3, #2
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff ff6f 	bl	8006696 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80067b8:	e014      	b.n	80067e4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3301      	adds	r3, #1
 80067be:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4a18      	ldr	r2, [pc, #96]	@ (8006824 <HAL_ADCEx_Calibration_Start+0xc0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d90d      	bls.n	80067e4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067cc:	f023 0312 	bic.w	r3, r3, #18
 80067d0:	f043 0210 	orr.w	r2, r3, #16
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e01b      	b.n	800681c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff ff6d 	bl	80066c8 <LL_ADC_IsCalibrationOnGoing>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e2      	bne.n	80067ba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f8:	f023 0303 	bic.w	r3, r3, #3
 80067fc:	f043 0201 	orr.w	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006804:	e005      	b.n	8006812 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800680a:	f043 0210 	orr.w	r2, r3, #16
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800681a:	7bfb      	ldrb	r3, [r7, #15]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	0004de01 	.word	0x0004de01

08006828 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006838:	d004      	beq.n	8006844 <HAL_ADCEx_InjectedStart_IT+0x1c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a78      	ldr	r2, [pc, #480]	@ (8006a20 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d101      	bne.n	8006848 <HAL_ADCEx_InjectedStart_IT+0x20>
 8006844:	4b77      	ldr	r3, [pc, #476]	@ (8006a24 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8006846:	e000      	b.n	800684a <HAL_ADCEx_InjectedStart_IT+0x22>
 8006848:	4b77      	ldr	r3, [pc, #476]	@ (8006a28 <HAL_ADCEx_InjectedStart_IT+0x200>)
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff ff02 	bl	8006654 <LL_ADC_GetMultimode>
 8006850:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff ff71 	bl	800673e <LL_ADC_INJ_IsConversionOngoing>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8006862:	2302      	movs	r3, #2
 8006864:	e0d8      	b.n	8006a18 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006870:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006878:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d107      	bne.n	8006896 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800688a:	f043 0220 	orr.w	r2, r3, #32
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e0c0      	b.n	8006a18 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_ADCEx_InjectedStart_IT+0x7c>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e0b9      	b.n	8006a18 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fcbf 	bl	8006230 <ADC_Enable>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 80a8 	bne.w	8006a0e <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d006      	beq.n	80068d8 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ce:	f023 0208 	bic.w	r2, r3, #8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80068d6:	e002      	b.n	80068de <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a4a      	ldr	r2, [pc, #296]	@ (8006a20 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d009      	beq.n	8006910 <HAL_ADCEx_InjectedStart_IT+0xe8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a4a      	ldr	r2, [pc, #296]	@ (8006a2c <HAL_ADCEx_InjectedStart_IT+0x204>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d002      	beq.n	800690c <HAL_ADCEx_InjectedStart_IT+0xe4>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	e003      	b.n	8006914 <HAL_ADCEx_InjectedStart_IT+0xec>
 800690c:	4b48      	ldr	r3, [pc, #288]	@ (8006a30 <HAL_ADCEx_InjectedStart_IT+0x208>)
 800690e:	e001      	b.n	8006914 <HAL_ADCEx_InjectedStart_IT+0xec>
 8006910:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	4293      	cmp	r3, r2
 800691a:	d002      	beq.n	8006922 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d105      	bne.n	800692e <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006926:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2260      	movs	r2, #96	@ 0x60
 8006934:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d007      	beq.n	800695c <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800695a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	2b08      	cmp	r3, #8
 8006962:	d110      	bne.n	8006986 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0220 	bic.w	r2, r2, #32
 8006972:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006982:	605a      	str	r2, [r3, #4]
          break;
 8006984:	e010      	b.n	80069a8 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006994:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0220 	orr.w	r2, r2, #32
 80069a4:	605a      	str	r2, [r3, #4]
          break;
 80069a6:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006a20 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_ADCEx_InjectedStart_IT+0x19e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1d      	ldr	r2, [pc, #116]	@ (8006a2c <HAL_ADCEx_InjectedStart_IT+0x204>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d002      	beq.n	80069c2 <HAL_ADCEx_InjectedStart_IT+0x19a>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	e003      	b.n	80069ca <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80069c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a30 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80069c4:	e001      	b.n	80069ca <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80069c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d008      	beq.n	80069e4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2b06      	cmp	r3, #6
 80069dc:	d002      	beq.n	80069e4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b07      	cmp	r3, #7
 80069e2:	d10d      	bne.n	8006a00 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fdd5 	bl	8006598 <LL_ADC_INJ_GetTrigAuto>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d110      	bne.n	8006a16 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff fe8c 	bl	8006716 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80069fe:	e00a      	b.n	8006a16 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a04:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a0c:	e003      	b.n	8006a16 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	50000100 	.word	0x50000100
 8006a24:	50000300 	.word	0x50000300
 8006a28:	50000700 	.word	0x50000700
 8006a2c:	50000500 	.word	0x50000500
 8006a30:	50000400 	.word	0x50000400

08006a34 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b0b6      	sub	sp, #216	@ 0xd8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d102      	bne.n	8006aae <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	f000 bcfd 	b.w	80074a8 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d130      	bne.n	8006b28 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b09      	cmp	r3, #9
 8006acc:	d179      	bne.n	8006bc2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d010      	beq.n	8006af8 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	0e9b      	lsrs	r3, r3, #26
 8006adc:	025b      	lsls	r3, r3, #9
 8006ade:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae6:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8006aea:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006af6:	e007      	b.n	8006b08 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	0e9b      	lsrs	r3, r3, #26
 8006afe:	025b      	lsls	r3, r3, #9
 8006b00:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8006b04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b0e:	4b84      	ldr	r3, [pc, #528]	@ (8006d20 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8006b1a:	430b      	orrs	r3, r1
 8006b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b24:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006b26:	e04c      	b.n	8006bc2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11d      	bne.n	8006b6c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	6a1a      	ldr	r2, [r3, #32]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b50:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8006b54:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b60:	e004      	b.n	8006b6c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	0e9b      	lsrs	r3, r3, #26
 8006b72:	f003 021f 	and.w	r2, r3, #31
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b90:	1e5a      	subs	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8006d20 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fdb9 	bl	800673e <LL_ADC_INJ_IsConversionOngoing>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d124      	bne.n	8006c1c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d112      	bne.n	8006c02 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006bec:	055a      	lsls	r2, r3, #21
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006bf4:	051b      	lsls	r3, r3, #20
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	60da      	str	r2, [r3, #12]
 8006c00:	e00c      	b.n	8006c1c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006c12:	055a      	lsls	r2, r3, #21
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff fd65 	bl	80066f0 <LL_ADC_REG_IsConversionOngoing>
 8006c26:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fd85 	bl	800673e <LL_ADC_INJ_IsConversionOngoing>
 8006c34:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 822e 	bne.w	800709e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f040 8229 	bne.w	800709e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d116      	bne.n	8006c8a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d108      	bne.n	8006c78 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8006c74:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006c76:	e01f      	b.n	8006cb8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8006c86:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006c88:	e016      	b.n	8006cb8 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d109      	bne.n	8006ca8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c98:	f043 0220 	orr.w	r2, r3, #32
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006ca6:	e007      	b.n	8006cb8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8006cb6:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d110      	bne.n	8006ce4 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0202 	orr.w	r2, r2, #2
 8006ce0:	611a      	str	r2, [r3, #16]
 8006ce2:	e007      	b.n	8006cf4 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0202 	bic.w	r2, r2, #2
 8006cf2:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cfc:	d112      	bne.n	8006d24 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2200      	movs	r2, #0
 8006d08:	4619      	mov	r1, r3
 8006d0a:	f7ff fc53 	bl	80065b4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff fc2b 	bl	8006572 <LL_ADC_SetSamplingTimeCommonConfig>
 8006d1c:	e011      	b.n	8006d42 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8006d1e:	bf00      	nop
 8006d20:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8006d30:	461a      	mov	r2, r3
 8006d32:	f7ff fc3f 	bl	80065b4 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff fc18 	bl	8006572 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695a      	ldr	r2, [r3, #20]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	08db      	lsrs	r3, r3, #3
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d022      	beq.n	8006daa <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	6919      	ldr	r1, [r3, #16]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d74:	f7ff fb72 	bl	800645c <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	6919      	ldr	r1, [r3, #16]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	461a      	mov	r2, r3
 8006d86:	f7ff fbbe 	bl	8006506 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d102      	bne.n	8006da0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8006d9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d9e:	e000      	b.n	8006da2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8006da0:	2300      	movs	r3, #0
 8006da2:	461a      	mov	r2, r3
 8006da4:	f7ff fbca 	bl	800653c <LL_ADC_SetOffsetSaturation>
 8006da8:	e179      	b.n	800709e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff fb77 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff fb6c 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	0e9b      	lsrs	r3, r3, #26
 8006dd0:	f003 021f 	and.w	r2, r3, #31
 8006dd4:	e01e      	b.n	8006e14 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fb61 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dec:	fa93 f3a3 	rbit	r3, r3
 8006df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006df4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006df8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006dfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 8006e04:	2320      	movs	r3, #32
 8006e06:	e004      	b.n	8006e12 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8006e08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e0c:	fab3 f383 	clz	r3, r3
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d105      	bne.n	8006e2c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	0e9b      	lsrs	r3, r3, #26
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	e018      	b.n	8006e5e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e38:	fa93 f3a3 	rbit	r3, r3
 8006e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006e40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006e48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8006e50:	2320      	movs	r3, #32
 8006e52:	e004      	b.n	8006e5e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8006e54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e58:	fab3 f383 	clz	r3, r3
 8006e5c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d106      	bne.n	8006e70 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2200      	movs	r2, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff fb30 	bl	80064d0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2101      	movs	r1, #1
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff fb14 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10a      	bne.n	8006e9c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff fb09 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8006e92:	4603      	mov	r3, r0
 8006e94:	0e9b      	lsrs	r3, r3, #26
 8006e96:	f003 021f 	and.w	r2, r3, #31
 8006e9a:	e01e      	b.n	8006eda <HAL_ADCEx_InjectedConfigChannel+0x456>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fafe 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006eb2:	fa93 f3a3 	rbit	r3, r3
 8006eb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006eba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8006ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8006eca:	2320      	movs	r3, #32
 8006ecc:	e004      	b.n	8006ed8 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8006ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ed2:	fab3 f383 	clz	r3, r3
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	0e9b      	lsrs	r3, r3, #26
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	e018      	b.n	8006f24 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006efe:	fa93 f3a3 	rbit	r3, r3
 8006f02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8006f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006f0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8006f16:	2320      	movs	r3, #32
 8006f18:	e004      	b.n	8006f24 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8006f1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f1e:	fab3 f383 	clz	r3, r3
 8006f22:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d106      	bne.n	8006f36 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2101      	movs	r1, #1
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff facd 	bl	80064d0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2102      	movs	r1, #2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff fab1 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2102      	movs	r1, #2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff faa6 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	0e9b      	lsrs	r3, r3, #26
 8006f5c:	f003 021f 	and.w	r2, r3, #31
 8006f60:	e01e      	b.n	8006fa0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2102      	movs	r1, #2
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fa9b 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f78:	fa93 f3a3 	rbit	r3, r3
 8006f7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8006f90:	2320      	movs	r3, #32
 8006f92:	e004      	b.n	8006f9e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8006f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f98:	fab3 f383 	clz	r3, r3
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	0e9b      	lsrs	r3, r3, #26
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	e014      	b.n	8006fe2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006fc0:	fa93 f3a3 	rbit	r3, r3
 8006fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006fc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006fcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	e004      	b.n	8006fe2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8006fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fdc:	fab3 f383 	clz	r3, r3
 8006fe0:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d106      	bne.n	8006ff4 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2200      	movs	r2, #0
 8006fec:	2102      	movs	r1, #2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff fa6e 	bl	80064d0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2103      	movs	r1, #3
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff fa52 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8007000:	4603      	mov	r3, r0
 8007002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2103      	movs	r1, #3
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff fa47 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 8007016:	4603      	mov	r3, r0
 8007018:	0e9b      	lsrs	r3, r3, #26
 800701a:	f003 021f 	and.w	r2, r3, #31
 800701e:	e017      	b.n	8007050 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2103      	movs	r1, #3
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff fa3c 	bl	80064a4 <LL_ADC_GetOffsetChannel>
 800702c:	4603      	mov	r3, r0
 800702e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007030:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007032:	fa93 f3a3 	rbit	r3, r3
 8007036:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800703a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800703c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8007042:	2320      	movs	r3, #32
 8007044:	e003      	b.n	800704e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8007046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007048:	fab3 f383 	clz	r3, r3
 800704c:	b2db      	uxtb	r3, r3
 800704e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007058:	2b00      	cmp	r3, #0
 800705a:	d105      	bne.n	8007068 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	0e9b      	lsrs	r3, r3, #26
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	e011      	b.n	800708c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007070:	fa93 f3a3 	rbit	r3, r3
 8007074:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8007076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007078:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800707a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8007080:	2320      	movs	r3, #32
 8007082:	e003      	b.n	800708c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8007084:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007086:	fab3 f383 	clz	r3, r3
 800708a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800708c:	429a      	cmp	r2, r3
 800708e:	d106      	bne.n	800709e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2200      	movs	r2, #0
 8007096:	2103      	movs	r1, #3
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff fa19 	bl	80064d0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff fae4 	bl	8006670 <LL_ADC_IsEnabled>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 813d 	bne.w	800732a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	6819      	ldr	r1, [r3, #0]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	461a      	mov	r2, r3
 80070be:	f7ff faa5 	bl	800660c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	4aa2      	ldr	r2, [pc, #648]	@ (8007350 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	f040 812e 	bne.w	800732a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10b      	bne.n	80070f6 <HAL_ADCEx_InjectedConfigChannel+0x672>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	0e9b      	lsrs	r3, r3, #26
 80070e4:	3301      	adds	r3, #1
 80070e6:	f003 031f 	and.w	r3, r3, #31
 80070ea:	2b09      	cmp	r3, #9
 80070ec:	bf94      	ite	ls
 80070ee:	2301      	movls	r3, #1
 80070f0:	2300      	movhi	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	e019      	b.n	800712a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070fe:	fa93 f3a3 	rbit	r3, r3
 8007102:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8007104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007106:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8007108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800710e:	2320      	movs	r3, #32
 8007110:	e003      	b.n	800711a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8007112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007114:	fab3 f383 	clz	r3, r3
 8007118:	b2db      	uxtb	r3, r3
 800711a:	3301      	adds	r3, #1
 800711c:	f003 031f 	and.w	r3, r3, #31
 8007120:	2b09      	cmp	r3, #9
 8007122:	bf94      	ite	ls
 8007124:	2301      	movls	r3, #1
 8007126:	2300      	movhi	r3, #0
 8007128:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800712a:	2b00      	cmp	r3, #0
 800712c:	d079      	beq.n	8007222 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007136:	2b00      	cmp	r3, #0
 8007138:	d107      	bne.n	800714a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	0e9b      	lsrs	r3, r3, #26
 8007140:	3301      	adds	r3, #1
 8007142:	069b      	lsls	r3, r3, #26
 8007144:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007148:	e015      	b.n	8007176 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007152:	fa93 f3a3 	rbit	r3, r3
 8007156:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8007158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800715a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800715c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8007162:	2320      	movs	r3, #32
 8007164:	e003      	b.n	800716e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8007166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007168:	fab3 f383 	clz	r3, r3
 800716c:	b2db      	uxtb	r3, r3
 800716e:	3301      	adds	r3, #1
 8007170:	069b      	lsls	r3, r3, #26
 8007172:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	0e9b      	lsrs	r3, r3, #26
 8007188:	3301      	adds	r3, #1
 800718a:	f003 031f 	and.w	r3, r3, #31
 800718e:	2101      	movs	r1, #1
 8007190:	fa01 f303 	lsl.w	r3, r1, r3
 8007194:	e017      	b.n	80071c6 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800719e:	fa93 f3a3 	rbit	r3, r3
 80071a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80071a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80071a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80071ae:	2320      	movs	r3, #32
 80071b0:	e003      	b.n	80071ba <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80071b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071b4:	fab3 f383 	clz	r3, r3
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	3301      	adds	r3, #1
 80071bc:	f003 031f 	and.w	r3, r3, #31
 80071c0:	2101      	movs	r1, #1
 80071c2:	fa01 f303 	lsl.w	r3, r1, r3
 80071c6:	ea42 0103 	orr.w	r1, r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <HAL_ADCEx_InjectedConfigChannel+0x768>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	0e9b      	lsrs	r3, r3, #26
 80071dc:	3301      	adds	r3, #1
 80071de:	f003 021f 	and.w	r2, r3, #31
 80071e2:	4613      	mov	r3, r2
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	4413      	add	r3, r2
 80071e8:	051b      	lsls	r3, r3, #20
 80071ea:	e018      	b.n	800721e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f4:	fa93 f3a3 	rbit	r3, r3
 80071f8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8007204:	2320      	movs	r3, #32
 8007206:	e003      	b.n	8007210 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8007208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720a:	fab3 f383 	clz	r3, r3
 800720e:	b2db      	uxtb	r3, r3
 8007210:	3301      	adds	r3, #1
 8007212:	f003 021f 	and.w	r2, r3, #31
 8007216:	4613      	mov	r3, r2
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	4413      	add	r3, r2
 800721c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800721e:	430b      	orrs	r3, r1
 8007220:	e07e      	b.n	8007320 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800722a:	2b00      	cmp	r3, #0
 800722c:	d107      	bne.n	800723e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	0e9b      	lsrs	r3, r3, #26
 8007234:	3301      	adds	r3, #1
 8007236:	069b      	lsls	r3, r3, #26
 8007238:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800723c:	e015      	b.n	800726a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007246:	fa93 f3a3 	rbit	r3, r3
 800724a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8007256:	2320      	movs	r3, #32
 8007258:	e003      	b.n	8007262 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 800725a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725c:	fab3 f383 	clz	r3, r3
 8007260:	b2db      	uxtb	r3, r3
 8007262:	3301      	adds	r3, #1
 8007264:	069b      	lsls	r3, r3, #26
 8007266:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	0e9b      	lsrs	r3, r3, #26
 800727c:	3301      	adds	r3, #1
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	2101      	movs	r1, #1
 8007284:	fa01 f303 	lsl.w	r3, r1, r3
 8007288:	e017      	b.n	80072ba <HAL_ADCEx_InjectedConfigChannel+0x836>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	fa93 f3a3 	rbit	r3, r3
 8007296:	61bb      	str	r3, [r7, #24]
  return result;
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80072a2:	2320      	movs	r3, #32
 80072a4:	e003      	b.n	80072ae <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	fab3 f383 	clz	r3, r3
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	3301      	adds	r3, #1
 80072b0:	f003 031f 	and.w	r3, r3, #31
 80072b4:	2101      	movs	r1, #1
 80072b6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ba:	ea42 0103 	orr.w	r1, r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10d      	bne.n	80072e6 <HAL_ADCEx_InjectedConfigChannel+0x862>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	0e9b      	lsrs	r3, r3, #26
 80072d0:	3301      	adds	r3, #1
 80072d2:	f003 021f 	and.w	r2, r3, #31
 80072d6:	4613      	mov	r3, r2
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	4413      	add	r3, r2
 80072dc:	3b1e      	subs	r3, #30
 80072de:	051b      	lsls	r3, r3, #20
 80072e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80072e4:	e01b      	b.n	800731e <HAL_ADCEx_InjectedConfigChannel+0x89a>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	fa93 f3a3 	rbit	r3, r3
 80072f2:	60fb      	str	r3, [r7, #12]
  return result;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 80072fe:	2320      	movs	r3, #32
 8007300:	e003      	b.n	800730a <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	fab3 f383 	clz	r3, r3
 8007308:	b2db      	uxtb	r3, r3
 800730a:	3301      	adds	r3, #1
 800730c:	f003 021f 	and.w	r2, r3, #31
 8007310:	4613      	mov	r3, r2
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	3b1e      	subs	r3, #30
 8007318:	051b      	lsls	r3, r3, #20
 800731a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800731e:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007324:	4619      	mov	r1, r3
 8007326:	f7ff f945 	bl	80065b4 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4b09      	ldr	r3, [pc, #36]	@ (8007354 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80b2 	beq.w	800749c <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007340:	d004      	beq.n	800734c <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a04      	ldr	r2, [pc, #16]	@ (8007358 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d109      	bne.n	8007360 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 800734c:	4b03      	ldr	r3, [pc, #12]	@ (800735c <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 800734e:	e008      	b.n	8007362 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8007350:	407f0000 	.word	0x407f0000
 8007354:	80080000 	.word	0x80080000
 8007358:	50000100 	.word	0x50000100
 800735c:	50000300 	.word	0x50000300
 8007360:	4b53      	ldr	r3, [pc, #332]	@ (80074b0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff f86c 	bl	8006440 <LL_ADC_GetCommonPathInternalCh>
 8007368:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a50      	ldr	r2, [pc, #320]	@ (80074b4 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d004      	beq.n	8007380 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a4f      	ldr	r2, [pc, #316]	@ (80074b8 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d139      	bne.n	80073f4 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d133      	bne.n	80073f4 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007394:	d004      	beq.n	80073a0 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a48      	ldr	r2, [pc, #288]	@ (80074bc <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d17a      	bne.n	8007496 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073a8:	d004      	beq.n	80073b4 <HAL_ADCEx_InjectedConfigChannel+0x930>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a44      	ldr	r2, [pc, #272]	@ (80074c0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d101      	bne.n	80073b8 <HAL_ADCEx_InjectedConfigChannel+0x934>
 80073b4:	4a43      	ldr	r2, [pc, #268]	@ (80074c4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80073b6:	e000      	b.n	80073ba <HAL_ADCEx_InjectedConfigChannel+0x936>
 80073b8:	4a3d      	ldr	r2, [pc, #244]	@ (80074b0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80073ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7ff f828 	bl	800641a <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80073ca:	4b3f      	ldr	r3, [pc, #252]	@ (80074c8 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	099b      	lsrs	r3, r3, #6
 80073d0:	4a3e      	ldr	r2, [pc, #248]	@ (80074cc <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	099a      	lsrs	r2, r3, #6
 80073d8:	4613      	mov	r3, r2
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80073e2:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80073e4:	e002      	b.n	80073ec <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f9      	bne.n	80073e6 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80073f2:	e050      	b.n	8007496 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a35      	ldr	r2, [pc, #212]	@ (80074d0 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d125      	bne.n	800744a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80073fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007402:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d11f      	bne.n	800744a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a2c      	ldr	r2, [pc, #176]	@ (80074c0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d104      	bne.n	800741e <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a2e      	ldr	r2, [pc, #184]	@ (80074d4 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d03d      	beq.n	800749a <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007426:	d004      	beq.n	8007432 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a24      	ldr	r2, [pc, #144]	@ (80074c0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d101      	bne.n	8007436 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8007432:	4a24      	ldr	r2, [pc, #144]	@ (80074c4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8007434:	e000      	b.n	8007438 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8007436:	4a1e      	ldr	r2, [pc, #120]	@ (80074b0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8007438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800743c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fe ffe9 	bl	800641a <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007448:	e027      	b.n	800749a <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a22      	ldr	r2, [pc, #136]	@ (80074d8 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d123      	bne.n	800749c <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007454:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d11d      	bne.n	800749c <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a16      	ldr	r2, [pc, #88]	@ (80074c0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d018      	beq.n	800749c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007472:	d004      	beq.n	800747e <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a11      	ldr	r2, [pc, #68]	@ (80074c0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d101      	bne.n	8007482 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 800747e:	4a11      	ldr	r2, [pc, #68]	@ (80074c4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8007480:	e000      	b.n	8007484 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8007482:	4a0b      	ldr	r2, [pc, #44]	@ (80074b0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8007484:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007488:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f7fe ffc3 	bl	800641a <LL_ADC_SetCommonPathInternalCh>
 8007494:	e002      	b.n	800749c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007496:	bf00      	nop
 8007498:	e000      	b.n	800749c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800749a:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80074a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	37d8      	adds	r7, #216	@ 0xd8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	50000700 	.word	0x50000700
 80074b4:	c3210000 	.word	0xc3210000
 80074b8:	90c00010 	.word	0x90c00010
 80074bc:	50000600 	.word	0x50000600
 80074c0:	50000100 	.word	0x50000100
 80074c4:	50000300 	.word	0x50000300
 80074c8:	2000000c 	.word	0x2000000c
 80074cc:	053e2d63 	.word	0x053e2d63
 80074d0:	c7520000 	.word	0xc7520000
 80074d4:	50000500 	.word	0x50000500
 80074d8:	cb840000 	.word	0xcb840000

080074dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80074dc:	b590      	push	{r4, r7, lr}
 80074de:	b0a1      	sub	sp, #132	@ 0x84
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80074f6:	2302      	movs	r3, #2
 80074f8:	e0e7      	b.n	80076ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007502:	2300      	movs	r3, #0
 8007504:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007506:	2300      	movs	r3, #0
 8007508:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007512:	d102      	bne.n	800751a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007514:	4b6f      	ldr	r3, [pc, #444]	@ (80076d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007516:	60bb      	str	r3, [r7, #8]
 8007518:	e009      	b.n	800752e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a6e      	ldr	r2, [pc, #440]	@ (80076d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d102      	bne.n	800752a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007524:	4b6d      	ldr	r3, [pc, #436]	@ (80076dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007526:	60bb      	str	r3, [r7, #8]
 8007528:	e001      	b.n	800752e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800752a:	2300      	movs	r3, #0
 800752c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007538:	f043 0220 	orr.w	r2, r3, #32
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e0be      	b.n	80076ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4618      	mov	r0, r3
 8007550:	f7ff f8ce 	bl	80066f0 <LL_ADC_REG_IsConversionOngoing>
 8007554:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff f8c8 	bl	80066f0 <LL_ADC_REG_IsConversionOngoing>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	f040 80a0 	bne.w	80076a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 809c 	bne.w	80076a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007578:	d004      	beq.n	8007584 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a55      	ldr	r2, [pc, #340]	@ (80076d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d101      	bne.n	8007588 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007584:	4b56      	ldr	r3, [pc, #344]	@ (80076e0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007586:	e000      	b.n	800758a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007588:	4b56      	ldr	r3, [pc, #344]	@ (80076e4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800758a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d04b      	beq.n	800762c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007594:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	6859      	ldr	r1, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80075a6:	035b      	lsls	r3, r3, #13
 80075a8:	430b      	orrs	r3, r1
 80075aa:	431a      	orrs	r2, r3
 80075ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075b8:	d004      	beq.n	80075c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a45      	ldr	r2, [pc, #276]	@ (80076d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d10f      	bne.n	80075e4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80075c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80075c8:	f7ff f852 	bl	8006670 <LL_ADC_IsEnabled>
 80075cc:	4604      	mov	r4, r0
 80075ce:	4841      	ldr	r0, [pc, #260]	@ (80076d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075d0:	f7ff f84e 	bl	8006670 <LL_ADC_IsEnabled>
 80075d4:	4603      	mov	r3, r0
 80075d6:	4323      	orrs	r3, r4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf0c      	ite	eq
 80075dc:	2301      	moveq	r3, #1
 80075de:	2300      	movne	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	e012      	b.n	800760a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80075e4:	483c      	ldr	r0, [pc, #240]	@ (80076d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80075e6:	f7ff f843 	bl	8006670 <LL_ADC_IsEnabled>
 80075ea:	4604      	mov	r4, r0
 80075ec:	483b      	ldr	r0, [pc, #236]	@ (80076dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80075ee:	f7ff f83f 	bl	8006670 <LL_ADC_IsEnabled>
 80075f2:	4603      	mov	r3, r0
 80075f4:	431c      	orrs	r4, r3
 80075f6:	483c      	ldr	r0, [pc, #240]	@ (80076e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80075f8:	f7ff f83a 	bl	8006670 <LL_ADC_IsEnabled>
 80075fc:	4603      	mov	r3, r0
 80075fe:	4323      	orrs	r3, r4
 8007600:	2b00      	cmp	r3, #0
 8007602:	bf0c      	ite	eq
 8007604:	2301      	moveq	r3, #1
 8007606:	2300      	movne	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d056      	beq.n	80076bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800760e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007616:	f023 030f 	bic.w	r3, r3, #15
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	6811      	ldr	r1, [r2, #0]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	6892      	ldr	r2, [r2, #8]
 8007622:	430a      	orrs	r2, r1
 8007624:	431a      	orrs	r2, r3
 8007626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007628:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800762a:	e047      	b.n	80076bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800762c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007636:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007640:	d004      	beq.n	800764c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a23      	ldr	r2, [pc, #140]	@ (80076d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d10f      	bne.n	800766c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800764c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007650:	f7ff f80e 	bl	8006670 <LL_ADC_IsEnabled>
 8007654:	4604      	mov	r4, r0
 8007656:	481f      	ldr	r0, [pc, #124]	@ (80076d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007658:	f7ff f80a 	bl	8006670 <LL_ADC_IsEnabled>
 800765c:	4603      	mov	r3, r0
 800765e:	4323      	orrs	r3, r4
 8007660:	2b00      	cmp	r3, #0
 8007662:	bf0c      	ite	eq
 8007664:	2301      	moveq	r3, #1
 8007666:	2300      	movne	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	e012      	b.n	8007692 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800766c:	481a      	ldr	r0, [pc, #104]	@ (80076d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800766e:	f7fe ffff 	bl	8006670 <LL_ADC_IsEnabled>
 8007672:	4604      	mov	r4, r0
 8007674:	4819      	ldr	r0, [pc, #100]	@ (80076dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007676:	f7fe fffb 	bl	8006670 <LL_ADC_IsEnabled>
 800767a:	4603      	mov	r3, r0
 800767c:	431c      	orrs	r4, r3
 800767e:	481a      	ldr	r0, [pc, #104]	@ (80076e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007680:	f7fe fff6 	bl	8006670 <LL_ADC_IsEnabled>
 8007684:	4603      	mov	r3, r0
 8007686:	4323      	orrs	r3, r4
 8007688:	2b00      	cmp	r3, #0
 800768a:	bf0c      	ite	eq
 800768c:	2301      	moveq	r3, #1
 800768e:	2300      	movne	r3, #0
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d012      	beq.n	80076bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800769e:	f023 030f 	bic.w	r3, r3, #15
 80076a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80076a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80076a6:	e009      	b.n	80076bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ac:	f043 0220 	orr.w	r2, r3, #32
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80076ba:	e000      	b.n	80076be <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80076bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80076c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3784      	adds	r7, #132	@ 0x84
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd90      	pop	{r4, r7, pc}
 80076d2:	bf00      	nop
 80076d4:	50000100 	.word	0x50000100
 80076d8:	50000400 	.word	0x50000400
 80076dc:	50000500 	.word	0x50000500
 80076e0:	50000300 	.word	0x50000300
 80076e4:	50000700 	.word	0x50000700
 80076e8:	50000600 	.word	0x50000600

080076ec <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e023      	b.n	8007746 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fc ff28 	bl	8004568 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007760:	4b0c      	ldr	r3, [pc, #48]	@ (8007794 <__NVIC_SetPriorityGrouping+0x44>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800776c:	4013      	ands	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800777c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007782:	4a04      	ldr	r2, [pc, #16]	@ (8007794 <__NVIC_SetPriorityGrouping+0x44>)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	60d3      	str	r3, [r2, #12]
}
 8007788:	bf00      	nop
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	e000ed00 	.word	0xe000ed00

08007798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800779c:	4b04      	ldr	r3, [pc, #16]	@ (80077b0 <__NVIC_GetPriorityGrouping+0x18>)
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	0a1b      	lsrs	r3, r3, #8
 80077a2:	f003 0307 	and.w	r3, r3, #7
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	e000ed00 	.word	0xe000ed00

080077b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	db0b      	blt.n	80077de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	f003 021f 	and.w	r2, r3, #31
 80077cc:	4907      	ldr	r1, [pc, #28]	@ (80077ec <__NVIC_EnableIRQ+0x38>)
 80077ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	2001      	movs	r0, #1
 80077d6:	fa00 f202 	lsl.w	r2, r0, r2
 80077da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	e000e100 	.word	0xe000e100

080077f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007800:	2b00      	cmp	r3, #0
 8007802:	db0a      	blt.n	800781a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	490c      	ldr	r1, [pc, #48]	@ (800783c <__NVIC_SetPriority+0x4c>)
 800780a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800780e:	0112      	lsls	r2, r2, #4
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	440b      	add	r3, r1
 8007814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007818:	e00a      	b.n	8007830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	b2da      	uxtb	r2, r3
 800781e:	4908      	ldr	r1, [pc, #32]	@ (8007840 <__NVIC_SetPriority+0x50>)
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	3b04      	subs	r3, #4
 8007828:	0112      	lsls	r2, r2, #4
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	440b      	add	r3, r1
 800782e:	761a      	strb	r2, [r3, #24]
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	e000e100 	.word	0xe000e100
 8007840:	e000ed00 	.word	0xe000ed00

08007844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007844:	b480      	push	{r7}
 8007846:	b089      	sub	sp, #36	@ 0x24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f1c3 0307 	rsb	r3, r3, #7
 800785e:	2b04      	cmp	r3, #4
 8007860:	bf28      	it	cs
 8007862:	2304      	movcs	r3, #4
 8007864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	3304      	adds	r3, #4
 800786a:	2b06      	cmp	r3, #6
 800786c:	d902      	bls.n	8007874 <NVIC_EncodePriority+0x30>
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	3b03      	subs	r3, #3
 8007872:	e000      	b.n	8007876 <NVIC_EncodePriority+0x32>
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007878:	f04f 32ff 	mov.w	r2, #4294967295
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	43da      	mvns	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	401a      	ands	r2, r3
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800788c:	f04f 31ff 	mov.w	r1, #4294967295
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	fa01 f303 	lsl.w	r3, r1, r3
 8007896:	43d9      	mvns	r1, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800789c:	4313      	orrs	r3, r2
         );
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3724      	adds	r7, #36	@ 0x24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
	...

080078ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078bc:	d301      	bcc.n	80078c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80078be:	2301      	movs	r3, #1
 80078c0:	e00f      	b.n	80078e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80078c2:	4a0a      	ldr	r2, [pc, #40]	@ (80078ec <SysTick_Config+0x40>)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80078ca:	210f      	movs	r1, #15
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	f7ff ff8e 	bl	80077f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80078d4:	4b05      	ldr	r3, [pc, #20]	@ (80078ec <SysTick_Config+0x40>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80078da:	4b04      	ldr	r3, [pc, #16]	@ (80078ec <SysTick_Config+0x40>)
 80078dc:	2207      	movs	r2, #7
 80078de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	e000e010 	.word	0xe000e010

080078f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff ff29 	bl	8007750 <__NVIC_SetPriorityGrouping>
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b086      	sub	sp, #24
 800790a:	af00      	add	r7, sp, #0
 800790c:	4603      	mov	r3, r0
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
 8007912:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007914:	f7ff ff40 	bl	8007798 <__NVIC_GetPriorityGrouping>
 8007918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	6978      	ldr	r0, [r7, #20]
 8007920:	f7ff ff90 	bl	8007844 <NVIC_EncodePriority>
 8007924:	4602      	mov	r2, r0
 8007926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff ff5f 	bl	80077f0 <__NVIC_SetPriority>
}
 8007932:	bf00      	nop
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	4603      	mov	r3, r0
 8007942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff ff33 	bl	80077b4 <__NVIC_EnableIRQ>
}
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff ffa4 	bl	80078ac <SysTick_Config>
 8007964:	4603      	mov	r3, r0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e08d      	b.n	8007a9e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	4b47      	ldr	r3, [pc, #284]	@ (8007aa8 <HAL_DMA_Init+0x138>)
 800798a:	429a      	cmp	r2, r3
 800798c:	d80f      	bhi.n	80079ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	4b45      	ldr	r3, [pc, #276]	@ (8007aac <HAL_DMA_Init+0x13c>)
 8007996:	4413      	add	r3, r2
 8007998:	4a45      	ldr	r2, [pc, #276]	@ (8007ab0 <HAL_DMA_Init+0x140>)
 800799a:	fba2 2303 	umull	r2, r3, r2, r3
 800799e:	091b      	lsrs	r3, r3, #4
 80079a0:	009a      	lsls	r2, r3, #2
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a42      	ldr	r2, [pc, #264]	@ (8007ab4 <HAL_DMA_Init+0x144>)
 80079aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80079ac:	e00e      	b.n	80079cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	4b40      	ldr	r3, [pc, #256]	@ (8007ab8 <HAL_DMA_Init+0x148>)
 80079b6:	4413      	add	r3, r2
 80079b8:	4a3d      	ldr	r2, [pc, #244]	@ (8007ab0 <HAL_DMA_Init+0x140>)
 80079ba:	fba2 2303 	umull	r2, r3, r2, r3
 80079be:	091b      	lsrs	r3, r3, #4
 80079c0:	009a      	lsls	r2, r3, #2
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a3c      	ldr	r2, [pc, #240]	@ (8007abc <HAL_DMA_Init+0x14c>)
 80079ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80079e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80079f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa2c 	bl	8007e7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a2c:	d102      	bne.n	8007a34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a3c:	b2d2      	uxtb	r2, r2
 8007a3e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a48:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d010      	beq.n	8007a74 <HAL_DMA_Init+0x104>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d80c      	bhi.n	8007a74 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fa4c 	bl	8007ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007a70:	605a      	str	r2, [r3, #4]
 8007a72:	e008      	b.n	8007a86 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40020407 	.word	0x40020407
 8007aac:	bffdfff8 	.word	0xbffdfff8
 8007ab0:	cccccccd 	.word	0xcccccccd
 8007ab4:	40020000 	.word	0x40020000
 8007ab8:	bffdfbf8 	.word	0xbffdfbf8
 8007abc:	40020400 	.word	0x40020400

08007ac0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_DMA_Start_IT+0x20>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e066      	b.n	8007bae <HAL_DMA_Start_IT+0xee>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d155      	bne.n	8007ba0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0201 	bic.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f970 	bl	8007dfe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d008      	beq.n	8007b38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f042 020e 	orr.w	r2, r2, #14
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	e00f      	b.n	8007b58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0204 	bic.w	r2, r2, #4
 8007b46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 020a 	orr.w	r2, r2, #10
 8007b56:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b74:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d007      	beq.n	8007b8e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b8c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0201 	orr.w	r2, r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e005      	b.n	8007bac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d00d      	beq.n	8007bea <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2204      	movs	r2, #4
 8007bd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]
 8007be8:	e047      	b.n	8007c7a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 020e 	bic.w	r2, r2, #14
 8007bf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0201 	bic.w	r2, r2, #1
 8007c08:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c1e:	f003 021f 	and.w	r2, r3, #31
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c26:	2101      	movs	r1, #1
 8007c28:	fa01 f202 	lsl.w	r2, r1, r2
 8007c2c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c36:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00c      	beq.n	8007c5a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007c58:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
    }
  }
  return status;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca0:	f003 031f 	and.w	r3, r3, #31
 8007ca4:	2204      	movs	r2, #4
 8007ca6:	409a      	lsls	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d026      	beq.n	8007cfe <HAL_DMA_IRQHandler+0x7a>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d021      	beq.n	8007cfe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d107      	bne.n	8007cd8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0204 	bic.w	r2, r2, #4
 8007cd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cdc:	f003 021f 	and.w	r2, r3, #31
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce4:	2104      	movs	r1, #4
 8007ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8007cea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d071      	beq.n	8007dd8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007cfc:	e06c      	b.n	8007dd8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d02:	f003 031f 	and.w	r3, r3, #31
 8007d06:	2202      	movs	r2, #2
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d02e      	beq.n	8007d70 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d029      	beq.n	8007d70 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 020a 	bic.w	r2, r2, #10
 8007d38:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d46:	f003 021f 	and.w	r2, r3, #31
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4e:	2102      	movs	r1, #2
 8007d50:	fa01 f202 	lsl.w	r2, r1, r2
 8007d54:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d038      	beq.n	8007dd8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007d6e:	e033      	b.n	8007dd8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d74:	f003 031f 	and.w	r3, r3, #31
 8007d78:	2208      	movs	r2, #8
 8007d7a:	409a      	lsls	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d02a      	beq.n	8007dda <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d025      	beq.n	8007dda <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 020e 	bic.w	r2, r2, #14
 8007d9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da2:	f003 021f 	and.w	r2, r3, #31
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	2101      	movs	r1, #1
 8007dac:	fa01 f202 	lsl.w	r2, r1, r2
 8007db0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d004      	beq.n	8007dda <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007dd8:	bf00      	nop
 8007dda:	bf00      	nop
}
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007df0:	b2db      	uxtb	r3, r3
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007e14:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007e26:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e2c:	f003 021f 	and.w	r2, r3, #31
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e34:	2101      	movs	r1, #1
 8007e36:	fa01 f202 	lsl.w	r2, r1, r2
 8007e3a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d108      	bne.n	8007e5e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007e5c:	e007      	b.n	8007e6e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	60da      	str	r2, [r3, #12]
}
 8007e6e:	bf00      	nop
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4b16      	ldr	r3, [pc, #88]	@ (8007ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d802      	bhi.n	8007e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007e90:	4b15      	ldr	r3, [pc, #84]	@ (8007ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	e001      	b.n	8007e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007e96:	4b15      	ldr	r3, [pc, #84]	@ (8007eec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007e98:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	3b08      	subs	r3, #8
 8007ea6:	4a12      	ldr	r2, [pc, #72]	@ (8007ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eac:	091b      	lsrs	r3, r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb4:	089b      	lsrs	r3, r3, #2
 8007eb6:	009a      	lsls	r2, r3, #2
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	4413      	add	r3, r2
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8007ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007ec6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f003 031f 	and.w	r3, r3, #31
 8007ece:	2201      	movs	r2, #1
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007ed6:	bf00      	nop
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40020407 	.word	0x40020407
 8007ee8:	40020800 	.word	0x40020800
 8007eec:	40020820 	.word	0x40020820
 8007ef0:	cccccccd 	.word	0xcccccccd
 8007ef4:	40020880 	.word	0x40020880

08007ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	461a      	mov	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a08      	ldr	r2, [pc, #32]	@ (8007f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007f1a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	2201      	movs	r2, #1
 8007f26:	409a      	lsls	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007f2c:	bf00      	nop
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	1000823f 	.word	0x1000823f
 8007f3c:	40020940 	.word	0x40020940

08007f40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e147      	b.n	80081e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d106      	bne.n	8007f6c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7fc fb1e 	bl	80045a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	699a      	ldr	r2, [r3, #24]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0210 	bic.w	r2, r2, #16
 8007f7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f7c:	f7fd faf4 	bl	8005568 <HAL_GetTick>
 8007f80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007f82:	e012      	b.n	8007faa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007f84:	f7fd faf0 	bl	8005568 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b0a      	cmp	r3, #10
 8007f90:	d90b      	bls.n	8007faa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f96:	f043 0201 	orr.w	r2, r3, #1
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e11b      	b.n	80081e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	f003 0308 	and.w	r3, r3, #8
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d0e5      	beq.n	8007f84 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699a      	ldr	r2, [r3, #24]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0201 	orr.w	r2, r2, #1
 8007fc6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007fc8:	f7fd face 	bl	8005568 <HAL_GetTick>
 8007fcc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007fce:	e012      	b.n	8007ff6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007fd0:	f7fd faca 	bl	8005568 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b0a      	cmp	r3, #10
 8007fdc:	d90b      	bls.n	8007ff6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fe2:	f043 0201 	orr.w	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2203      	movs	r2, #3
 8007fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e0f5      	b.n	80081e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0e5      	beq.n	8007fd0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0202 	orr.w	r2, r2, #2
 8008012:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a74      	ldr	r2, [pc, #464]	@ (80081ec <HAL_FDCAN_Init+0x2ac>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d103      	bne.n	8008026 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800801e:	4a74      	ldr	r2, [pc, #464]	@ (80081f0 <HAL_FDCAN_Init+0x2b0>)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	7c1b      	ldrb	r3, [r3, #16]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d108      	bne.n	8008040 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	699a      	ldr	r2, [r3, #24]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800803c:	619a      	str	r2, [r3, #24]
 800803e:	e007      	b.n	8008050 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800804e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7c5b      	ldrb	r3, [r3, #17]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d108      	bne.n	800806a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008066:	619a      	str	r2, [r3, #24]
 8008068:	e007      	b.n	800807a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699a      	ldr	r2, [r3, #24]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008078:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7c9b      	ldrb	r3, [r3, #18]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d108      	bne.n	8008094 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008090:	619a      	str	r2, [r3, #24]
 8008092:	e007      	b.n	80080a4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699a      	ldr	r2, [r3, #24]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80080a2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699a      	ldr	r2, [r3, #24]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80080c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	691a      	ldr	r2, [r3, #16]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0210 	bic.w	r2, r2, #16
 80080d8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d108      	bne.n	80080f4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699a      	ldr	r2, [r3, #24]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f042 0204 	orr.w	r2, r2, #4
 80080f0:	619a      	str	r2, [r3, #24]
 80080f2:	e02c      	b.n	800814e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d028      	beq.n	800814e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d01c      	beq.n	800813e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699a      	ldr	r2, [r3, #24]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008112:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0210 	orr.w	r2, r2, #16
 8008122:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	2b03      	cmp	r3, #3
 800812a:	d110      	bne.n	800814e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0220 	orr.w	r2, r2, #32
 800813a:	619a      	str	r2, [r3, #24]
 800813c:	e007      	b.n	800814e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	699a      	ldr	r2, [r3, #24]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0220 	orr.w	r2, r2, #32
 800814c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	3b01      	subs	r3, #1
 8008154:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	3b01      	subs	r3, #1
 800815c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800815e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008166:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	3b01      	subs	r3, #1
 8008170:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008176:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008178:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008182:	d115      	bne.n	80081b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008188:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818e:	3b01      	subs	r3, #1
 8008190:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008192:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008198:	3b01      	subs	r3, #1
 800819a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800819c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a4:	3b01      	subs	r3, #1
 80081a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80081ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80081ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fc56 	bl	8008a78 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	40006400 	.word	0x40006400
 80081f0:	40006500 	.word	0x40006500

080081f4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008204:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d002      	beq.n	8008212 <HAL_FDCAN_ConfigFilter+0x1e>
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d13d      	bne.n	800828e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d119      	bne.n	800824e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008226:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800822e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008234:	4313      	orrs	r3, r2
 8008236:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	e01d      	b.n	800828a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	075a      	lsls	r2, r3, #29
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	4313      	orrs	r3, r2
 800825a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	079a      	lsls	r2, r3, #30
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	4413      	add	r3, r2
 8008276:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	3304      	adds	r3, #4
 8008282:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	e006      	b.n	800829c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008292:	f043 0202 	orr.w	r2, r3, #2
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
  }
}
 800829c:	4618      	mov	r0, r3
 800829e:	371c      	adds	r7, #28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d110      	bne.n	80082de <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0201 	bic.w	r2, r2, #1
 80082d2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	e006      	b.n	80082ec <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082e2:	f043 0204 	orr.w	r2, r3, #4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
  }
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d12c      	bne.n	800836a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008324:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e023      	b.n	8008378 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008338:	0c1b      	lsrs	r3, r3, #16
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 fc02 	bl	8008b50 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2101      	movs	r1, #1
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	fa01 f202 	lsl.w	r2, r1, r2
 8008358:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800835c:	2201      	movs	r2, #1
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	409a      	lsls	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	e006      	b.n	8008378 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800836e:	f043 0208 	orr.w	r2, r3, #8
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
  }
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008380:	b480      	push	{r7}
 8008382:	b08b      	sub	sp, #44	@ 0x2c
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008398:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800839a:	7efb      	ldrb	r3, [r7, #27]
 800839c:	2b02      	cmp	r3, #2
 800839e:	f040 80e8 	bne.w	8008572 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b40      	cmp	r3, #64	@ 0x40
 80083a6:	d137      	bne.n	8008418 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b0:	f003 030f 	and.w	r3, r3, #15
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d107      	bne.n	80083c8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e0db      	b.n	8008580 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d0:	0e1b      	lsrs	r3, r3, #24
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d10a      	bne.n	80083f0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083e2:	0a5b      	lsrs	r3, r3, #9
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80083ec:	2301      	movs	r3, #1
 80083ee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083f8:	0a1b      	lsrs	r3, r3, #8
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	4613      	mov	r3, r2
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	4413      	add	r3, r2
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	440b      	add	r3, r1
 8008414:	627b      	str	r3, [r7, #36]	@ 0x24
 8008416:	e036      	b.n	8008486 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	2b00      	cmp	r3, #0
 8008426:	d107      	bne.n	8008438 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800842c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e0a3      	b.n	8008580 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008440:	0e1b      	lsrs	r3, r3, #24
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b01      	cmp	r3, #1
 8008448:	d10a      	bne.n	8008460 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008452:	0a1b      	lsrs	r3, r3, #8
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b01      	cmp	r3, #1
 800845a:	d101      	bne.n	8008460 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800845c:	2301      	movs	r3, #1
 800845e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008468:	0a1b      	lsrs	r3, r3, #8
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	4413      	add	r3, r2
 8008472:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	4613      	mov	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4413      	add	r3, r2
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	440b      	add	r3, r1
 8008484:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d107      	bne.n	80084aa <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	0c9b      	lsrs	r3, r3, #18
 80084a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	e005      	b.n	80084b6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80084c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	3304      	adds	r3, #4
 80084d2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	b29a      	uxth	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	0c1b      	lsrs	r3, r3, #16
 80084e4:	f003 020f 	and.w	r2, r3, #15
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80084ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	0e1b      	lsrs	r3, r3, #24
 800850a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	0fda      	lsrs	r2, r3, #31
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800851c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851e:	3304      	adds	r3, #4
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008526:	2300      	movs	r3, #0
 8008528:	623b      	str	r3, [r7, #32]
 800852a:	e00a      	b.n	8008542 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	441a      	add	r2, r3
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	440b      	add	r3, r1
 8008538:	7812      	ldrb	r2, [r2, #0]
 800853a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	3301      	adds	r3, #1
 8008540:	623b      	str	r3, [r7, #32]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	4a11      	ldr	r2, [pc, #68]	@ (800858c <HAL_FDCAN_GetRxMessage+0x20c>)
 8008548:	5cd3      	ldrb	r3, [r2, r3]
 800854a:	461a      	mov	r2, r3
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	4293      	cmp	r3, r2
 8008550:	d3ec      	bcc.n	800852c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b40      	cmp	r3, #64	@ 0x40
 8008556:	d105      	bne.n	8008564 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	69fa      	ldr	r2, [r7, #28]
 800855e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8008562:	e004      	b.n	800856e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	e006      	b.n	8008580 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008576:	f043 0208 	orr.w	r2, r3, #8
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
  }
}
 8008580:	4618      	mov	r0, r3
 8008582:	372c      	adds	r7, #44	@ 0x2c
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	0800d450 	.word	0x0800d450

08008590 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80085a2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d003      	beq.n	80085b2 <HAL_FDCAN_ActivateNotification+0x22>
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	f040 80c8 	bne.w	8008742 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085b8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d004      	beq.n	80085ce <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d03b      	beq.n	8008646 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d004      	beq.n	80085e2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d031      	beq.n	8008646 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f003 0304 	and.w	r3, r3, #4
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d027      	beq.n	8008646 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d004      	beq.n	800860a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f003 0308 	and.w	r3, r3, #8
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01d      	beq.n	8008646 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f003 0310 	and.w	r3, r3, #16
 800861a:	2b00      	cmp	r3, #0
 800861c:	d013      	beq.n	8008646 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008624:	2b00      	cmp	r3, #0
 8008626:	d004      	beq.n	8008632 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d009      	beq.n	8008646 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00c      	beq.n	8008656 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d107      	bne.n	8008656 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f042 0201 	orr.w	r2, r2, #1
 8008654:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d13b      	bne.n	80086e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008670:	2b00      	cmp	r3, #0
 8008672:	d004      	beq.n	800867e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d131      	bne.n	80086e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008684:	2b00      	cmp	r3, #0
 8008686:	d004      	beq.n	8008692 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	2b00      	cmp	r3, #0
 8008690:	d127      	bne.n	80086e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f003 0308 	and.w	r3, r3, #8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d11d      	bne.n	80086e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f003 0310 	and.w	r3, r3, #16
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d113      	bne.n	80086e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d004      	beq.n	80086ce <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f003 0320 	and.w	r3, r3, #32
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d109      	bne.n	80086e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00c      	beq.n	80086f2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d007      	beq.n	80086f2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 0202 	orr.w	r2, r2, #2
 80086f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d009      	beq.n	8008710 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	430a      	orrs	r2, r1
 800870c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	430a      	orrs	r2, r1
 800872a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	430a      	orrs	r2, r1
 800873c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	e006      	b.n	8008750 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008746:	f043 0202 	orr.w	r2, r3, #2
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
  }
}
 8008750:	4618      	mov	r0, r3
 8008752:	371c      	adds	r7, #28
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08c      	sub	sp, #48	@ 0x30
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800876a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800876e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008778:	4013      	ands	r3, r2
 800877a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800878e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008790:	4013      	ands	r3, r2
 8008792:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800879a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800879e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087a8:	4013      	ands	r3, r2
 80087aa:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80087b6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087be:	6a3a      	ldr	r2, [r7, #32]
 80087c0:	4013      	ands	r3, r2
 80087c2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80087ce:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087d6:	69fa      	ldr	r2, [r7, #28]
 80087d8:	4013      	ands	r3, r2
 80087da:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ea:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00b      	beq.n	800880e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d006      	beq.n	800880e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2240      	movs	r2, #64	@ 0x40
 8008806:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f916 	bl	8008a3a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008814:	2b00      	cmp	r3, #0
 8008816:	d019      	beq.n	800884c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800881e:	2b00      	cmp	r3, #0
 8008820:	d014      	beq.n	800884c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800882a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4013      	ands	r3, r2
 8008838:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008842:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008844:	6939      	ldr	r1, [r7, #16]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f8d8 	bl	80089fc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800884c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d007      	beq.n	8008862 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008858:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800885a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f8a2 	bl	80089a6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8008862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800886e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7f8 ff60 	bl	8001738 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008884:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8008886:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f897 	bl	80089bc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00c      	beq.n	80088b2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d007      	beq.n	80088b2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f890 	bl	80089d2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d018      	beq.n	80088ee <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d013      	beq.n	80088ee <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80088ce:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4013      	ands	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2280      	movs	r2, #128	@ 0x80
 80088e4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f87c 	bl	80089e6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00c      	beq.n	8008912 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800890a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f880 	bl	8008a12 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00c      	beq.n	8008936 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d007      	beq.n	8008936 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800892e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f878 	bl	8008a26 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00f      	beq.n	8008960 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008952:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008958:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d007      	beq.n	8008976 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800896e:	69f9      	ldr	r1, [r7, #28]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f876 	bl	8008a62 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d009      	beq.n	8008990 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a3a      	ldr	r2, [r7, #32]
 8008982:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	431a      	orrs	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f858 	bl	8008a4e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800899e:	bf00      	nop
 80089a0:	3730      	adds	r7, #48	@ 0x30
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008a1a:	bf00      	nop
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008a80:	4b30      	ldr	r3, [pc, #192]	@ (8008b44 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8008a82:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a2f      	ldr	r2, [pc, #188]	@ (8008b48 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d103      	bne.n	8008a96 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008a94:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8008b4c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d103      	bne.n	8008aa8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8008aa6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ab6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008abe:	041a      	lsls	r2, r3, #16
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008adc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae4:	061a      	lsls	r2, r3, #24
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	430a      	orrs	r2, r1
 8008aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	e005      	b.n	8008b2a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3304      	adds	r3, #4
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d3f3      	bcc.n	8008b1e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	4000a400 	.word	0x4000a400
 8008b48:	40006800 	.word	0x40006800
 8008b4c:	40006c00 	.word	0x40006c00

08008b50 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b089      	sub	sp, #36	@ 0x24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10a      	bne.n	8008b7c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008b6e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008b76:	4313      	orrs	r3, r2
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	e00a      	b.n	8008b92 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008b84:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008b8a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008b8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b90:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008b9c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008ba2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008ba8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	00db      	lsls	r3, r3, #3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	440b      	add	r3, r1
 8008bc4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008bde:	2300      	movs	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	e020      	b.n	8008c26 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	3303      	adds	r3, #3
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	4413      	add	r3, r2
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	3302      	adds	r3, #2
 8008bf4:	6879      	ldr	r1, [r7, #4]
 8008bf6:	440b      	add	r3, r1
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008bfc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	3301      	adds	r3, #1
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	440b      	add	r3, r1
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008c0a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	440a      	add	r2, r1
 8008c12:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008c14:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	3304      	adds	r3, #4
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	4a06      	ldr	r2, [pc, #24]	@ (8008c44 <FDCAN_CopyMessageToRAM+0xf4>)
 8008c2c:	5cd3      	ldrb	r3, [r2, r3]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d3d6      	bcc.n	8008be4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	3724      	adds	r7, #36	@ 0x24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	0800d450 	.word	0x0800d450

08008c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008c56:	e15a      	b.n	8008f0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	4013      	ands	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 814c 	beq.w	8008f08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d005      	beq.n	8008c88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d130      	bne.n	8008cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	2203      	movs	r2, #3
 8008c94:	fa02 f303 	lsl.w	r3, r2, r3
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	43db      	mvns	r3, r3
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	091b      	lsrs	r3, r3, #4
 8008cd4:	f003 0201 	and.w	r2, r3, #1
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d017      	beq.n	8008d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	2203      	movs	r2, #3
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	43db      	mvns	r3, r3
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d123      	bne.n	8008d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	08da      	lsrs	r2, r3, #3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3208      	adds	r2, #8
 8008d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	220f      	movs	r2, #15
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	43db      	mvns	r3, r3
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4013      	ands	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	691a      	ldr	r2, [r3, #16]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f003 0307 	and.w	r3, r3, #7
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	fa02 f303 	lsl.w	r3, r2, r3
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	08da      	lsrs	r2, r3, #3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3208      	adds	r2, #8
 8008d74:	6939      	ldr	r1, [r7, #16]
 8008d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	2203      	movs	r2, #3
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f003 0203 	and.w	r2, r3, #3
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 80a6 	beq.w	8008f08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8008f2c <HAL_GPIO_Init+0x2e4>)
 8008dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8008f2c <HAL_GPIO_Init+0x2e4>)
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8008dc8:	4b58      	ldr	r3, [pc, #352]	@ (8008f2c <HAL_GPIO_Init+0x2e4>)
 8008dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008dd4:	4a56      	ldr	r2, [pc, #344]	@ (8008f30 <HAL_GPIO_Init+0x2e8>)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	089b      	lsrs	r3, r3, #2
 8008dda:	3302      	adds	r3, #2
 8008ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	220f      	movs	r2, #15
 8008dec:	fa02 f303 	lsl.w	r3, r2, r3
 8008df0:	43db      	mvns	r3, r3
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	4013      	ands	r3, r2
 8008df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008dfe:	d01f      	beq.n	8008e40 <HAL_GPIO_Init+0x1f8>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a4c      	ldr	r2, [pc, #304]	@ (8008f34 <HAL_GPIO_Init+0x2ec>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d019      	beq.n	8008e3c <HAL_GPIO_Init+0x1f4>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a4b      	ldr	r2, [pc, #300]	@ (8008f38 <HAL_GPIO_Init+0x2f0>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d013      	beq.n	8008e38 <HAL_GPIO_Init+0x1f0>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a4a      	ldr	r2, [pc, #296]	@ (8008f3c <HAL_GPIO_Init+0x2f4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00d      	beq.n	8008e34 <HAL_GPIO_Init+0x1ec>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a49      	ldr	r2, [pc, #292]	@ (8008f40 <HAL_GPIO_Init+0x2f8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d007      	beq.n	8008e30 <HAL_GPIO_Init+0x1e8>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a48      	ldr	r2, [pc, #288]	@ (8008f44 <HAL_GPIO_Init+0x2fc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d101      	bne.n	8008e2c <HAL_GPIO_Init+0x1e4>
 8008e28:	2305      	movs	r3, #5
 8008e2a:	e00a      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e2c:	2306      	movs	r3, #6
 8008e2e:	e008      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e30:	2304      	movs	r3, #4
 8008e32:	e006      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e34:	2303      	movs	r3, #3
 8008e36:	e004      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e002      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e000      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e40:	2300      	movs	r3, #0
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	f002 0203 	and.w	r2, r2, #3
 8008e48:	0092      	lsls	r2, r2, #2
 8008e4a:	4093      	lsls	r3, r2
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e52:	4937      	ldr	r1, [pc, #220]	@ (8008f30 <HAL_GPIO_Init+0x2e8>)
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	089b      	lsrs	r3, r3, #2
 8008e58:	3302      	adds	r3, #2
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e60:	4b39      	ldr	r3, [pc, #228]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	43db      	mvns	r3, r3
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008e84:	4a30      	ldr	r2, [pc, #192]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	43db      	mvns	r3, r3
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4013      	ands	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008eae:	4a26      	ldr	r2, [pc, #152]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008eb4:	4b24      	ldr	r3, [pc, #144]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	43db      	mvns	r3, r3
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008ede:	4b1a      	ldr	r3, [pc, #104]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	43db      	mvns	r3, r3
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	4013      	ands	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008f02:	4a11      	ldr	r2, [pc, #68]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	fa22 f303 	lsr.w	r3, r2, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f47f ae9d 	bne.w	8008c58 <HAL_GPIO_Init+0x10>
  }
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	40021000 	.word	0x40021000
 8008f30:	40010000 	.word	0x40010000
 8008f34:	48000400 	.word	0x48000400
 8008f38:	48000800 	.word	0x48000800
 8008f3c:	48000c00 	.word	0x48000c00
 8008f40:	48001000 	.word	0x48001000
 8008f44:	48001400 	.word	0x48001400
 8008f48:	40010400 	.word	0x40010400

08008f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f5c:	787b      	ldrb	r3, [r7, #1]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008f62:	887a      	ldrh	r2, [r7, #2]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008f68:	e002      	b.n	8008f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008f6a:	887a      	ldrh	r2, [r7, #2]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008f86:	4b08      	ldr	r3, [pc, #32]	@ (8008fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f88:	695a      	ldr	r2, [r3, #20]
 8008f8a:	88fb      	ldrh	r3, [r7, #6]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d006      	beq.n	8008fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f92:	4a05      	ldr	r2, [pc, #20]	@ (8008fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f94:	88fb      	ldrh	r3, [r7, #6]
 8008f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f98:	88fb      	ldrh	r3, [r7, #6]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 f806 	bl	8008fac <HAL_GPIO_EXTI_Callback>
  }
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40010400 	.word	0x40010400

08008fac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e08d      	b.n	80090f0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d106      	bne.n	8008fee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7fb fb51 	bl	8004690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2224      	movs	r2, #36	@ 0x24
 8008ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f022 0201 	bic.w	r2, r2, #1
 8009004:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009012:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009022:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d107      	bne.n	800903c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009038:	609a      	str	r2, [r3, #8]
 800903a:	e006      	b.n	800904a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009048:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	2b02      	cmp	r3, #2
 8009050:	d108      	bne.n	8009064 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	e007      	b.n	8009074 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009072:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	6812      	ldr	r2, [r2, #0]
 800907e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009086:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009096:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691a      	ldr	r2, [r3, #16]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	69d9      	ldr	r1, [r3, #28]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1a      	ldr	r2, [r3, #32]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0201 	orr.w	r2, r2, #1
 80090d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08a      	sub	sp, #40	@ 0x28
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	607a      	str	r2, [r7, #4]
 8009102:	461a      	mov	r2, r3
 8009104:	460b      	mov	r3, r1
 8009106:	817b      	strh	r3, [r7, #10]
 8009108:	4613      	mov	r3, r2
 800910a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b20      	cmp	r3, #32
 800911a:	f040 80ef 	bne.w	80092fc <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800912c:	d101      	bne.n	8009132 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800912e:	2302      	movs	r3, #2
 8009130:	e0e5      	b.n	80092fe <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_I2C_Master_Transmit_DMA+0x48>
 800913c:	2302      	movs	r3, #2
 800913e:	e0de      	b.n	80092fe <HAL_I2C_Master_Transmit_DMA+0x206>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2221      	movs	r2, #33	@ 0x21
 800914c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2210      	movs	r2, #16
 8009154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	893a      	ldrh	r2, [r7, #8]
 8009168:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4a66      	ldr	r2, [pc, #408]	@ (8009308 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800916e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4a66      	ldr	r2, [pc, #408]	@ (800930c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8009174:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800917a:	b29b      	uxth	r3, r3
 800917c:	2bff      	cmp	r3, #255	@ 0xff
 800917e:	d906      	bls.n	800918e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	22ff      	movs	r2, #255	@ 0xff
 8009184:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009186:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800918a:	61fb      	str	r3, [r7, #28]
 800918c:	e007      	b.n	800919e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009192:	b29a      	uxth	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009198:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800919c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d01a      	beq.n	80091dc <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091c0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	3b01      	subs	r3, #1
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091d4:	3b01      	subs	r3, #1
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d074      	beq.n	80092ce <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d022      	beq.n	8009232 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f0:	4a47      	ldr	r2, [pc, #284]	@ (8009310 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80091f2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f8:	4a46      	ldr	r2, [pc, #280]	@ (8009314 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80091fa:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009200:	2200      	movs	r2, #0
 8009202:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009208:	2200      	movs	r2, #0
 800920a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009214:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800921c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8009222:	f7fe fc4d 	bl	8007ac0 <HAL_DMA_Start_IT>
 8009226:	4603      	mov	r3, r0
 8009228:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d13a      	bne.n	80092a6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8009230:	e013      	b.n	800925a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2220      	movs	r2, #32
 8009236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009246:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e051      	b.n	80092fe <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800925e:	b2db      	uxtb	r3, r3
 8009260:	3301      	adds	r3, #1
 8009262:	b2da      	uxtb	r2, r3
 8009264:	8979      	ldrh	r1, [r7, #10]
 8009266:	4b2c      	ldr	r3, [pc, #176]	@ (8009318 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f001 fcbb 	bl	800abe8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009276:	b29a      	uxth	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	b29a      	uxth	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800928c:	2110      	movs	r1, #16
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f001 fcdc 	bl	800ac4c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	e028      	b.n	80092f8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ba:	f043 0210 	orr.w	r2, r3, #16
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e017      	b.n	80092fe <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	4a12      	ldr	r2, [pc, #72]	@ (800931c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80092d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	8979      	ldrh	r1, [r7, #10]
 80092da:	4b0f      	ldr	r3, [pc, #60]	@ (8009318 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f001 fc80 	bl	800abe8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80092f0:	2101      	movs	r1, #1
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f001 fcaa 	bl	800ac4c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	e000      	b.n	80092fe <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80092fc:	2302      	movs	r3, #2
  }
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3720      	adds	r7, #32
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	ffff0000 	.word	0xffff0000
 800930c:	08009ad3 	.word	0x08009ad3
 8009310:	0800aa53 	.word	0x0800aa53
 8009314:	0800ab7f 	.word	0x0800ab7f
 8009318:	80002000 	.word	0x80002000
 800931c:	08009693 	.word	0x08009693

08009320 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b088      	sub	sp, #32
 8009324:	af02      	add	r7, sp, #8
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	607a      	str	r2, [r7, #4]
 800932a:	461a      	mov	r2, r3
 800932c:	460b      	mov	r3, r1
 800932e:	817b      	strh	r3, [r7, #10]
 8009330:	4613      	mov	r3, r2
 8009332:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b20      	cmp	r3, #32
 800933e:	f040 80cd 	bne.w	80094dc <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800934c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009350:	d101      	bne.n	8009356 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8009352:	2302      	movs	r3, #2
 8009354:	e0c3      	b.n	80094de <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800935c:	2b01      	cmp	r3, #1
 800935e:	d101      	bne.n	8009364 <HAL_I2C_Master_Receive_DMA+0x44>
 8009360:	2302      	movs	r3, #2
 8009362:	e0bc      	b.n	80094de <HAL_I2C_Master_Receive_DMA+0x1be>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2222      	movs	r2, #34	@ 0x22
 8009370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2210      	movs	r2, #16
 8009378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	893a      	ldrh	r2, [r7, #8]
 800938c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4a55      	ldr	r2, [pc, #340]	@ (80094e8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8009392:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	4a55      	ldr	r2, [pc, #340]	@ (80094ec <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8009398:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800939e:	b29b      	uxth	r3, r3
 80093a0:	2bff      	cmp	r3, #255	@ 0xff
 80093a2:	d906      	bls.n	80093b2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	22ff      	movs	r2, #255	@ 0xff
 80093a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80093aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	e007      	b.n	80093c2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80093bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093c0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d070      	beq.n	80094ac <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d020      	beq.n	8009414 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d6:	4a46      	ldr	r2, [pc, #280]	@ (80094f0 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80093d8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093de:	4a45      	ldr	r2, [pc, #276]	@ (80094f4 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80093e0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e6:	2200      	movs	r2, #0
 80093e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ee:	2200      	movs	r2, #0
 80093f0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3324      	adds	r3, #36	@ 0x24
 80093fc:	4619      	mov	r1, r3
 80093fe:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8009404:	f7fe fb5c 	bl	8007ac0 <HAL_DMA_Start_IT>
 8009408:	4603      	mov	r3, r0
 800940a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800940c:	7cfb      	ldrb	r3, [r7, #19]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d138      	bne.n	8009484 <HAL_I2C_Master_Receive_DMA+0x164>
 8009412:	e013      	b.n	800943c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2220      	movs	r2, #32
 8009418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009428:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e050      	b.n	80094de <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009440:	b2da      	uxtb	r2, r3
 8009442:	8979      	ldrh	r1, [r7, #10]
 8009444:	4b2c      	ldr	r3, [pc, #176]	@ (80094f8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f001 fbcc 	bl	800abe8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009454:	b29a      	uxth	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	b29a      	uxth	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800946a:	2110      	movs	r1, #16
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f001 fbed 	bl	800ac4c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e029      	b.n	80094d8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2220      	movs	r2, #32
 8009488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009498:	f043 0210 	orr.w	r2, r3, #16
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e018      	b.n	80094de <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4a13      	ldr	r2, [pc, #76]	@ (80094fc <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80094b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	8979      	ldrh	r1, [r7, #10]
 80094ba:	4b0f      	ldr	r3, [pc, #60]	@ (80094f8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f001 fb90 	bl	800abe8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80094d0:	2102      	movs	r1, #2
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f001 fbba 	bl	800ac4c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	e000      	b.n	80094de <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80094dc:	2302      	movs	r3, #2
  }
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	ffff0000 	.word	0xffff0000
 80094ec:	08009ad3 	.word	0x08009ad3
 80094f0:	0800aae9 	.word	0x0800aae9
 80094f4:	0800ab7f 	.word	0x0800ab7f
 80094f8:	80002400 	.word	0x80002400
 80094fc:	08009693 	.word	0x08009693

08009500 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800951c:	2b00      	cmp	r3, #0
 800951e:	d005      	beq.n	800952c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	68f9      	ldr	r1, [r7, #12]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	4798      	blx	r3
  }
}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00f      	beq.n	8009576 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00a      	beq.n	8009576 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009564:	f043 0201 	orr.w	r2, r3, #1
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009574:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00f      	beq.n	80095a0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800958e:	f043 0208 	orr.w	r2, r3, #8
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800959e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00f      	beq.n	80095ca <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00a      	beq.n	80095ca <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b8:	f043 0202 	orr.w	r2, r3, #2
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095c8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f003 030b 	and.w	r3, r3, #11
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80095da:	68f9      	ldr	r1, [r7, #12]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 f8fd 	bl	800a7dc <I2C_ITError>
  }
}
 80095e2:	bf00      	nop
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b083      	sub	sp, #12
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80095f2:	bf00      	nop
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009606:	bf00      	nop
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	70fb      	strb	r3, [r7, #3]
 800961e:	4613      	mov	r3, r2
 8009620:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009622:	bf00      	nop
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009636:	bf00      	nop
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009642:	b480      	push	{r7}
 8009644:	b083      	sub	sp, #12
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800966a:	b480      	push	{r7}
 800966c:	b083      	sub	sp, #12
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009672:	bf00      	nop
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009686:	bf00      	nop
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b088      	sub	sp, #32
 8009696:	af02      	add	r7, sp, #8
 8009698:	60f8      	str	r0, [r7, #12]
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d101      	bne.n	80096b0 <I2C_Master_ISR_IT+0x1e>
 80096ac:	2302      	movs	r3, #2
 80096ae:	e113      	b.n	80098d8 <I2C_Master_ISR_IT+0x246>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f003 0310 	and.w	r3, r3, #16
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d012      	beq.n	80096e8 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00d      	beq.n	80096e8 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2210      	movs	r2, #16
 80096d2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d8:	f043 0204 	orr.w	r2, r3, #4
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f001 f992 	bl	800aa0a <I2C_Flush_TXDR>
 80096e6:	e0e4      	b.n	80098b2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f003 0304 	and.w	r3, r3, #4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d022      	beq.n	8009738 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d01d      	beq.n	8009738 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f023 0304 	bic.w	r3, r3, #4
 8009702:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970e:	b2d2      	uxtb	r2, r2
 8009710:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800972c:	b29b      	uxth	r3, r3
 800972e:	3b01      	subs	r3, #1
 8009730:	b29a      	uxth	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009736:	e0bc      	b.n	80098b2 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800973e:	2b00      	cmp	r3, #0
 8009740:	d128      	bne.n	8009794 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009748:	2b00      	cmp	r3, #0
 800974a:	d023      	beq.n	8009794 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009752:	2b00      	cmp	r3, #0
 8009754:	d01e      	beq.n	8009794 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800975a:	b29b      	uxth	r3, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	f000 80a8 	beq.w	80098b2 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009766:	781a      	ldrb	r2, [r3, #0]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800977c:	3b01      	subs	r3, #1
 800977e:	b29a      	uxth	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009788:	b29b      	uxth	r3, r3
 800978a:	3b01      	subs	r3, #1
 800978c:	b29a      	uxth	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8009792:	e08e      	b.n	80098b2 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800979a:	2b00      	cmp	r3, #0
 800979c:	d05c      	beq.n	8009858 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d057      	beq.n	8009858 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d040      	beq.n	8009834 <I2C_Master_ISR_IT+0x1a2>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d13c      	bne.n	8009834 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097c6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	2bff      	cmp	r3, #255	@ 0xff
 80097d0:	d90e      	bls.n	80097f0 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	22ff      	movs	r2, #255	@ 0xff
 80097d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	8a79      	ldrh	r1, [r7, #18]
 80097e0:	2300      	movs	r3, #0
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f001 f9fd 	bl	800abe8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097ee:	e032      	b.n	8009856 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009802:	d00b      	beq.n	800981c <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009808:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800980e:	8a79      	ldrh	r1, [r7, #18]
 8009810:	2000      	movs	r0, #0
 8009812:	9000      	str	r0, [sp, #0]
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f001 f9e7 	bl	800abe8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800981a:	e01c      	b.n	8009856 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009820:	b2da      	uxtb	r2, r3
 8009822:	8a79      	ldrh	r1, [r7, #18]
 8009824:	2300      	movs	r3, #0
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f001 f9db 	bl	800abe8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009832:	e010      	b.n	8009856 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800983e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009842:	d003      	beq.n	800984c <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 fcb0 	bl	800a1aa <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800984a:	e032      	b.n	80098b2 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800984c:	2140      	movs	r1, #64	@ 0x40
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 ffc4 	bl	800a7dc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009854:	e02d      	b.n	80098b2 <I2C_Master_ISR_IT+0x220>
 8009856:	e02c      	b.n	80098b2 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800985e:	2b00      	cmp	r3, #0
 8009860:	d027      	beq.n	80098b2 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009868:	2b00      	cmp	r3, #0
 800986a:	d022      	beq.n	80098b2 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009870:	b29b      	uxth	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d119      	bne.n	80098aa <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009880:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009884:	d015      	beq.n	80098b2 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800988e:	d108      	bne.n	80098a2 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800989e:	605a      	str	r2, [r3, #4]
 80098a0:	e007      	b.n	80098b2 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 fc81 	bl	800a1aa <I2C_ITMasterSeqCplt>
 80098a8:	e003      	b.n	80098b2 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80098aa:	2140      	movs	r1, #64	@ 0x40
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 ff95 	bl	800a7dc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d008      	beq.n	80098ce <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80098c6:	6979      	ldr	r1, [r7, #20]
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 fd07 	bl	800a2dc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d101      	bne.n	8009904 <I2C_Slave_ISR_IT+0x24>
 8009900:	2302      	movs	r3, #2
 8009902:	e0e2      	b.n	8009aca <I2C_Slave_ISR_IT+0x1ea>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b00      	cmp	r3, #0
 8009914:	d009      	beq.n	800992a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009920:	6939      	ldr	r1, [r7, #16]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 fda2 	bl	800a46c <I2C_ITSlaveCplt>
 8009928:	e0ca      	b.n	8009ac0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f003 0310 	and.w	r3, r3, #16
 8009930:	2b00      	cmp	r3, #0
 8009932:	d04b      	beq.n	80099cc <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800993a:	2b00      	cmp	r3, #0
 800993c:	d046      	beq.n	80099cc <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009942:	b29b      	uxth	r3, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	d128      	bne.n	800999a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b28      	cmp	r3, #40	@ 0x28
 8009952:	d108      	bne.n	8009966 <I2C_Slave_ISR_IT+0x86>
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800995a:	d104      	bne.n	8009966 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800995c:	6939      	ldr	r1, [r7, #16]
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 fee8 	bl	800a734 <I2C_ITListenCplt>
 8009964:	e031      	b.n	80099ca <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b29      	cmp	r3, #41	@ 0x29
 8009970:	d10e      	bne.n	8009990 <I2C_Slave_ISR_IT+0xb0>
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009978:	d00a      	beq.n	8009990 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2210      	movs	r2, #16
 8009980:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f001 f841 	bl	800aa0a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 fc4b 	bl	800a224 <I2C_ITSlaveSeqCplt>
 800998e:	e01c      	b.n	80099ca <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2210      	movs	r2, #16
 8009996:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009998:	e08f      	b.n	8009aba <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2210      	movs	r2, #16
 80099a0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099a6:	f043 0204 	orr.w	r2, r3, #4
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <I2C_Slave_ISR_IT+0xdc>
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099ba:	d17e      	bne.n	8009aba <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c0:	4619      	mov	r1, r3
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 ff0a 	bl	800a7dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80099c8:	e077      	b.n	8009aba <I2C_Slave_ISR_IT+0x1da>
 80099ca:	e076      	b.n	8009aba <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f003 0304 	and.w	r3, r3, #4
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d02f      	beq.n	8009a36 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d02a      	beq.n	8009a36 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d018      	beq.n	8009a1c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f4:	b2d2      	uxtb	r2, r2
 80099f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d14b      	bne.n	8009abe <I2C_Slave_ISR_IT+0x1de>
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009a2c:	d047      	beq.n	8009abe <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f000 fbf8 	bl	800a224 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009a34:	e043      	b.n	8009abe <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f003 0308 	and.w	r3, r3, #8
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d009      	beq.n	8009a54 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d004      	beq.n	8009a54 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009a4a:	6939      	ldr	r1, [r7, #16]
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 fb28 	bl	800a0a2 <I2C_ITAddrCplt>
 8009a52:	e035      	b.n	8009ac0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	f003 0302 	and.w	r3, r3, #2
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d030      	beq.n	8009ac0 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d02b      	beq.n	8009ac0 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d018      	beq.n	8009aa4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a76:	781a      	ldrb	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009aa2:	e00d      	b.n	8009ac0 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009aaa:	d002      	beq.n	8009ab2 <I2C_Slave_ISR_IT+0x1d2>
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d106      	bne.n	8009ac0 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 fbb6 	bl	800a224 <I2C_ITSlaveSeqCplt>
 8009ab8:	e002      	b.n	8009ac0 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8009aba:	bf00      	nop
 8009abc:	e000      	b.n	8009ac0 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8009abe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b088      	sub	sp, #32
 8009ad6:	af02      	add	r7, sp, #8
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	60b9      	str	r1, [r7, #8]
 8009adc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d101      	bne.n	8009aec <I2C_Master_ISR_DMA+0x1a>
 8009ae8:	2302      	movs	r3, #2
 8009aea:	e0d9      	b.n	8009ca0 <I2C_Master_ISR_DMA+0x1ce>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f003 0310 	and.w	r3, r3, #16
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d016      	beq.n	8009b2c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d011      	beq.n	8009b2c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2210      	movs	r2, #16
 8009b0e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b14:	f043 0204 	orr.w	r2, r3, #4
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009b1c:	2120      	movs	r1, #32
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f001 f894 	bl	800ac4c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 ff70 	bl	800aa0a <I2C_Flush_TXDR>
 8009b2a:	e0b4      	b.n	8009c96 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d071      	beq.n	8009c1a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d06c      	beq.n	8009c1a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b4e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d04e      	beq.n	8009bf8 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b66:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	2bff      	cmp	r3, #255	@ 0xff
 8009b70:	d906      	bls.n	8009b80 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	22ff      	movs	r2, #255	@ 0xff
 8009b76:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8009b78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b7c:	617b      	str	r3, [r7, #20]
 8009b7e:	e010      	b.n	8009ba2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009b92:	d003      	beq.n	8009b9c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b98:	617b      	str	r3, [r7, #20]
 8009b9a:	e002      	b.n	8009ba2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009b9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ba0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	8a79      	ldrh	r1, [r7, #18]
 8009baa:	2300      	movs	r3, #0
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f001 f819 	bl	800abe8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b22      	cmp	r3, #34	@ 0x22
 8009bd2:	d108      	bne.n	8009be6 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009be2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009be4:	e057      	b.n	8009c96 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bf4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009bf6:	e04e      	b.n	8009c96 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c06:	d003      	beq.n	8009c10 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f000 face 	bl	800a1aa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009c0e:	e042      	b.n	8009c96 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009c10:	2140      	movs	r1, #64	@ 0x40
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 fde2 	bl	800a7dc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009c18:	e03d      	b.n	8009c96 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d028      	beq.n	8009c76 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d023      	beq.n	8009c76 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d119      	bne.n	8009c6c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c46:	d025      	beq.n	8009c94 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c50:	d108      	bne.n	8009c64 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c60:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009c62:	e017      	b.n	8009c94 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 faa0 	bl	800a1aa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009c6a:	e013      	b.n	8009c94 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009c6c:	2140      	movs	r1, #64	@ 0x40
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 fdb4 	bl	800a7dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009c74:	e00e      	b.n	8009c94 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 fb25 	bl	800a2dc <I2C_ITMasterCplt>
 8009c92:	e000      	b.n	8009c96 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8009c94:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3718      	adds	r7, #24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8009cb4:	4b8d      	ldr	r3, [pc, #564]	@ (8009eec <I2C_Mem_ISR_DMA+0x244>)
 8009cb6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d101      	bne.n	8009cc6 <I2C_Mem_ISR_DMA+0x1e>
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	e10e      	b.n	8009ee4 <I2C_Mem_ISR_DMA+0x23c>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f003 0310 	and.w	r3, r3, #16
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d016      	beq.n	8009d06 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d011      	beq.n	8009d06 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2210      	movs	r2, #16
 8009ce8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cee:	f043 0204 	orr.w	r2, r3, #4
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009cf6:	2120      	movs	r1, #32
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 ffa7 	bl	800ac4c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fe83 	bl	800aa0a <I2C_Flush_TXDR>
 8009d04:	e0e9      	b.n	8009eda <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00e      	beq.n	8009d2e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d009      	beq.n	8009d2e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009d22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d2c:	e0d5      	b.n	8009eda <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d05f      	beq.n	8009df8 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d05a      	beq.n	8009df8 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009d42:	2101      	movs	r1, #1
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f001 f805 	bl	800ad54 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009d4a:	2110      	movs	r1, #16
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 ff7d 	bl	800ac4c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d048      	beq.n	8009dee <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2bff      	cmp	r3, #255	@ 0xff
 8009d64:	d910      	bls.n	8009d88 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	22ff      	movs	r2, #255	@ 0xff
 8009d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d70:	b299      	uxth	r1, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	2300      	movs	r3, #0
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 ff31 	bl	800abe8 <I2C_TransferConfig>
 8009d86:	e011      	b.n	8009dac <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d96:	b299      	uxth	r1, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	2300      	movs	r3, #0
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 ff1e 	bl	800abe8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b22      	cmp	r3, #34	@ 0x22
 8009dc8:	d108      	bne.n	8009ddc <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009dd8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009dda:	e07e      	b.n	8009eda <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009dea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009dec:	e075      	b.n	8009eda <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009dee:	2140      	movs	r1, #64	@ 0x40
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 fcf3 	bl	800a7dc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009df6:	e070      	b.n	8009eda <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d05d      	beq.n	8009ebe <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d058      	beq.n	8009ebe <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f000 ffa0 	bl	800ad54 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009e14:	2110      	movs	r1, #16
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f000 ff18 	bl	800ac4c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b22      	cmp	r3, #34	@ 0x22
 8009e26:	d101      	bne.n	8009e2c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8009e28:	4b31      	ldr	r3, [pc, #196]	@ (8009ef0 <I2C_Mem_ISR_DMA+0x248>)
 8009e2a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	2bff      	cmp	r3, #255	@ 0xff
 8009e34:	d910      	bls.n	8009e58 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	22ff      	movs	r2, #255	@ 0xff
 8009e3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e40:	b299      	uxth	r1, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 fec9 	bl	800abe8 <I2C_TransferConfig>
 8009e56:	e011      	b.n	8009e7c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e66:	b299      	uxth	r1, r3
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 feb6 	bl	800abe8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b22      	cmp	r3, #34	@ 0x22
 8009e98:	d108      	bne.n	8009eac <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ea8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009eaa:	e016      	b.n	8009eda <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009eba:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009ebc:	e00d      	b.n	8009eda <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f003 0320 	and.w	r3, r3, #32
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d008      	beq.n	8009eda <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009ed2:	68b9      	ldr	r1, [r7, #8]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f000 fa01 	bl	800a2dc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	80002000 	.word	0x80002000
 8009ef0:	80002400 	.word	0x80002400

08009ef4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f04:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d101      	bne.n	8009f18 <I2C_Slave_ISR_DMA+0x24>
 8009f14:	2302      	movs	r3, #2
 8009f16:	e0c0      	b.n	800a09a <I2C_Slave_ISR_DMA+0x1a6>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d009      	beq.n	8009f3e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d004      	beq.n	8009f3e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009f34:	68b9      	ldr	r1, [r7, #8]
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f000 fa98 	bl	800a46c <I2C_ITSlaveCplt>
 8009f3c:	e0a8      	b.n	800a090 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f003 0310 	and.w	r3, r3, #16
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 8095 	beq.w	800a074 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 808f 	beq.w	800a074 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d104      	bne.n	8009f6a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d07d      	beq.n	800a066 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00c      	beq.n	8009f8c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d007      	beq.n	8009f8c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00c      	beq.n	8009fae <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d007      	beq.n	8009fae <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8009faa:	2301      	movs	r3, #1
 8009fac:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d128      	bne.n	800a006 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b28      	cmp	r3, #40	@ 0x28
 8009fbe:	d108      	bne.n	8009fd2 <I2C_Slave_ISR_DMA+0xde>
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fc6:	d104      	bne.n	8009fd2 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009fc8:	68b9      	ldr	r1, [r7, #8]
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 fbb2 	bl	800a734 <I2C_ITListenCplt>
 8009fd0:	e048      	b.n	800a064 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b29      	cmp	r3, #41	@ 0x29
 8009fdc:	d10e      	bne.n	8009ffc <I2C_Slave_ISR_DMA+0x108>
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009fe4:	d00a      	beq.n	8009ffc <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2210      	movs	r2, #16
 8009fec:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f000 fd0b 	bl	800aa0a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 f915 	bl	800a224 <I2C_ITSlaveSeqCplt>
 8009ffa:	e033      	b.n	800a064 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2210      	movs	r2, #16
 800a002:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a004:	e034      	b.n	800a070 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2210      	movs	r2, #16
 800a00c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a012:	f043 0204 	orr.w	r2, r3, #4
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a020:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d003      	beq.n	800a030 <I2C_Slave_ISR_DMA+0x13c>
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a02e:	d11f      	bne.n	800a070 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	2b21      	cmp	r3, #33	@ 0x21
 800a034:	d002      	beq.n	800a03c <I2C_Slave_ISR_DMA+0x148>
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	2b29      	cmp	r3, #41	@ 0x29
 800a03a:	d103      	bne.n	800a044 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2221      	movs	r2, #33	@ 0x21
 800a040:	631a      	str	r2, [r3, #48]	@ 0x30
 800a042:	e008      	b.n	800a056 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	2b22      	cmp	r3, #34	@ 0x22
 800a048:	d002      	beq.n	800a050 <I2C_Slave_ISR_DMA+0x15c>
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a04e:	d102      	bne.n	800a056 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2222      	movs	r2, #34	@ 0x22
 800a054:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a05a:	4619      	mov	r1, r3
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 fbbd 	bl	800a7dc <I2C_ITError>
      if (treatdmanack == 1U)
 800a062:	e005      	b.n	800a070 <I2C_Slave_ISR_DMA+0x17c>
 800a064:	e004      	b.n	800a070 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2210      	movs	r2, #16
 800a06c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a06e:	e00f      	b.n	800a090 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 800a070:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a072:	e00d      	b.n	800a090 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	f003 0308 	and.w	r3, r3, #8
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d008      	beq.n	800a090 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a088:	68b9      	ldr	r1, [r7, #8]
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 f809 	bl	800a0a2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a0b8:	2b28      	cmp	r3, #40	@ 0x28
 800a0ba:	d16a      	bne.n	800a192 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	0c1b      	lsrs	r3, r3, #16
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	0c1b      	lsrs	r3, r3, #16
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a0da:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0e8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a0f6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d138      	bne.n	800a172 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a100:	897b      	ldrh	r3, [r7, #10]
 800a102:	09db      	lsrs	r3, r3, #7
 800a104:	b29a      	uxth	r2, r3
 800a106:	89bb      	ldrh	r3, [r7, #12]
 800a108:	4053      	eors	r3, r2
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	f003 0306 	and.w	r3, r3, #6
 800a110:	2b00      	cmp	r3, #0
 800a112:	d11c      	bne.n	800a14e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a114:	897b      	ldrh	r3, [r7, #10]
 800a116:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a11c:	1c5a      	adds	r2, r3, #1
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a126:	2b02      	cmp	r3, #2
 800a128:	d13b      	bne.n	800a1a2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2208      	movs	r2, #8
 800a136:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a140:	89ba      	ldrh	r2, [r7, #12]
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff fa63 	bl	8009612 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a14c:	e029      	b.n	800a1a2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a14e:	893b      	ldrh	r3, [r7, #8]
 800a150:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a152:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fdfc 	bl	800ad54 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a164:	89ba      	ldrh	r2, [r7, #12]
 800a166:	7bfb      	ldrb	r3, [r7, #15]
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7ff fa51 	bl	8009612 <HAL_I2C_AddrCallback>
}
 800a170:	e017      	b.n	800a1a2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a172:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fdec 	bl	800ad54 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a184:	89ba      	ldrh	r2, [r7, #12]
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7ff fa41 	bl	8009612 <HAL_I2C_AddrCallback>
}
 800a190:	e007      	b.n	800a1a2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2208      	movs	r2, #8
 800a198:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800a1a2:	bf00      	nop
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b21      	cmp	r3, #33	@ 0x21
 800a1c4:	d115      	bne.n	800a1f2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2211      	movs	r2, #17
 800a1d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a1da:	2101      	movs	r1, #1
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fdb9 	bl	800ad54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7f6 ff76 	bl	80010dc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a1f0:	e014      	b.n	800a21c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2212      	movs	r2, #18
 800a1fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a206:	2102      	movs	r1, #2
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fda3 	bl	800ad54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7f6 ff6e 	bl	80010f8 <HAL_I2C_MasterRxCpltCallback>
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d008      	beq.n	800a258 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a254:	601a      	str	r2, [r3, #0]
 800a256:	e00c      	b.n	800a272 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d007      	beq.n	800a272 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a270:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b29      	cmp	r3, #41	@ 0x29
 800a27c:	d112      	bne.n	800a2a4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2228      	movs	r2, #40	@ 0x28
 800a282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2221      	movs	r2, #33	@ 0x21
 800a28a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a28c:	2101      	movs	r1, #1
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 fd60 	bl	800ad54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff f9a4 	bl	80095ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2a2:	e017      	b.n	800a2d4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2ae:	d111      	bne.n	800a2d4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2228      	movs	r2, #40	@ 0x28
 800a2b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2222      	movs	r2, #34	@ 0x22
 800a2bc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a2be:	2102      	movs	r1, #2
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fd47 	bl	800ad54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff f995 	bl	80095fe <HAL_I2C_SlaveRxCpltCallback>
}
 800a2d4:	bf00      	nop
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2220      	movs	r2, #32
 800a2f0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b21      	cmp	r3, #33	@ 0x21
 800a2fc:	d107      	bne.n	800a30e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a2fe:	2101      	movs	r1, #1
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fd27 	bl	800ad54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2211      	movs	r2, #17
 800a30a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a30c:	e00c      	b.n	800a328 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b22      	cmp	r3, #34	@ 0x22
 800a318:	d106      	bne.n	800a328 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a31a:	2102      	movs	r1, #2
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fd19 	bl	800ad54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2212      	movs	r2, #18
 800a326:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6859      	ldr	r1, [r3, #4]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4b4c      	ldr	r3, [pc, #304]	@ (800a464 <I2C_ITMasterCplt+0x188>)
 800a334:	400b      	ands	r3, r1
 800a336:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a49      	ldr	r2, [pc, #292]	@ (800a468 <I2C_ITMasterCplt+0x18c>)
 800a342:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f003 0310 	and.w	r3, r3, #16
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d009      	beq.n	800a362 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2210      	movs	r2, #16
 800a354:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a35a:	f043 0204 	orr.w	r2, r3, #4
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b60      	cmp	r3, #96	@ 0x60
 800a36c:	d10a      	bne.n	800a384 <I2C_ITMasterCplt+0xa8>
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b00      	cmp	r3, #0
 800a376:	d005      	beq.n	800a384 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a382:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fb40 	bl	800aa0a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a38e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b60      	cmp	r3, #96	@ 0x60
 800a39a:	d002      	beq.n	800a3a2 <I2C_ITMasterCplt+0xc6>
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d006      	beq.n	800a3b0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fa17 	bl	800a7dc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a3ae:	e054      	b.n	800a45a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b21      	cmp	r3, #33	@ 0x21
 800a3ba:	d124      	bne.n	800a406 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2220      	movs	r2, #32
 800a3c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b40      	cmp	r3, #64	@ 0x40
 800a3d4:	d10b      	bne.n	800a3ee <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7ff f92b 	bl	8009642 <HAL_I2C_MemTxCpltCallback>
}
 800a3ec:	e035      	b.n	800a45a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7f6 fe6c 	bl	80010dc <HAL_I2C_MasterTxCpltCallback>
}
 800a404:	e029      	b.n	800a45a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b22      	cmp	r3, #34	@ 0x22
 800a410:	d123      	bne.n	800a45a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2220      	movs	r2, #32
 800a416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2b40      	cmp	r3, #64	@ 0x40
 800a42a:	d10b      	bne.n	800a444 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff f90a 	bl	8009656 <HAL_I2C_MemRxCpltCallback>
}
 800a442:	e00a      	b.n	800a45a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7f6 fe4f 	bl	80010f8 <HAL_I2C_MasterRxCpltCallback>
}
 800a45a:	bf00      	nop
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	fe00e800 	.word	0xfe00e800
 800a468:	ffff0000 	.word	0xffff0000

0800a46c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a486:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a48e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2220      	movs	r2, #32
 800a496:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a498:	7afb      	ldrb	r3, [r7, #11]
 800a49a:	2b21      	cmp	r3, #33	@ 0x21
 800a49c:	d002      	beq.n	800a4a4 <I2C_ITSlaveCplt+0x38>
 800a49e:	7afb      	ldrb	r3, [r7, #11]
 800a4a0:	2b29      	cmp	r3, #41	@ 0x29
 800a4a2:	d108      	bne.n	800a4b6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a4a4:	f248 0101 	movw	r1, #32769	@ 0x8001
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fc53 	bl	800ad54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2221      	movs	r2, #33	@ 0x21
 800a4b2:	631a      	str	r2, [r3, #48]	@ 0x30
 800a4b4:	e019      	b.n	800a4ea <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a4b6:	7afb      	ldrb	r3, [r7, #11]
 800a4b8:	2b22      	cmp	r3, #34	@ 0x22
 800a4ba:	d002      	beq.n	800a4c2 <I2C_ITSlaveCplt+0x56>
 800a4bc:	7afb      	ldrb	r3, [r7, #11]
 800a4be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4c0:	d108      	bne.n	800a4d4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a4c2:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fc44 	bl	800ad54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2222      	movs	r2, #34	@ 0x22
 800a4d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800a4d2:	e00a      	b.n	800a4ea <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a4d4:	7afb      	ldrb	r3, [r7, #11]
 800a4d6:	2b28      	cmp	r3, #40	@ 0x28
 800a4d8:	d107      	bne.n	800a4ea <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a4da:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fc38 	bl	800ad54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4f8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6859      	ldr	r1, [r3, #4]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	4b89      	ldr	r3, [pc, #548]	@ (800a72c <I2C_ITSlaveCplt+0x2c0>)
 800a506:	400b      	ands	r3, r1
 800a508:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fa7d 	bl	800aa0a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d013      	beq.n	800a542 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a528:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d01f      	beq.n	800a572 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a540:	e017      	b.n	800a572 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d012      	beq.n	800a572 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a55a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a560:	2b00      	cmp	r3, #0
 800a562:	d006      	beq.n	800a572 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f003 0304 	and.w	r3, r3, #4
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d020      	beq.n	800a5be <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f023 0304 	bic.w	r3, r3, #4
 800a582:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58e:	b2d2      	uxtb	r2, r2
 800a590:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a596:	1c5a      	adds	r2, r3, #1
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00c      	beq.n	800a5be <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5cc:	f043 0204 	orr.w	r2, r3, #4
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f003 0310 	and.w	r3, r3, #16
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d049      	beq.n	800a672 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d044      	beq.n	800a672 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d128      	bne.n	800a644 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b28      	cmp	r3, #40	@ 0x28
 800a5fc:	d108      	bne.n	800a610 <I2C_ITSlaveCplt+0x1a4>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a604:	d104      	bne.n	800a610 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a606:	6979      	ldr	r1, [r7, #20]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 f893 	bl	800a734 <I2C_ITListenCplt>
 800a60e:	e030      	b.n	800a672 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b29      	cmp	r3, #41	@ 0x29
 800a61a:	d10e      	bne.n	800a63a <I2C_ITSlaveCplt+0x1ce>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a622:	d00a      	beq.n	800a63a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2210      	movs	r2, #16
 800a62a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f9ec 	bl	800aa0a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff fdf6 	bl	800a224 <I2C_ITSlaveSeqCplt>
 800a638:	e01b      	b.n	800a672 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2210      	movs	r2, #16
 800a640:	61da      	str	r2, [r3, #28]
 800a642:	e016      	b.n	800a672 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2210      	movs	r2, #16
 800a64a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a650:	f043 0204 	orr.w	r2, r3, #4
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <I2C_ITSlaveCplt+0x1fa>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a664:	d105      	bne.n	800a672 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f8b5 	bl	800a7dc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a684:	2b00      	cmp	r3, #0
 800a686:	d010      	beq.n	800a6aa <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f8a4 	bl	800a7dc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	2b28      	cmp	r3, #40	@ 0x28
 800a69e:	d141      	bne.n	800a724 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a6a0:	6979      	ldr	r1, [r7, #20]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f846 	bl	800a734 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a6a8:	e03c      	b.n	800a724 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a6b2:	d014      	beq.n	800a6de <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff fdb5 	bl	800a224 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a1c      	ldr	r2, [pc, #112]	@ (800a730 <I2C_ITSlaveCplt+0x2c4>)
 800a6be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7fe ffa9 	bl	800962e <HAL_I2C_ListenCpltCallback>
}
 800a6dc:	e022      	b.n	800a724 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b22      	cmp	r3, #34	@ 0x22
 800a6e8:	d10e      	bne.n	800a708 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2220      	movs	r2, #32
 800a6ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7fe ff7c 	bl	80095fe <HAL_I2C_SlaveRxCpltCallback>
}
 800a706:	e00d      	b.n	800a724 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7fe ff63 	bl	80095ea <HAL_I2C_SlaveTxCpltCallback>
}
 800a724:	bf00      	nop
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	fe00e800 	.word	0xfe00e800
 800a730:	ffff0000 	.word	0xffff0000

0800a734 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a25      	ldr	r2, [pc, #148]	@ (800a7d8 <I2C_ITListenCplt+0xa4>)
 800a742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2220      	movs	r2, #32
 800a74e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	f003 0304 	and.w	r3, r3, #4
 800a766:	2b00      	cmp	r3, #0
 800a768:	d022      	beq.n	800a7b0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a774:	b2d2      	uxtb	r2, r2
 800a776:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a786:	2b00      	cmp	r3, #0
 800a788:	d012      	beq.n	800a7b0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a78e:	3b01      	subs	r3, #1
 800a790:	b29a      	uxth	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	3b01      	subs	r3, #1
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7a8:	f043 0204 	orr.w	r2, r3, #4
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a7b0:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 facd 	bl	800ad54 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2210      	movs	r2, #16
 800a7c0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7fe ff2f 	bl	800962e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	ffff0000 	.word	0xffff0000

0800a7dc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7ec:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a6d      	ldr	r2, [pc, #436]	@ (800a9b0 <I2C_ITError+0x1d4>)
 800a7fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	431a      	orrs	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
 800a810:	2b28      	cmp	r3, #40	@ 0x28
 800a812:	d005      	beq.n	800a820 <I2C_ITError+0x44>
 800a814:	7bfb      	ldrb	r3, [r7, #15]
 800a816:	2b29      	cmp	r3, #41	@ 0x29
 800a818:	d002      	beq.n	800a820 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a81e:	d10b      	bne.n	800a838 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a820:	2103      	movs	r1, #3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fa96 	bl	800ad54 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2228      	movs	r2, #40	@ 0x28
 800a82c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a60      	ldr	r2, [pc, #384]	@ (800a9b4 <I2C_ITError+0x1d8>)
 800a834:	635a      	str	r2, [r3, #52]	@ 0x34
 800a836:	e030      	b.n	800a89a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a838:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fa89 	bl	800ad54 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f8e1 	bl	800aa0a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b60      	cmp	r3, #96	@ 0x60
 800a852:	d01f      	beq.n	800a894 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2220      	movs	r2, #32
 800a858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	f003 0320 	and.w	r3, r3, #32
 800a866:	2b20      	cmp	r3, #32
 800a868:	d114      	bne.n	800a894 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	f003 0310 	and.w	r3, r3, #16
 800a874:	2b10      	cmp	r3, #16
 800a876:	d109      	bne.n	800a88c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2210      	movs	r2, #16
 800a87e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a884:	f043 0204 	orr.w	r2, r3, #4
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2220      	movs	r2, #32
 800a892:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a89e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d039      	beq.n	800a91c <I2C_ITError+0x140>
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b11      	cmp	r3, #17
 800a8ac:	d002      	beq.n	800a8b4 <I2C_ITError+0xd8>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2b21      	cmp	r3, #33	@ 0x21
 800a8b2:	d133      	bne.n	800a91c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8c2:	d107      	bne.n	800a8d4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a8d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fd fa82 	bl	8007de2 <HAL_DMA_GetState>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d017      	beq.n	800a914 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e8:	4a33      	ldr	r2, [pc, #204]	@ (800a9b8 <I2C_ITError+0x1dc>)
 800a8ea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fd f95c 	bl	8007bb6 <HAL_DMA_Abort_IT>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d04d      	beq.n	800a9a0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a90e:	4610      	mov	r0, r2
 800a910:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a912:	e045      	b.n	800a9a0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f851 	bl	800a9bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a91a:	e041      	b.n	800a9a0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d039      	beq.n	800a998 <I2C_ITError+0x1bc>
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2b12      	cmp	r3, #18
 800a928:	d002      	beq.n	800a930 <I2C_ITError+0x154>
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	2b22      	cmp	r3, #34	@ 0x22
 800a92e:	d133      	bne.n	800a998 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a93a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a93e:	d107      	bne.n	800a950 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a94e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a954:	4618      	mov	r0, r3
 800a956:	f7fd fa44 	bl	8007de2 <HAL_DMA_GetState>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d017      	beq.n	800a990 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a964:	4a14      	ldr	r2, [pc, #80]	@ (800a9b8 <I2C_ITError+0x1dc>)
 800a966:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a974:	4618      	mov	r0, r3
 800a976:	f7fd f91e 	bl	8007bb6 <HAL_DMA_Abort_IT>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d011      	beq.n	800a9a4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a98a:	4610      	mov	r0, r2
 800a98c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a98e:	e009      	b.n	800a9a4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f813 	bl	800a9bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a996:	e005      	b.n	800a9a4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f80f 	bl	800a9bc <I2C_TreatErrorCallback>
  }
}
 800a99e:	e002      	b.n	800a9a6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a9a0:	bf00      	nop
 800a9a2:	e000      	b.n	800a9a6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a9a4:	bf00      	nop
}
 800a9a6:	bf00      	nop
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	ffff0000 	.word	0xffff0000
 800a9b4:	080098e1 	.word	0x080098e1
 800a9b8:	0800abad 	.word	0x0800abad

0800a9bc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b60      	cmp	r3, #96	@ 0x60
 800a9ce:	d10e      	bne.n	800a9ee <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7fe fe49 	bl	800967e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a9ec:	e009      	b.n	800aa02 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7fe fe34 	bl	800966a <HAL_I2C_ErrorCallback>
}
 800aa02:	bf00      	nop
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	f003 0302 	and.w	r3, r3, #2
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d103      	bne.n	800aa28 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2200      	movs	r2, #0
 800aa26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d007      	beq.n	800aa46 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	699a      	ldr	r2, [r3, #24]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f042 0201 	orr.w	r2, r2, #1
 800aa44:	619a      	str	r2, [r3, #24]
  }
}
 800aa46:	bf00      	nop
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800aa6e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d104      	bne.n	800aa84 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800aa7a:	2120      	movs	r1, #32
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f000 f8e5 	bl	800ac4c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800aa82:	e02d      	b.n	800aae0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800aa8c:	441a      	add	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	2bff      	cmp	r3, #255	@ 0xff
 800aa9a:	d903      	bls.n	800aaa4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	22ff      	movs	r2, #255	@ 0xff
 800aaa0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800aaa2:	e004      	b.n	800aaae <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab6:	4619      	mov	r1, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3328      	adds	r3, #40	@ 0x28
 800aabe:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800aac4:	f7fc fffc 	bl	8007ac0 <HAL_DMA_Start_IT>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d004      	beq.n	800aad8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800aace:	2110      	movs	r1, #16
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f7ff fe83 	bl	800a7dc <I2C_ITError>
}
 800aad6:	e003      	b.n	800aae0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800aad8:	2140      	movs	r1, #64	@ 0x40
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f000 f8b6 	bl	800ac4c <I2C_Enable_IRQ>
}
 800aae0:	bf00      	nop
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ab04:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d104      	bne.n	800ab1a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ab10:	2120      	movs	r1, #32
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f000 f89a 	bl	800ac4c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ab18:	e02d      	b.n	800ab76 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ab22:	441a      	add	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	2bff      	cmp	r3, #255	@ 0xff
 800ab30:	d903      	bls.n	800ab3a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	22ff      	movs	r2, #255	@ 0xff
 800ab36:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ab38:	e004      	b.n	800ab44 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3324      	adds	r3, #36	@ 0x24
 800ab4e:	4619      	mov	r1, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab54:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ab5a:	f7fc ffb1 	bl	8007ac0 <HAL_DMA_Start_IT>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d004      	beq.n	800ab6e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ab64:	2110      	movs	r1, #16
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f7ff fe38 	bl	800a7dc <I2C_ITError>
}
 800ab6c:	e003      	b.n	800ab76 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ab6e:	2140      	movs	r1, #64	@ 0x40
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 f86b 	bl	800ac4c <I2C_Enable_IRQ>
}
 800ab76:	bf00      	nop
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab9a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ab9c:	2110      	movs	r1, #16
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f7ff fe1c 	bl	800a7dc <I2C_ITError>
}
 800aba4:	bf00      	nop
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abc6:	2200      	movs	r2, #0
 800abc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abd6:	2200      	movs	r2, #0
 800abd8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f7ff feee 	bl	800a9bc <I2C_TreatErrorCallback>
}
 800abe0:	bf00      	nop
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	607b      	str	r3, [r7, #4]
 800abf2:	460b      	mov	r3, r1
 800abf4:	817b      	strh	r3, [r7, #10]
 800abf6:	4613      	mov	r3, r2
 800abf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800abfa:	897b      	ldrh	r3, [r7, #10]
 800abfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ac00:	7a7b      	ldrb	r3, [r7, #9]
 800ac02:	041b      	lsls	r3, r3, #16
 800ac04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	0d5b      	lsrs	r3, r3, #21
 800ac22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800ac26:	4b08      	ldr	r3, [pc, #32]	@ (800ac48 <I2C_TransferConfig+0x60>)
 800ac28:	430b      	orrs	r3, r1
 800ac2a:	43db      	mvns	r3, r3
 800ac2c:	ea02 0103 	and.w	r1, r2, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ac3a:	bf00      	nop
 800ac3c:	371c      	adds	r7, #28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	03ff63ff 	.word	0x03ff63ff

0800ac4c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac60:	4a39      	ldr	r2, [pc, #228]	@ (800ad48 <I2C_Enable_IRQ+0xfc>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d032      	beq.n	800accc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ac6a:	4a38      	ldr	r2, [pc, #224]	@ (800ad4c <I2C_Enable_IRQ+0x100>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d02d      	beq.n	800accc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ac74:	4a36      	ldr	r2, [pc, #216]	@ (800ad50 <I2C_Enable_IRQ+0x104>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d028      	beq.n	800accc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ac7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	da03      	bge.n	800ac8a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800ac88:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ac8a:	887b      	ldrh	r3, [r7, #2]
 800ac8c:	f003 0301 	and.w	r3, r3, #1
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d003      	beq.n	800ac9c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800ac9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ac9c:	887b      	ldrh	r3, [r7, #2]
 800ac9e:	f003 0302 	and.w	r3, r3, #2
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800acac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800acae:	887b      	ldrh	r3, [r7, #2]
 800acb0:	2b10      	cmp	r3, #16
 800acb2:	d103      	bne.n	800acbc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800acba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800acbc:	887b      	ldrh	r3, [r7, #2]
 800acbe:	2b20      	cmp	r3, #32
 800acc0:	d133      	bne.n	800ad2a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f043 0320 	orr.w	r3, r3, #32
 800acc8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800acca:	e02e      	b.n	800ad2a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800accc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	da03      	bge.n	800acdc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800acda:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800acdc:	887b      	ldrh	r3, [r7, #2]
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d003      	beq.n	800acee <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800acec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800acee:	887b      	ldrh	r3, [r7, #2]
 800acf0:	f003 0302 	and.w	r3, r3, #2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d003      	beq.n	800ad00 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800acfe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ad00:	887b      	ldrh	r3, [r7, #2]
 800ad02:	2b10      	cmp	r3, #16
 800ad04:	d103      	bne.n	800ad0e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800ad0c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ad0e:	887b      	ldrh	r3, [r7, #2]
 800ad10:	2b20      	cmp	r3, #32
 800ad12:	d103      	bne.n	800ad1c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ad1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ad1c:	887b      	ldrh	r3, [r7, #2]
 800ad1e:	2b40      	cmp	r3, #64	@ 0x40
 800ad20:	d103      	bne.n	800ad2a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad28:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	6819      	ldr	r1, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	601a      	str	r2, [r3, #0]
}
 800ad3a:	bf00      	nop
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	08009ad3 	.word	0x08009ad3
 800ad4c:	08009ef5 	.word	0x08009ef5
 800ad50:	08009ca9 	.word	0x08009ca9

0800ad54 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ad60:	2300      	movs	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ad64:	887b      	ldrh	r3, [r7, #2]
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00f      	beq.n	800ad8e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800ad74:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ad82:	2b28      	cmp	r3, #40	@ 0x28
 800ad84:	d003      	beq.n	800ad8e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800ad8c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ad8e:	887b      	ldrh	r3, [r7, #2]
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00f      	beq.n	800adb8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800ad9e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800adac:	2b28      	cmp	r3, #40	@ 0x28
 800adae:	d003      	beq.n	800adb8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800adb6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800adb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	da03      	bge.n	800adc8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800adc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800adc8:	887b      	ldrh	r3, [r7, #2]
 800adca:	2b10      	cmp	r3, #16
 800adcc:	d103      	bne.n	800add6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800add4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800add6:	887b      	ldrh	r3, [r7, #2]
 800add8:	2b20      	cmp	r3, #32
 800adda:	d103      	bne.n	800ade4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f043 0320 	orr.w	r3, r3, #32
 800ade2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ade4:	887b      	ldrh	r3, [r7, #2]
 800ade6:	2b40      	cmp	r3, #64	@ 0x40
 800ade8:	d103      	bne.n	800adf2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adf0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6819      	ldr	r1, [r3, #0]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	43da      	mvns	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	400a      	ands	r2, r1
 800ae02:	601a      	str	r2, [r3, #0]
}
 800ae04:	bf00      	nop
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b20      	cmp	r3, #32
 800ae24:	d138      	bne.n	800ae98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d101      	bne.n	800ae34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e032      	b.n	800ae9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2224      	movs	r2, #36	@ 0x24
 800ae40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f022 0201 	bic.w	r2, r2, #1
 800ae52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ae62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6819      	ldr	r1, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	430a      	orrs	r2, r1
 800ae72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f042 0201 	orr.w	r2, r2, #1
 800ae82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	e000      	b.n	800ae9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ae98:	2302      	movs	r3, #2
  }
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b085      	sub	sp, #20
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b20      	cmp	r3, #32
 800aeba:	d139      	bne.n	800af30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e033      	b.n	800af32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2224      	movs	r2, #36	@ 0x24
 800aed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f022 0201 	bic.w	r2, r2, #1
 800aee8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800aef8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	021b      	lsls	r3, r3, #8
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	4313      	orrs	r3, r2
 800af02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f042 0201 	orr.w	r2, r2, #1
 800af1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2220      	movs	r2, #32
 800af20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	e000      	b.n	800af32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800af30:	2302      	movs	r3, #2
  }
}
 800af32:	4618      	mov	r0, r3
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
	...

0800af40 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af48:	4b0b      	ldr	r3, [pc, #44]	@ (800af78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800af4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af4c:	4a0a      	ldr	r2, [pc, #40]	@ (800af78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800af4e:	f043 0301 	orr.w	r3, r3, #1
 800af52:	6613      	str	r3, [r2, #96]	@ 0x60
 800af54:	4b08      	ldr	r3, [pc, #32]	@ (800af78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800af56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	60fb      	str	r3, [r7, #12]
 800af5e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800af60:	4b06      	ldr	r3, [pc, #24]	@ (800af7c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800af62:	685a      	ldr	r2, [r3, #4]
 800af64:	4905      	ldr	r1, [pc, #20]	@ (800af7c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4313      	orrs	r3, r2
 800af6a:	604b      	str	r3, [r1, #4]
}
 800af6c:	bf00      	nop
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr
 800af78:	40021000 	.word	0x40021000
 800af7c:	40010000 	.word	0x40010000

0800af80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d141      	bne.n	800b012 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800af8e:	4b4b      	ldr	r3, [pc, #300]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800af96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af9a:	d131      	bne.n	800b000 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af9c:	4b47      	ldr	r3, [pc, #284]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afa2:	4a46      	ldr	r2, [pc, #280]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800afac:	4b43      	ldr	r3, [pc, #268]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800afb4:	4a41      	ldr	r2, [pc, #260]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800afba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800afbc:	4b40      	ldr	r3, [pc, #256]	@ (800b0c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2232      	movs	r2, #50	@ 0x32
 800afc2:	fb02 f303 	mul.w	r3, r2, r3
 800afc6:	4a3f      	ldr	r2, [pc, #252]	@ (800b0c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800afc8:	fba2 2303 	umull	r2, r3, r2, r3
 800afcc:	0c9b      	lsrs	r3, r3, #18
 800afce:	3301      	adds	r3, #1
 800afd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800afd2:	e002      	b.n	800afda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	3b01      	subs	r3, #1
 800afd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800afda:	4b38      	ldr	r3, [pc, #224]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afe6:	d102      	bne.n	800afee <HAL_PWREx_ControlVoltageScaling+0x6e>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1f2      	bne.n	800afd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800afee:	4b33      	ldr	r3, [pc, #204]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800affa:	d158      	bne.n	800b0ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e057      	b.n	800b0b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b000:	4b2e      	ldr	r3, [pc, #184]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b006:	4a2d      	ldr	r2, [pc, #180]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b00c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b010:	e04d      	b.n	800b0ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b018:	d141      	bne.n	800b09e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b01a:	4b28      	ldr	r3, [pc, #160]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b026:	d131      	bne.n	800b08c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b028:	4b24      	ldr	r3, [pc, #144]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b02a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b02e:	4a23      	ldr	r2, [pc, #140]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b034:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b038:	4b20      	ldr	r3, [pc, #128]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b040:	4a1e      	ldr	r2, [pc, #120]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b048:	4b1d      	ldr	r3, [pc, #116]	@ (800b0c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2232      	movs	r2, #50	@ 0x32
 800b04e:	fb02 f303 	mul.w	r3, r2, r3
 800b052:	4a1c      	ldr	r2, [pc, #112]	@ (800b0c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b054:	fba2 2303 	umull	r2, r3, r2, r3
 800b058:	0c9b      	lsrs	r3, r3, #18
 800b05a:	3301      	adds	r3, #1
 800b05c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b05e:	e002      	b.n	800b066 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3b01      	subs	r3, #1
 800b064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b066:	4b15      	ldr	r3, [pc, #84]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b06e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b072:	d102      	bne.n	800b07a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1f2      	bne.n	800b060 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b07a:	4b10      	ldr	r3, [pc, #64]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b086:	d112      	bne.n	800b0ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b088:	2303      	movs	r3, #3
 800b08a:	e011      	b.n	800b0b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b08c:	4b0b      	ldr	r3, [pc, #44]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b092:	4a0a      	ldr	r2, [pc, #40]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b09c:	e007      	b.n	800b0ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b09e:	4b07      	ldr	r3, [pc, #28]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b0a6:	4a05      	ldr	r2, [pc, #20]	@ (800b0bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b0ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	40007000 	.word	0x40007000
 800b0c0:	2000000c 	.word	0x2000000c
 800b0c4:	431bde83 	.word	0x431bde83

0800b0c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b0cc:	4b05      	ldr	r3, [pc, #20]	@ (800b0e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	4a04      	ldr	r2, [pc, #16]	@ (800b0e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b0d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b0d6:	6093      	str	r3, [r2, #8]
}
 800b0d8:	bf00      	nop
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	40007000 	.word	0x40007000

0800b0e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e2fe      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d075      	beq.n	800b1f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b106:	4b97      	ldr	r3, [pc, #604]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	f003 030c 	and.w	r3, r3, #12
 800b10e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b110:	4b94      	ldr	r3, [pc, #592]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	f003 0303 	and.w	r3, r3, #3
 800b118:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	2b0c      	cmp	r3, #12
 800b11e:	d102      	bne.n	800b126 <HAL_RCC_OscConfig+0x3e>
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2b03      	cmp	r3, #3
 800b124:	d002      	beq.n	800b12c <HAL_RCC_OscConfig+0x44>
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	2b08      	cmp	r3, #8
 800b12a:	d10b      	bne.n	800b144 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b12c:	4b8d      	ldr	r3, [pc, #564]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b134:	2b00      	cmp	r3, #0
 800b136:	d05b      	beq.n	800b1f0 <HAL_RCC_OscConfig+0x108>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d157      	bne.n	800b1f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	e2d9      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b14c:	d106      	bne.n	800b15c <HAL_RCC_OscConfig+0x74>
 800b14e:	4b85      	ldr	r3, [pc, #532]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a84      	ldr	r2, [pc, #528]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	e01d      	b.n	800b198 <HAL_RCC_OscConfig+0xb0>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b164:	d10c      	bne.n	800b180 <HAL_RCC_OscConfig+0x98>
 800b166:	4b7f      	ldr	r3, [pc, #508]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a7e      	ldr	r2, [pc, #504]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b16c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b170:	6013      	str	r3, [r2, #0]
 800b172:	4b7c      	ldr	r3, [pc, #496]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a7b      	ldr	r2, [pc, #492]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b17c:	6013      	str	r3, [r2, #0]
 800b17e:	e00b      	b.n	800b198 <HAL_RCC_OscConfig+0xb0>
 800b180:	4b78      	ldr	r3, [pc, #480]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a77      	ldr	r2, [pc, #476]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	4b75      	ldr	r3, [pc, #468]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a74      	ldr	r2, [pc, #464]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d013      	beq.n	800b1c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a0:	f7fa f9e2 	bl	8005568 <HAL_GetTick>
 800b1a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b1a6:	e008      	b.n	800b1ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1a8:	f7fa f9de 	bl	8005568 <HAL_GetTick>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	2b64      	cmp	r3, #100	@ 0x64
 800b1b4:	d901      	bls.n	800b1ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e29e      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b1ba:	4b6a      	ldr	r3, [pc, #424]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d0f0      	beq.n	800b1a8 <HAL_RCC_OscConfig+0xc0>
 800b1c6:	e014      	b.n	800b1f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1c8:	f7fa f9ce 	bl	8005568 <HAL_GetTick>
 800b1cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b1ce:	e008      	b.n	800b1e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1d0:	f7fa f9ca 	bl	8005568 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	2b64      	cmp	r3, #100	@ 0x64
 800b1dc:	d901      	bls.n	800b1e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e28a      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b1e2:	4b60      	ldr	r3, [pc, #384]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1f0      	bne.n	800b1d0 <HAL_RCC_OscConfig+0xe8>
 800b1ee:	e000      	b.n	800b1f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f003 0302 	and.w	r3, r3, #2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d075      	beq.n	800b2ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1fe:	4b59      	ldr	r3, [pc, #356]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	f003 030c 	and.w	r3, r3, #12
 800b206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b208:	4b56      	ldr	r3, [pc, #344]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	f003 0303 	and.w	r3, r3, #3
 800b210:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	2b0c      	cmp	r3, #12
 800b216:	d102      	bne.n	800b21e <HAL_RCC_OscConfig+0x136>
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d002      	beq.n	800b224 <HAL_RCC_OscConfig+0x13c>
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	2b04      	cmp	r3, #4
 800b222:	d11f      	bne.n	800b264 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b224:	4b4f      	ldr	r3, [pc, #316]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d005      	beq.n	800b23c <HAL_RCC_OscConfig+0x154>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e25d      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b23c:	4b49      	ldr	r3, [pc, #292]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	691b      	ldr	r3, [r3, #16]
 800b248:	061b      	lsls	r3, r3, #24
 800b24a:	4946      	ldr	r1, [pc, #280]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b24c:	4313      	orrs	r3, r2
 800b24e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b250:	4b45      	ldr	r3, [pc, #276]	@ (800b368 <HAL_RCC_OscConfig+0x280>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4618      	mov	r0, r3
 800b256:	f7fa f93b 	bl	80054d0 <HAL_InitTick>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d043      	beq.n	800b2e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e249      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d023      	beq.n	800b2b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b26c:	4b3d      	ldr	r3, [pc, #244]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a3c      	ldr	r2, [pc, #240]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b278:	f7fa f976 	bl	8005568 <HAL_GetTick>
 800b27c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b27e:	e008      	b.n	800b292 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b280:	f7fa f972 	bl	8005568 <HAL_GetTick>
 800b284:	4602      	mov	r2, r0
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d901      	bls.n	800b292 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	e232      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b292:	4b34      	ldr	r3, [pc, #208]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d0f0      	beq.n	800b280 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b29e:	4b31      	ldr	r3, [pc, #196]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	061b      	lsls	r3, r3, #24
 800b2ac:	492d      	ldr	r1, [pc, #180]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	604b      	str	r3, [r1, #4]
 800b2b2:	e01a      	b.n	800b2ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2b4:	4b2b      	ldr	r3, [pc, #172]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a2a      	ldr	r2, [pc, #168]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b2ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c0:	f7fa f952 	bl	8005568 <HAL_GetTick>
 800b2c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b2c6:	e008      	b.n	800b2da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2c8:	f7fa f94e 	bl	8005568 <HAL_GetTick>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d901      	bls.n	800b2da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e20e      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b2da:	4b22      	ldr	r3, [pc, #136]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1f0      	bne.n	800b2c8 <HAL_RCC_OscConfig+0x1e0>
 800b2e6:	e000      	b.n	800b2ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b2e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0308 	and.w	r3, r3, #8
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d041      	beq.n	800b37a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d01c      	beq.n	800b338 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b2fe:	4b19      	ldr	r3, [pc, #100]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b304:	4a17      	ldr	r2, [pc, #92]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b306:	f043 0301 	orr.w	r3, r3, #1
 800b30a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b30e:	f7fa f92b 	bl	8005568 <HAL_GetTick>
 800b312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b314:	e008      	b.n	800b328 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b316:	f7fa f927 	bl	8005568 <HAL_GetTick>
 800b31a:	4602      	mov	r2, r0
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	1ad3      	subs	r3, r2, r3
 800b320:	2b02      	cmp	r3, #2
 800b322:	d901      	bls.n	800b328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e1e7      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b328:	4b0e      	ldr	r3, [pc, #56]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b32a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b32e:	f003 0302 	and.w	r3, r3, #2
 800b332:	2b00      	cmp	r3, #0
 800b334:	d0ef      	beq.n	800b316 <HAL_RCC_OscConfig+0x22e>
 800b336:	e020      	b.n	800b37a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b338:	4b0a      	ldr	r3, [pc, #40]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b33a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b33e:	4a09      	ldr	r2, [pc, #36]	@ (800b364 <HAL_RCC_OscConfig+0x27c>)
 800b340:	f023 0301 	bic.w	r3, r3, #1
 800b344:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b348:	f7fa f90e 	bl	8005568 <HAL_GetTick>
 800b34c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b34e:	e00d      	b.n	800b36c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b350:	f7fa f90a 	bl	8005568 <HAL_GetTick>
 800b354:	4602      	mov	r2, r0
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d906      	bls.n	800b36c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b35e:	2303      	movs	r3, #3
 800b360:	e1ca      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
 800b362:	bf00      	nop
 800b364:	40021000 	.word	0x40021000
 800b368:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b36c:	4b8c      	ldr	r3, [pc, #560]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b36e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b372:	f003 0302 	and.w	r3, r3, #2
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1ea      	bne.n	800b350 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 0304 	and.w	r3, r3, #4
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 80a6 	beq.w	800b4d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b388:	2300      	movs	r3, #0
 800b38a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b38c:	4b84      	ldr	r3, [pc, #528]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b38e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <HAL_RCC_OscConfig+0x2b4>
 800b398:	2301      	movs	r3, #1
 800b39a:	e000      	b.n	800b39e <HAL_RCC_OscConfig+0x2b6>
 800b39c:	2300      	movs	r3, #0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00d      	beq.n	800b3be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3a2:	4b7f      	ldr	r3, [pc, #508]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b3a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3a6:	4a7e      	ldr	r2, [pc, #504]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b3a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3ac:	6593      	str	r3, [r2, #88]	@ 0x58
 800b3ae:	4b7c      	ldr	r3, [pc, #496]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b3b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3be:	4b79      	ldr	r3, [pc, #484]	@ (800b5a4 <HAL_RCC_OscConfig+0x4bc>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d118      	bne.n	800b3fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3ca:	4b76      	ldr	r3, [pc, #472]	@ (800b5a4 <HAL_RCC_OscConfig+0x4bc>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a75      	ldr	r2, [pc, #468]	@ (800b5a4 <HAL_RCC_OscConfig+0x4bc>)
 800b3d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3d6:	f7fa f8c7 	bl	8005568 <HAL_GetTick>
 800b3da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3dc:	e008      	b.n	800b3f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3de:	f7fa f8c3 	bl	8005568 <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d901      	bls.n	800b3f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e183      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3f0:	4b6c      	ldr	r3, [pc, #432]	@ (800b5a4 <HAL_RCC_OscConfig+0x4bc>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d0f0      	beq.n	800b3de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d108      	bne.n	800b416 <HAL_RCC_OscConfig+0x32e>
 800b404:	4b66      	ldr	r3, [pc, #408]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b40a:	4a65      	ldr	r2, [pc, #404]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b40c:	f043 0301 	orr.w	r3, r3, #1
 800b410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b414:	e024      	b.n	800b460 <HAL_RCC_OscConfig+0x378>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	2b05      	cmp	r3, #5
 800b41c:	d110      	bne.n	800b440 <HAL_RCC_OscConfig+0x358>
 800b41e:	4b60      	ldr	r3, [pc, #384]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b424:	4a5e      	ldr	r2, [pc, #376]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b426:	f043 0304 	orr.w	r3, r3, #4
 800b42a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b42e:	4b5c      	ldr	r3, [pc, #368]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b434:	4a5a      	ldr	r2, [pc, #360]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b436:	f043 0301 	orr.w	r3, r3, #1
 800b43a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b43e:	e00f      	b.n	800b460 <HAL_RCC_OscConfig+0x378>
 800b440:	4b57      	ldr	r3, [pc, #348]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b446:	4a56      	ldr	r2, [pc, #344]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b448:	f023 0301 	bic.w	r3, r3, #1
 800b44c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b450:	4b53      	ldr	r3, [pc, #332]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b456:	4a52      	ldr	r2, [pc, #328]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b458:	f023 0304 	bic.w	r3, r3, #4
 800b45c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d016      	beq.n	800b496 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b468:	f7fa f87e 	bl	8005568 <HAL_GetTick>
 800b46c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b46e:	e00a      	b.n	800b486 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b470:	f7fa f87a 	bl	8005568 <HAL_GetTick>
 800b474:	4602      	mov	r2, r0
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b47e:	4293      	cmp	r3, r2
 800b480:	d901      	bls.n	800b486 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e138      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b486:	4b46      	ldr	r3, [pc, #280]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b48c:	f003 0302 	and.w	r3, r3, #2
 800b490:	2b00      	cmp	r3, #0
 800b492:	d0ed      	beq.n	800b470 <HAL_RCC_OscConfig+0x388>
 800b494:	e015      	b.n	800b4c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b496:	f7fa f867 	bl	8005568 <HAL_GetTick>
 800b49a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b49c:	e00a      	b.n	800b4b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b49e:	f7fa f863 	bl	8005568 <HAL_GetTick>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d901      	bls.n	800b4b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e121      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b4b4:	4b3a      	ldr	r3, [pc, #232]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ba:	f003 0302 	and.w	r3, r3, #2
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1ed      	bne.n	800b49e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b4c2:	7ffb      	ldrb	r3, [r7, #31]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d105      	bne.n	800b4d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4c8:	4b35      	ldr	r3, [pc, #212]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b4ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4cc:	4a34      	ldr	r2, [pc, #208]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b4ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 0320 	and.w	r3, r3, #32
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d03c      	beq.n	800b55a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d01c      	beq.n	800b522 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b4e8:	4b2d      	ldr	r3, [pc, #180]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b4ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b4ee:	4a2c      	ldr	r2, [pc, #176]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b4f0:	f043 0301 	orr.w	r3, r3, #1
 800b4f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4f8:	f7fa f836 	bl	8005568 <HAL_GetTick>
 800b4fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b4fe:	e008      	b.n	800b512 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b500:	f7fa f832 	bl	8005568 <HAL_GetTick>
 800b504:	4602      	mov	r2, r0
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d901      	bls.n	800b512 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e0f2      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b512:	4b23      	ldr	r3, [pc, #140]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b514:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0ef      	beq.n	800b500 <HAL_RCC_OscConfig+0x418>
 800b520:	e01b      	b.n	800b55a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b522:	4b1f      	ldr	r3, [pc, #124]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b524:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b528:	4a1d      	ldr	r2, [pc, #116]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b52a:	f023 0301 	bic.w	r3, r3, #1
 800b52e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b532:	f7fa f819 	bl	8005568 <HAL_GetTick>
 800b536:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b538:	e008      	b.n	800b54c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b53a:	f7fa f815 	bl	8005568 <HAL_GetTick>
 800b53e:	4602      	mov	r2, r0
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	2b02      	cmp	r3, #2
 800b546:	d901      	bls.n	800b54c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b548:	2303      	movs	r3, #3
 800b54a:	e0d5      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b54c:	4b14      	ldr	r3, [pc, #80]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b54e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1ef      	bne.n	800b53a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f000 80c9 	beq.w	800b6f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b564:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f003 030c 	and.w	r3, r3, #12
 800b56c:	2b0c      	cmp	r3, #12
 800b56e:	f000 8083 	beq.w	800b678 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	69db      	ldr	r3, [r3, #28]
 800b576:	2b02      	cmp	r3, #2
 800b578:	d15e      	bne.n	800b638 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b57a:	4b09      	ldr	r3, [pc, #36]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a08      	ldr	r2, [pc, #32]	@ (800b5a0 <HAL_RCC_OscConfig+0x4b8>)
 800b580:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b586:	f7f9 ffef 	bl	8005568 <HAL_GetTick>
 800b58a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b58c:	e00c      	b.n	800b5a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b58e:	f7f9 ffeb 	bl	8005568 <HAL_GetTick>
 800b592:	4602      	mov	r2, r0
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d905      	bls.n	800b5a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e0ab      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
 800b5a0:	40021000 	.word	0x40021000
 800b5a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5a8:	4b55      	ldr	r3, [pc, #340]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1ec      	bne.n	800b58e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b5b4:	4b52      	ldr	r3, [pc, #328]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	4b52      	ldr	r3, [pc, #328]	@ (800b704 <HAL_RCC_OscConfig+0x61c>)
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	6a11      	ldr	r1, [r2, #32]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b5c4:	3a01      	subs	r2, #1
 800b5c6:	0112      	lsls	r2, r2, #4
 800b5c8:	4311      	orrs	r1, r2
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800b5ce:	0212      	lsls	r2, r2, #8
 800b5d0:	4311      	orrs	r1, r2
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b5d6:	0852      	lsrs	r2, r2, #1
 800b5d8:	3a01      	subs	r2, #1
 800b5da:	0552      	lsls	r2, r2, #21
 800b5dc:	4311      	orrs	r1, r2
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b5e2:	0852      	lsrs	r2, r2, #1
 800b5e4:	3a01      	subs	r2, #1
 800b5e6:	0652      	lsls	r2, r2, #25
 800b5e8:	4311      	orrs	r1, r2
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b5ee:	06d2      	lsls	r2, r2, #27
 800b5f0:	430a      	orrs	r2, r1
 800b5f2:	4943      	ldr	r1, [pc, #268]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b5f8:	4b41      	ldr	r3, [pc, #260]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a40      	ldr	r2, [pc, #256]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b5fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b602:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b604:	4b3e      	ldr	r3, [pc, #248]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	4a3d      	ldr	r2, [pc, #244]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b60a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b60e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b610:	f7f9 ffaa 	bl	8005568 <HAL_GetTick>
 800b614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b616:	e008      	b.n	800b62a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b618:	f7f9 ffa6 	bl	8005568 <HAL_GetTick>
 800b61c:	4602      	mov	r2, r0
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	2b02      	cmp	r3, #2
 800b624:	d901      	bls.n	800b62a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b626:	2303      	movs	r3, #3
 800b628:	e066      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b62a:	4b35      	ldr	r3, [pc, #212]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0f0      	beq.n	800b618 <HAL_RCC_OscConfig+0x530>
 800b636:	e05e      	b.n	800b6f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b638:	4b31      	ldr	r3, [pc, #196]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a30      	ldr	r2, [pc, #192]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b63e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b644:	f7f9 ff90 	bl	8005568 <HAL_GetTick>
 800b648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b64a:	e008      	b.n	800b65e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b64c:	f7f9 ff8c 	bl	8005568 <HAL_GetTick>
 800b650:	4602      	mov	r2, r0
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	1ad3      	subs	r3, r2, r3
 800b656:	2b02      	cmp	r3, #2
 800b658:	d901      	bls.n	800b65e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e04c      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b65e:	4b28      	ldr	r3, [pc, #160]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1f0      	bne.n	800b64c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b66a:	4b25      	ldr	r3, [pc, #148]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b66c:	68da      	ldr	r2, [r3, #12]
 800b66e:	4924      	ldr	r1, [pc, #144]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b670:	4b25      	ldr	r3, [pc, #148]	@ (800b708 <HAL_RCC_OscConfig+0x620>)
 800b672:	4013      	ands	r3, r2
 800b674:	60cb      	str	r3, [r1, #12]
 800b676:	e03e      	b.n	800b6f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	69db      	ldr	r3, [r3, #28]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d101      	bne.n	800b684 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	e039      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b684:	4b1e      	ldr	r3, [pc, #120]	@ (800b700 <HAL_RCC_OscConfig+0x618>)
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f003 0203 	and.w	r2, r3, #3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a1b      	ldr	r3, [r3, #32]
 800b694:	429a      	cmp	r2, r3
 800b696:	d12c      	bne.n	800b6f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d123      	bne.n	800b6f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d11b      	bne.n	800b6f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d113      	bne.n	800b6f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d4:	085b      	lsrs	r3, r3, #1
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d109      	bne.n	800b6f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6e8:	085b      	lsrs	r3, r3, #1
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d001      	beq.n	800b6f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e000      	b.n	800b6f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3720      	adds	r7, #32
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	40021000 	.word	0x40021000
 800b704:	019f800c 	.word	0x019f800c
 800b708:	feeefffc 	.word	0xfeeefffc

0800b70c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b716:	2300      	movs	r3, #0
 800b718:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d101      	bne.n	800b724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	e11e      	b.n	800b962 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b724:	4b91      	ldr	r3, [pc, #580]	@ (800b96c <HAL_RCC_ClockConfig+0x260>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 030f 	and.w	r3, r3, #15
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d910      	bls.n	800b754 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b732:	4b8e      	ldr	r3, [pc, #568]	@ (800b96c <HAL_RCC_ClockConfig+0x260>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f023 020f 	bic.w	r2, r3, #15
 800b73a:	498c      	ldr	r1, [pc, #560]	@ (800b96c <HAL_RCC_ClockConfig+0x260>)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	4313      	orrs	r3, r2
 800b740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b742:	4b8a      	ldr	r3, [pc, #552]	@ (800b96c <HAL_RCC_ClockConfig+0x260>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 030f 	and.w	r3, r3, #15
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d001      	beq.n	800b754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	e106      	b.n	800b962 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0301 	and.w	r3, r3, #1
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d073      	beq.n	800b848 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	2b03      	cmp	r3, #3
 800b766:	d129      	bne.n	800b7bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b768:	4b81      	ldr	r3, [pc, #516]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e0f4      	b.n	800b962 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b778:	f000 f966 	bl	800ba48 <RCC_GetSysClockFreqFromPLLSource>
 800b77c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	4a7c      	ldr	r2, [pc, #496]	@ (800b974 <HAL_RCC_ClockConfig+0x268>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d93f      	bls.n	800b806 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b786:	4b7a      	ldr	r3, [pc, #488]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d009      	beq.n	800b7a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d033      	beq.n	800b806 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d12f      	bne.n	800b806 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b7a6:	4b72      	ldr	r3, [pc, #456]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7ae:	4a70      	ldr	r2, [pc, #448]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b7b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b7b6:	2380      	movs	r3, #128	@ 0x80
 800b7b8:	617b      	str	r3, [r7, #20]
 800b7ba:	e024      	b.n	800b806 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d107      	bne.n	800b7d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b7c4:	4b6a      	ldr	r3, [pc, #424]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d109      	bne.n	800b7e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e0c6      	b.n	800b962 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b7d4:	4b66      	ldr	r3, [pc, #408]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e0be      	b.n	800b962 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b7e4:	f000 f8ce 	bl	800b984 <HAL_RCC_GetSysClockFreq>
 800b7e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	4a61      	ldr	r2, [pc, #388]	@ (800b974 <HAL_RCC_ClockConfig+0x268>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d909      	bls.n	800b806 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b7f2:	4b5f      	ldr	r3, [pc, #380]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7fa:	4a5d      	ldr	r2, [pc, #372]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b7fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b800:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b802:	2380      	movs	r3, #128	@ 0x80
 800b804:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b806:	4b5a      	ldr	r3, [pc, #360]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	f023 0203 	bic.w	r2, r3, #3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	4957      	ldr	r1, [pc, #348]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b814:	4313      	orrs	r3, r2
 800b816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b818:	f7f9 fea6 	bl	8005568 <HAL_GetTick>
 800b81c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b81e:	e00a      	b.n	800b836 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b820:	f7f9 fea2 	bl	8005568 <HAL_GetTick>
 800b824:	4602      	mov	r2, r0
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b82e:	4293      	cmp	r3, r2
 800b830:	d901      	bls.n	800b836 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b832:	2303      	movs	r3, #3
 800b834:	e095      	b.n	800b962 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b836:	4b4e      	ldr	r3, [pc, #312]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f003 020c 	and.w	r2, r3, #12
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	429a      	cmp	r2, r3
 800b846:	d1eb      	bne.n	800b820 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 0302 	and.w	r3, r3, #2
 800b850:	2b00      	cmp	r3, #0
 800b852:	d023      	beq.n	800b89c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f003 0304 	and.w	r3, r3, #4
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d005      	beq.n	800b86c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b860:	4b43      	ldr	r3, [pc, #268]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	4a42      	ldr	r2, [pc, #264]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b86a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 0308 	and.w	r3, r3, #8
 800b874:	2b00      	cmp	r3, #0
 800b876:	d007      	beq.n	800b888 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b878:	4b3d      	ldr	r3, [pc, #244]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b880:	4a3b      	ldr	r2, [pc, #236]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b882:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b886:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b888:	4b39      	ldr	r3, [pc, #228]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	4936      	ldr	r1, [pc, #216]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b896:	4313      	orrs	r3, r2
 800b898:	608b      	str	r3, [r1, #8]
 800b89a:	e008      	b.n	800b8ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	2b80      	cmp	r3, #128	@ 0x80
 800b8a0:	d105      	bne.n	800b8ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b8a2:	4b33      	ldr	r3, [pc, #204]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	4a32      	ldr	r2, [pc, #200]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b8a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b8ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b8ae:	4b2f      	ldr	r3, [pc, #188]	@ (800b96c <HAL_RCC_ClockConfig+0x260>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f003 030f 	and.w	r3, r3, #15
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d21d      	bcs.n	800b8f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8bc:	4b2b      	ldr	r3, [pc, #172]	@ (800b96c <HAL_RCC_ClockConfig+0x260>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f023 020f 	bic.w	r2, r3, #15
 800b8c4:	4929      	ldr	r1, [pc, #164]	@ (800b96c <HAL_RCC_ClockConfig+0x260>)
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b8cc:	f7f9 fe4c 	bl	8005568 <HAL_GetTick>
 800b8d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8d2:	e00a      	b.n	800b8ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8d4:	f7f9 fe48 	bl	8005568 <HAL_GetTick>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	1ad3      	subs	r3, r2, r3
 800b8de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d901      	bls.n	800b8ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e03b      	b.n	800b962 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8ea:	4b20      	ldr	r3, [pc, #128]	@ (800b96c <HAL_RCC_ClockConfig+0x260>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 030f 	and.w	r3, r3, #15
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d1ed      	bne.n	800b8d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0304 	and.w	r3, r3, #4
 800b900:	2b00      	cmp	r3, #0
 800b902:	d008      	beq.n	800b916 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b904:	4b1a      	ldr	r3, [pc, #104]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	4917      	ldr	r1, [pc, #92]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b912:	4313      	orrs	r3, r2
 800b914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 0308 	and.w	r3, r3, #8
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d009      	beq.n	800b936 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b922:	4b13      	ldr	r3, [pc, #76]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	00db      	lsls	r3, r3, #3
 800b930:	490f      	ldr	r1, [pc, #60]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b932:	4313      	orrs	r3, r2
 800b934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b936:	f000 f825 	bl	800b984 <HAL_RCC_GetSysClockFreq>
 800b93a:	4602      	mov	r2, r0
 800b93c:	4b0c      	ldr	r3, [pc, #48]	@ (800b970 <HAL_RCC_ClockConfig+0x264>)
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	091b      	lsrs	r3, r3, #4
 800b942:	f003 030f 	and.w	r3, r3, #15
 800b946:	490c      	ldr	r1, [pc, #48]	@ (800b978 <HAL_RCC_ClockConfig+0x26c>)
 800b948:	5ccb      	ldrb	r3, [r1, r3]
 800b94a:	f003 031f 	and.w	r3, r3, #31
 800b94e:	fa22 f303 	lsr.w	r3, r2, r3
 800b952:	4a0a      	ldr	r2, [pc, #40]	@ (800b97c <HAL_RCC_ClockConfig+0x270>)
 800b954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b956:	4b0a      	ldr	r3, [pc, #40]	@ (800b980 <HAL_RCC_ClockConfig+0x274>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7f9 fdb8 	bl	80054d0 <HAL_InitTick>
 800b960:	4603      	mov	r3, r0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3718      	adds	r7, #24
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	40022000 	.word	0x40022000
 800b970:	40021000 	.word	0x40021000
 800b974:	04c4b400 	.word	0x04c4b400
 800b978:	0800d440 	.word	0x0800d440
 800b97c:	2000000c 	.word	0x2000000c
 800b980:	20000014 	.word	0x20000014

0800b984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b984:	b480      	push	{r7}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b98a:	4b2c      	ldr	r3, [pc, #176]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	f003 030c 	and.w	r3, r3, #12
 800b992:	2b04      	cmp	r3, #4
 800b994:	d102      	bne.n	800b99c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b996:	4b2a      	ldr	r3, [pc, #168]	@ (800ba40 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b998:	613b      	str	r3, [r7, #16]
 800b99a:	e047      	b.n	800ba2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b99c:	4b27      	ldr	r3, [pc, #156]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f003 030c 	and.w	r3, r3, #12
 800b9a4:	2b08      	cmp	r3, #8
 800b9a6:	d102      	bne.n	800b9ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b9a8:	4b26      	ldr	r3, [pc, #152]	@ (800ba44 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b9aa:	613b      	str	r3, [r7, #16]
 800b9ac:	e03e      	b.n	800ba2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b9ae:	4b23      	ldr	r3, [pc, #140]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	f003 030c 	and.w	r3, r3, #12
 800b9b6:	2b0c      	cmp	r3, #12
 800b9b8:	d136      	bne.n	800ba28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b9ba:	4b20      	ldr	r3, [pc, #128]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	f003 0303 	and.w	r3, r3, #3
 800b9c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b9c4:	4b1d      	ldr	r3, [pc, #116]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	091b      	lsrs	r3, r3, #4
 800b9ca:	f003 030f 	and.w	r3, r3, #15
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d10c      	bne.n	800b9f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9d8:	4a1a      	ldr	r2, [pc, #104]	@ (800ba44 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e0:	4a16      	ldr	r2, [pc, #88]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9e2:	68d2      	ldr	r2, [r2, #12]
 800b9e4:	0a12      	lsrs	r2, r2, #8
 800b9e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b9ea:	fb02 f303 	mul.w	r3, r2, r3
 800b9ee:	617b      	str	r3, [r7, #20]
      break;
 800b9f0:	e00c      	b.n	800ba0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9f2:	4a13      	ldr	r2, [pc, #76]	@ (800ba40 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9fa:	4a10      	ldr	r2, [pc, #64]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b9fc:	68d2      	ldr	r2, [r2, #12]
 800b9fe:	0a12      	lsrs	r2, r2, #8
 800ba00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ba04:	fb02 f303 	mul.w	r3, r2, r3
 800ba08:	617b      	str	r3, [r7, #20]
      break;
 800ba0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ba0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	0e5b      	lsrs	r3, r3, #25
 800ba12:	f003 0303 	and.w	r3, r3, #3
 800ba16:	3301      	adds	r3, #1
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba24:	613b      	str	r3, [r7, #16]
 800ba26:	e001      	b.n	800ba2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ba2c:	693b      	ldr	r3, [r7, #16]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	371c      	adds	r7, #28
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	40021000 	.word	0x40021000
 800ba40:	00f42400 	.word	0x00f42400
 800ba44:	016e3600 	.word	0x016e3600

0800ba48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ba4e:	4b1e      	ldr	r3, [pc, #120]	@ (800bac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ba58:	4b1b      	ldr	r3, [pc, #108]	@ (800bac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	091b      	lsrs	r3, r3, #4
 800ba5e:	f003 030f 	and.w	r3, r3, #15
 800ba62:	3301      	adds	r3, #1
 800ba64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d10c      	bne.n	800ba86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba6c:	4a17      	ldr	r2, [pc, #92]	@ (800bacc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba74:	4a14      	ldr	r2, [pc, #80]	@ (800bac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba76:	68d2      	ldr	r2, [r2, #12]
 800ba78:	0a12      	lsrs	r2, r2, #8
 800ba7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ba7e:	fb02 f303 	mul.w	r3, r2, r3
 800ba82:	617b      	str	r3, [r7, #20]
    break;
 800ba84:	e00c      	b.n	800baa0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ba86:	4a12      	ldr	r2, [pc, #72]	@ (800bad0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba8e:	4a0e      	ldr	r2, [pc, #56]	@ (800bac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ba90:	68d2      	ldr	r2, [r2, #12]
 800ba92:	0a12      	lsrs	r2, r2, #8
 800ba94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ba98:	fb02 f303 	mul.w	r3, r2, r3
 800ba9c:	617b      	str	r3, [r7, #20]
    break;
 800ba9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800baa0:	4b09      	ldr	r3, [pc, #36]	@ (800bac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	0e5b      	lsrs	r3, r3, #25
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	3301      	adds	r3, #1
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bab8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800baba:	687b      	ldr	r3, [r7, #4]
}
 800babc:	4618      	mov	r0, r3
 800babe:	371c      	adds	r7, #28
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	40021000 	.word	0x40021000
 800bacc:	016e3600 	.word	0x016e3600
 800bad0:	00f42400 	.word	0x00f42400

0800bad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800badc:	2300      	movs	r3, #0
 800bade:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bae0:	2300      	movs	r3, #0
 800bae2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800baec:	2b00      	cmp	r3, #0
 800baee:	f000 8098 	beq.w	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800baf2:	2300      	movs	r3, #0
 800baf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800baf6:	4b43      	ldr	r3, [pc, #268]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bafa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10d      	bne.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb02:	4b40      	ldr	r3, [pc, #256]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb06:	4a3f      	ldr	r2, [pc, #252]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb0c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb0e:	4b3d      	ldr	r3, [pc, #244]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb16:	60bb      	str	r3, [r7, #8]
 800bb18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb1e:	4b3a      	ldr	r3, [pc, #232]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a39      	ldr	r2, [pc, #228]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bb24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb2a:	f7f9 fd1d 	bl	8005568 <HAL_GetTick>
 800bb2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb30:	e009      	b.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb32:	f7f9 fd19 	bl	8005568 <HAL_GetTick>
 800bb36:	4602      	mov	r2, r0
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d902      	bls.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bb40:	2303      	movs	r3, #3
 800bb42:	74fb      	strb	r3, [r7, #19]
        break;
 800bb44:	e005      	b.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb46:	4b30      	ldr	r3, [pc, #192]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d0ef      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bb52:	7cfb      	ldrb	r3, [r7, #19]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d159      	bne.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bb58:	4b2a      	ldr	r3, [pc, #168]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d01e      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d019      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bb74:	4b23      	ldr	r3, [pc, #140]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb80:	4b20      	ldr	r3, [pc, #128]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb86:	4a1f      	ldr	r2, [pc, #124]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb90:	4b1c      	ldr	r3, [pc, #112]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb96:	4a1b      	ldr	r2, [pc, #108]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bba0:	4a18      	ldr	r2, [pc, #96]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	f003 0301 	and.w	r3, r3, #1
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d016      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbb2:	f7f9 fcd9 	bl	8005568 <HAL_GetTick>
 800bbb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbb8:	e00b      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbba:	f7f9 fcd5 	bl	8005568 <HAL_GetTick>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	1ad3      	subs	r3, r2, r3
 800bbc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d902      	bls.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	74fb      	strb	r3, [r7, #19]
            break;
 800bbd0:	e006      	b.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bbd2:	4b0c      	ldr	r3, [pc, #48]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbd8:	f003 0302 	and.w	r3, r3, #2
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d0ec      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bbe0:	7cfb      	ldrb	r3, [r7, #19]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10b      	bne.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbe6:	4b07      	ldr	r3, [pc, #28]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbf4:	4903      	ldr	r1, [pc, #12]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800bbfc:	e008      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bbfe:	7cfb      	ldrb	r3, [r7, #19]
 800bc00:	74bb      	strb	r3, [r7, #18]
 800bc02:	e005      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bc04:	40021000 	.word	0x40021000
 800bc08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0c:	7cfb      	ldrb	r3, [r7, #19]
 800bc0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc10:	7c7b      	ldrb	r3, [r7, #17]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d105      	bne.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc16:	4ba7      	ldr	r3, [pc, #668]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc1a:	4aa6      	ldr	r2, [pc, #664]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00a      	beq.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bc2e:	4ba1      	ldr	r3, [pc, #644]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc34:	f023 0203 	bic.w	r2, r3, #3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	499d      	ldr	r1, [pc, #628]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f003 0302 	and.w	r3, r3, #2
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00a      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bc50:	4b98      	ldr	r3, [pc, #608]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc56:	f023 020c 	bic.w	r2, r3, #12
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	4995      	ldr	r1, [pc, #596]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc60:	4313      	orrs	r3, r2
 800bc62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 0304 	and.w	r3, r3, #4
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00a      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bc72:	4b90      	ldr	r3, [pc, #576]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	498c      	ldr	r1, [pc, #560]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc82:	4313      	orrs	r3, r2
 800bc84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 0308 	and.w	r3, r3, #8
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00a      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bc94:	4b87      	ldr	r3, [pc, #540]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	4984      	ldr	r1, [pc, #528]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bca4:	4313      	orrs	r3, r2
 800bca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 0310 	and.w	r3, r3, #16
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00a      	beq.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bcb6:	4b7f      	ldr	r3, [pc, #508]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	497b      	ldr	r1, [pc, #492]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 0320 	and.w	r3, r3, #32
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00a      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bcd8:	4b76      	ldr	r3, [pc, #472]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	699b      	ldr	r3, [r3, #24]
 800bce6:	4973      	ldr	r1, [pc, #460]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bce8:	4313      	orrs	r3, r2
 800bcea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00a      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bcfa:	4b6e      	ldr	r3, [pc, #440]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	69db      	ldr	r3, [r3, #28]
 800bd08:	496a      	ldr	r1, [pc, #424]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00a      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bd1c:	4b65      	ldr	r3, [pc, #404]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	4962      	ldr	r1, [pc, #392]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00a      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bd3e:	4b5d      	ldr	r3, [pc, #372]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd4c:	4959      	ldr	r1, [pc, #356]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bd60:	4b54      	ldr	r3, [pc, #336]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bd66:	f023 0203 	bic.w	r2, r3, #3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd6e:	4951      	ldr	r1, [pc, #324]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd70:	4313      	orrs	r3, r2
 800bd72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd82:	4b4c      	ldr	r3, [pc, #304]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd90:	4948      	ldr	r1, [pc, #288]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d015      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bda4:	4b43      	ldr	r3, [pc, #268]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bda6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb2:	4940      	ldr	r1, [pc, #256]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdc2:	d105      	bne.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdc4:	4b3b      	ldr	r3, [pc, #236]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	4a3a      	ldr	r2, [pc, #232]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bdce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d015      	beq.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bddc:	4b35      	ldr	r3, [pc, #212]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bde2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdea:	4932      	ldr	r1, [pc, #200]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdfa:	d105      	bne.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdfc:	4b2d      	ldr	r3, [pc, #180]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	4a2c      	ldr	r2, [pc, #176]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be06:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d015      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800be14:	4b27      	ldr	r3, [pc, #156]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be22:	4924      	ldr	r1, [pc, #144]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be24:	4313      	orrs	r3, r2
 800be26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be32:	d105      	bne.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be34:	4b1f      	ldr	r3, [pc, #124]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	4a1e      	ldr	r2, [pc, #120]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d015      	beq.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be4c:	4b19      	ldr	r3, [pc, #100]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be5a:	4916      	ldr	r1, [pc, #88]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be5c:	4313      	orrs	r3, r2
 800be5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be6a:	d105      	bne.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be6c:	4b11      	ldr	r3, [pc, #68]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	4a10      	ldr	r2, [pc, #64]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be80:	2b00      	cmp	r3, #0
 800be82:	d019      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be84:	4b0b      	ldr	r3, [pc, #44]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be92:	4908      	ldr	r1, [pc, #32]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800be94:	4313      	orrs	r3, r2
 800be96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bea2:	d109      	bne.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bea4:	4b03      	ldr	r3, [pc, #12]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	4a02      	ldr	r2, [pc, #8]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800beaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800beae:	60d3      	str	r3, [r2, #12]
 800beb0:	e002      	b.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800beb2:	bf00      	nop
 800beb4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d015      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bec4:	4b29      	ldr	r3, [pc, #164]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bed2:	4926      	ldr	r1, [pc, #152]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bed4:	4313      	orrs	r3, r2
 800bed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bee2:	d105      	bne.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bee4:	4b21      	ldr	r3, [pc, #132]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	4a20      	ldr	r2, [pc, #128]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800beea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800beee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d015      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800befc:	4b1b      	ldr	r3, [pc, #108]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800befe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf02:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf0a:	4918      	ldr	r1, [pc, #96]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf1a:	d105      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bf1c:	4b13      	ldr	r3, [pc, #76]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	4a12      	ldr	r2, [pc, #72]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf26:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d015      	beq.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bf34:	4b0d      	ldr	r3, [pc, #52]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bf3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf42:	490a      	ldr	r1, [pc, #40]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf44:	4313      	orrs	r3, r2
 800bf46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf52:	d105      	bne.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf54:	4b05      	ldr	r3, [pc, #20]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	4a04      	ldr	r2, [pc, #16]	@ (800bf6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bf60:	7cbb      	ldrb	r3, [r7, #18]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3718      	adds	r7, #24
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	40021000 	.word	0x40021000

0800bf70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e049      	b.n	800c016 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7f8 fc5c 	bl	8004854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	3304      	adds	r3, #4
 800bfac:	4619      	mov	r1, r3
 800bfae:	4610      	mov	r0, r2
 800bfb0:	f000 fa5c 	bl	800c46c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2201      	movs	r2, #1
 800c008:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
	...

0800c020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d109      	bne.n	800c044 <HAL_TIM_PWM_Start+0x24>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c036:	b2db      	uxtb	r3, r3
 800c038:	2b01      	cmp	r3, #1
 800c03a:	bf14      	ite	ne
 800c03c:	2301      	movne	r3, #1
 800c03e:	2300      	moveq	r3, #0
 800c040:	b2db      	uxtb	r3, r3
 800c042:	e03c      	b.n	800c0be <HAL_TIM_PWM_Start+0x9e>
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b04      	cmp	r3, #4
 800c048:	d109      	bne.n	800c05e <HAL_TIM_PWM_Start+0x3e>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b01      	cmp	r3, #1
 800c054:	bf14      	ite	ne
 800c056:	2301      	movne	r3, #1
 800c058:	2300      	moveq	r3, #0
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	e02f      	b.n	800c0be <HAL_TIM_PWM_Start+0x9e>
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	2b08      	cmp	r3, #8
 800c062:	d109      	bne.n	800c078 <HAL_TIM_PWM_Start+0x58>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	bf14      	ite	ne
 800c070:	2301      	movne	r3, #1
 800c072:	2300      	moveq	r3, #0
 800c074:	b2db      	uxtb	r3, r3
 800c076:	e022      	b.n	800c0be <HAL_TIM_PWM_Start+0x9e>
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	2b0c      	cmp	r3, #12
 800c07c:	d109      	bne.n	800c092 <HAL_TIM_PWM_Start+0x72>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c084:	b2db      	uxtb	r3, r3
 800c086:	2b01      	cmp	r3, #1
 800c088:	bf14      	ite	ne
 800c08a:	2301      	movne	r3, #1
 800c08c:	2300      	moveq	r3, #0
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	e015      	b.n	800c0be <HAL_TIM_PWM_Start+0x9e>
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2b10      	cmp	r3, #16
 800c096:	d109      	bne.n	800c0ac <HAL_TIM_PWM_Start+0x8c>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	bf14      	ite	ne
 800c0a4:	2301      	movne	r3, #1
 800c0a6:	2300      	moveq	r3, #0
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	e008      	b.n	800c0be <HAL_TIM_PWM_Start+0x9e>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	bf14      	ite	ne
 800c0b8:	2301      	movne	r3, #1
 800c0ba:	2300      	moveq	r3, #0
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d001      	beq.n	800c0c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e0a6      	b.n	800c214 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d104      	bne.n	800c0d6 <HAL_TIM_PWM_Start+0xb6>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0d4:	e023      	b.n	800c11e <HAL_TIM_PWM_Start+0xfe>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d104      	bne.n	800c0e6 <HAL_TIM_PWM_Start+0xc6>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0e4:	e01b      	b.n	800c11e <HAL_TIM_PWM_Start+0xfe>
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2b08      	cmp	r3, #8
 800c0ea:	d104      	bne.n	800c0f6 <HAL_TIM_PWM_Start+0xd6>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0f4:	e013      	b.n	800c11e <HAL_TIM_PWM_Start+0xfe>
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b0c      	cmp	r3, #12
 800c0fa:	d104      	bne.n	800c106 <HAL_TIM_PWM_Start+0xe6>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2202      	movs	r2, #2
 800c100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c104:	e00b      	b.n	800c11e <HAL_TIM_PWM_Start+0xfe>
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	2b10      	cmp	r3, #16
 800c10a:	d104      	bne.n	800c116 <HAL_TIM_PWM_Start+0xf6>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2202      	movs	r2, #2
 800c110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c114:	e003      	b.n	800c11e <HAL_TIM_PWM_Start+0xfe>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2202      	movs	r2, #2
 800c11a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2201      	movs	r2, #1
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	4618      	mov	r0, r3
 800c128:	f000 fd7e 	bl	800cc28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a3a      	ldr	r2, [pc, #232]	@ (800c21c <HAL_TIM_PWM_Start+0x1fc>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d018      	beq.n	800c168 <HAL_TIM_PWM_Start+0x148>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a39      	ldr	r2, [pc, #228]	@ (800c220 <HAL_TIM_PWM_Start+0x200>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d013      	beq.n	800c168 <HAL_TIM_PWM_Start+0x148>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a37      	ldr	r2, [pc, #220]	@ (800c224 <HAL_TIM_PWM_Start+0x204>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d00e      	beq.n	800c168 <HAL_TIM_PWM_Start+0x148>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a36      	ldr	r2, [pc, #216]	@ (800c228 <HAL_TIM_PWM_Start+0x208>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d009      	beq.n	800c168 <HAL_TIM_PWM_Start+0x148>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a34      	ldr	r2, [pc, #208]	@ (800c22c <HAL_TIM_PWM_Start+0x20c>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d004      	beq.n	800c168 <HAL_TIM_PWM_Start+0x148>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a33      	ldr	r2, [pc, #204]	@ (800c230 <HAL_TIM_PWM_Start+0x210>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d101      	bne.n	800c16c <HAL_TIM_PWM_Start+0x14c>
 800c168:	2301      	movs	r3, #1
 800c16a:	e000      	b.n	800c16e <HAL_TIM_PWM_Start+0x14e>
 800c16c:	2300      	movs	r3, #0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d007      	beq.n	800c182 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c180:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a25      	ldr	r2, [pc, #148]	@ (800c21c <HAL_TIM_PWM_Start+0x1fc>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d022      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x1b2>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c194:	d01d      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x1b2>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a26      	ldr	r2, [pc, #152]	@ (800c234 <HAL_TIM_PWM_Start+0x214>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d018      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x1b2>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a24      	ldr	r2, [pc, #144]	@ (800c238 <HAL_TIM_PWM_Start+0x218>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d013      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x1b2>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a23      	ldr	r2, [pc, #140]	@ (800c23c <HAL_TIM_PWM_Start+0x21c>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d00e      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x1b2>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a19      	ldr	r2, [pc, #100]	@ (800c220 <HAL_TIM_PWM_Start+0x200>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d009      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x1b2>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a18      	ldr	r2, [pc, #96]	@ (800c224 <HAL_TIM_PWM_Start+0x204>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d004      	beq.n	800c1d2 <HAL_TIM_PWM_Start+0x1b2>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a18      	ldr	r2, [pc, #96]	@ (800c230 <HAL_TIM_PWM_Start+0x210>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d115      	bne.n	800c1fe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	689a      	ldr	r2, [r3, #8]
 800c1d8:	4b19      	ldr	r3, [pc, #100]	@ (800c240 <HAL_TIM_PWM_Start+0x220>)
 800c1da:	4013      	ands	r3, r2
 800c1dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2b06      	cmp	r3, #6
 800c1e2:	d015      	beq.n	800c210 <HAL_TIM_PWM_Start+0x1f0>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1ea:	d011      	beq.n	800c210 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0201 	orr.w	r2, r2, #1
 800c1fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1fc:	e008      	b.n	800c210 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f042 0201 	orr.w	r2, r2, #1
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	e000      	b.n	800c212 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c210:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	40012c00 	.word	0x40012c00
 800c220:	40013400 	.word	0x40013400
 800c224:	40014000 	.word	0x40014000
 800c228:	40014400 	.word	0x40014400
 800c22c:	40014800 	.word	0x40014800
 800c230:	40015000 	.word	0x40015000
 800c234:	40000400 	.word	0x40000400
 800c238:	40000800 	.word	0x40000800
 800c23c:	40000c00 	.word	0x40000c00
 800c240:	00010007 	.word	0x00010007

0800c244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d101      	bne.n	800c262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c25e:	2302      	movs	r3, #2
 800c260:	e0ff      	b.n	800c462 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b14      	cmp	r3, #20
 800c26e:	f200 80f0 	bhi.w	800c452 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c272:	a201      	add	r2, pc, #4	@ (adr r2, 800c278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c278:	0800c2cd 	.word	0x0800c2cd
 800c27c:	0800c453 	.word	0x0800c453
 800c280:	0800c453 	.word	0x0800c453
 800c284:	0800c453 	.word	0x0800c453
 800c288:	0800c30d 	.word	0x0800c30d
 800c28c:	0800c453 	.word	0x0800c453
 800c290:	0800c453 	.word	0x0800c453
 800c294:	0800c453 	.word	0x0800c453
 800c298:	0800c34f 	.word	0x0800c34f
 800c29c:	0800c453 	.word	0x0800c453
 800c2a0:	0800c453 	.word	0x0800c453
 800c2a4:	0800c453 	.word	0x0800c453
 800c2a8:	0800c38f 	.word	0x0800c38f
 800c2ac:	0800c453 	.word	0x0800c453
 800c2b0:	0800c453 	.word	0x0800c453
 800c2b4:	0800c453 	.word	0x0800c453
 800c2b8:	0800c3d1 	.word	0x0800c3d1
 800c2bc:	0800c453 	.word	0x0800c453
 800c2c0:	0800c453 	.word	0x0800c453
 800c2c4:	0800c453 	.word	0x0800c453
 800c2c8:	0800c411 	.word	0x0800c411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68b9      	ldr	r1, [r7, #8]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 f97e 	bl	800c5d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	699a      	ldr	r2, [r3, #24]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f042 0208 	orr.w	r2, r2, #8
 800c2e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	699a      	ldr	r2, [r3, #24]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f022 0204 	bic.w	r2, r2, #4
 800c2f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6999      	ldr	r1, [r3, #24]
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	691a      	ldr	r2, [r3, #16]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	430a      	orrs	r2, r1
 800c308:	619a      	str	r2, [r3, #24]
      break;
 800c30a:	e0a5      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68b9      	ldr	r1, [r7, #8]
 800c312:	4618      	mov	r0, r3
 800c314:	f000 f9f8 	bl	800c708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	699a      	ldr	r2, [r3, #24]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	699a      	ldr	r2, [r3, #24]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6999      	ldr	r1, [r3, #24]
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	691b      	ldr	r3, [r3, #16]
 800c342:	021a      	lsls	r2, r3, #8
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	430a      	orrs	r2, r1
 800c34a:	619a      	str	r2, [r3, #24]
      break;
 800c34c:	e084      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	68b9      	ldr	r1, [r7, #8]
 800c354:	4618      	mov	r0, r3
 800c356:	f000 fa6b 	bl	800c830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	69da      	ldr	r2, [r3, #28]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f042 0208 	orr.w	r2, r2, #8
 800c368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	69da      	ldr	r2, [r3, #28]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f022 0204 	bic.w	r2, r2, #4
 800c378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	69d9      	ldr	r1, [r3, #28]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	691a      	ldr	r2, [r3, #16]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	430a      	orrs	r2, r1
 800c38a:	61da      	str	r2, [r3, #28]
      break;
 800c38c:	e064      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	68b9      	ldr	r1, [r7, #8]
 800c394:	4618      	mov	r0, r3
 800c396:	f000 fadd 	bl	800c954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	69da      	ldr	r2, [r3, #28]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c3a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	69da      	ldr	r2, [r3, #28]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c3b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	69d9      	ldr	r1, [r3, #28]
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	021a      	lsls	r2, r3, #8
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	61da      	str	r2, [r3, #28]
      break;
 800c3ce:	e043      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68b9      	ldr	r1, [r7, #8]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 fb50 	bl	800ca7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f042 0208 	orr.w	r2, r2, #8
 800c3ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f022 0204 	bic.w	r2, r2, #4
 800c3fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	691a      	ldr	r2, [r3, #16]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	430a      	orrs	r2, r1
 800c40c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c40e:	e023      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68b9      	ldr	r1, [r7, #8]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 fb9a 	bl	800cb50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c42a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c43a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	021a      	lsls	r2, r3, #8
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800c450:	e002      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	75fb      	strb	r3, [r7, #23]
      break;
 800c456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c460:	7dfb      	ldrb	r3, [r7, #23]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3718      	adds	r7, #24
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop

0800c46c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a4c      	ldr	r2, [pc, #304]	@ (800c5b0 <TIM_Base_SetConfig+0x144>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d017      	beq.n	800c4b4 <TIM_Base_SetConfig+0x48>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c48a:	d013      	beq.n	800c4b4 <TIM_Base_SetConfig+0x48>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a49      	ldr	r2, [pc, #292]	@ (800c5b4 <TIM_Base_SetConfig+0x148>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d00f      	beq.n	800c4b4 <TIM_Base_SetConfig+0x48>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a48      	ldr	r2, [pc, #288]	@ (800c5b8 <TIM_Base_SetConfig+0x14c>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d00b      	beq.n	800c4b4 <TIM_Base_SetConfig+0x48>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a47      	ldr	r2, [pc, #284]	@ (800c5bc <TIM_Base_SetConfig+0x150>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d007      	beq.n	800c4b4 <TIM_Base_SetConfig+0x48>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a46      	ldr	r2, [pc, #280]	@ (800c5c0 <TIM_Base_SetConfig+0x154>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d003      	beq.n	800c4b4 <TIM_Base_SetConfig+0x48>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a45      	ldr	r2, [pc, #276]	@ (800c5c4 <TIM_Base_SetConfig+0x158>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d108      	bne.n	800c4c6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a39      	ldr	r2, [pc, #228]	@ (800c5b0 <TIM_Base_SetConfig+0x144>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d023      	beq.n	800c516 <TIM_Base_SetConfig+0xaa>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4d4:	d01f      	beq.n	800c516 <TIM_Base_SetConfig+0xaa>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a36      	ldr	r2, [pc, #216]	@ (800c5b4 <TIM_Base_SetConfig+0x148>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d01b      	beq.n	800c516 <TIM_Base_SetConfig+0xaa>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a35      	ldr	r2, [pc, #212]	@ (800c5b8 <TIM_Base_SetConfig+0x14c>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d017      	beq.n	800c516 <TIM_Base_SetConfig+0xaa>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a34      	ldr	r2, [pc, #208]	@ (800c5bc <TIM_Base_SetConfig+0x150>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d013      	beq.n	800c516 <TIM_Base_SetConfig+0xaa>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a33      	ldr	r2, [pc, #204]	@ (800c5c0 <TIM_Base_SetConfig+0x154>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d00f      	beq.n	800c516 <TIM_Base_SetConfig+0xaa>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a33      	ldr	r2, [pc, #204]	@ (800c5c8 <TIM_Base_SetConfig+0x15c>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d00b      	beq.n	800c516 <TIM_Base_SetConfig+0xaa>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a32      	ldr	r2, [pc, #200]	@ (800c5cc <TIM_Base_SetConfig+0x160>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d007      	beq.n	800c516 <TIM_Base_SetConfig+0xaa>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a31      	ldr	r2, [pc, #196]	@ (800c5d0 <TIM_Base_SetConfig+0x164>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d003      	beq.n	800c516 <TIM_Base_SetConfig+0xaa>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a2c      	ldr	r2, [pc, #176]	@ (800c5c4 <TIM_Base_SetConfig+0x158>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d108      	bne.n	800c528 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c51c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	4313      	orrs	r3, r2
 800c526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	695b      	ldr	r3, [r3, #20]
 800c532:	4313      	orrs	r3, r2
 800c534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	689a      	ldr	r2, [r3, #8]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a18      	ldr	r2, [pc, #96]	@ (800c5b0 <TIM_Base_SetConfig+0x144>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d013      	beq.n	800c57c <TIM_Base_SetConfig+0x110>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a1a      	ldr	r2, [pc, #104]	@ (800c5c0 <TIM_Base_SetConfig+0x154>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d00f      	beq.n	800c57c <TIM_Base_SetConfig+0x110>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4a1a      	ldr	r2, [pc, #104]	@ (800c5c8 <TIM_Base_SetConfig+0x15c>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d00b      	beq.n	800c57c <TIM_Base_SetConfig+0x110>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a19      	ldr	r2, [pc, #100]	@ (800c5cc <TIM_Base_SetConfig+0x160>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d007      	beq.n	800c57c <TIM_Base_SetConfig+0x110>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a18      	ldr	r2, [pc, #96]	@ (800c5d0 <TIM_Base_SetConfig+0x164>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d003      	beq.n	800c57c <TIM_Base_SetConfig+0x110>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a13      	ldr	r2, [pc, #76]	@ (800c5c4 <TIM_Base_SetConfig+0x158>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d103      	bne.n	800c584 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	691a      	ldr	r2, [r3, #16]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	2b01      	cmp	r3, #1
 800c594:	d105      	bne.n	800c5a2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	f023 0201 	bic.w	r2, r3, #1
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	611a      	str	r2, [r3, #16]
  }
}
 800c5a2:	bf00      	nop
 800c5a4:	3714      	adds	r7, #20
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	40012c00 	.word	0x40012c00
 800c5b4:	40000400 	.word	0x40000400
 800c5b8:	40000800 	.word	0x40000800
 800c5bc:	40000c00 	.word	0x40000c00
 800c5c0:	40013400 	.word	0x40013400
 800c5c4:	40015000 	.word	0x40015000
 800c5c8:	40014000 	.word	0x40014000
 800c5cc:	40014400 	.word	0x40014400
 800c5d0:	40014800 	.word	0x40014800

0800c5d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a1b      	ldr	r3, [r3, #32]
 800c5e8:	f023 0201 	bic.w	r2, r3, #1
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f023 0303 	bic.w	r3, r3, #3
 800c60e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	4313      	orrs	r3, r2
 800c618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f023 0302 	bic.w	r3, r3, #2
 800c620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	4313      	orrs	r3, r2
 800c62a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a30      	ldr	r2, [pc, #192]	@ (800c6f0 <TIM_OC1_SetConfig+0x11c>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d013      	beq.n	800c65c <TIM_OC1_SetConfig+0x88>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a2f      	ldr	r2, [pc, #188]	@ (800c6f4 <TIM_OC1_SetConfig+0x120>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d00f      	beq.n	800c65c <TIM_OC1_SetConfig+0x88>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a2e      	ldr	r2, [pc, #184]	@ (800c6f8 <TIM_OC1_SetConfig+0x124>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d00b      	beq.n	800c65c <TIM_OC1_SetConfig+0x88>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a2d      	ldr	r2, [pc, #180]	@ (800c6fc <TIM_OC1_SetConfig+0x128>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d007      	beq.n	800c65c <TIM_OC1_SetConfig+0x88>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a2c      	ldr	r2, [pc, #176]	@ (800c700 <TIM_OC1_SetConfig+0x12c>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d003      	beq.n	800c65c <TIM_OC1_SetConfig+0x88>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a2b      	ldr	r2, [pc, #172]	@ (800c704 <TIM_OC1_SetConfig+0x130>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d10c      	bne.n	800c676 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	f023 0308 	bic.w	r3, r3, #8
 800c662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f023 0304 	bic.w	r3, r3, #4
 800c674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a1d      	ldr	r2, [pc, #116]	@ (800c6f0 <TIM_OC1_SetConfig+0x11c>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d013      	beq.n	800c6a6 <TIM_OC1_SetConfig+0xd2>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a1c      	ldr	r2, [pc, #112]	@ (800c6f4 <TIM_OC1_SetConfig+0x120>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d00f      	beq.n	800c6a6 <TIM_OC1_SetConfig+0xd2>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a1b      	ldr	r2, [pc, #108]	@ (800c6f8 <TIM_OC1_SetConfig+0x124>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d00b      	beq.n	800c6a6 <TIM_OC1_SetConfig+0xd2>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a1a      	ldr	r2, [pc, #104]	@ (800c6fc <TIM_OC1_SetConfig+0x128>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d007      	beq.n	800c6a6 <TIM_OC1_SetConfig+0xd2>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a19      	ldr	r2, [pc, #100]	@ (800c700 <TIM_OC1_SetConfig+0x12c>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d003      	beq.n	800c6a6 <TIM_OC1_SetConfig+0xd2>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a18      	ldr	r2, [pc, #96]	@ (800c704 <TIM_OC1_SetConfig+0x130>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d111      	bne.n	800c6ca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c6ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c6b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	693a      	ldr	r2, [r7, #16]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	699b      	ldr	r3, [r3, #24]
 800c6c4:	693a      	ldr	r2, [r7, #16]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	693a      	ldr	r2, [r7, #16]
 800c6ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	621a      	str	r2, [r3, #32]
}
 800c6e4:	bf00      	nop
 800c6e6:	371c      	adds	r7, #28
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr
 800c6f0:	40012c00 	.word	0x40012c00
 800c6f4:	40013400 	.word	0x40013400
 800c6f8:	40014000 	.word	0x40014000
 800c6fc:	40014400 	.word	0x40014400
 800c700:	40014800 	.word	0x40014800
 800c704:	40015000 	.word	0x40015000

0800c708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a1b      	ldr	r3, [r3, #32]
 800c716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a1b      	ldr	r3, [r3, #32]
 800c71c:	f023 0210 	bic.w	r2, r3, #16
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	021b      	lsls	r3, r3, #8
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f023 0320 	bic.w	r3, r3, #32
 800c756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	011b      	lsls	r3, r3, #4
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	4313      	orrs	r3, r2
 800c762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4a2c      	ldr	r2, [pc, #176]	@ (800c818 <TIM_OC2_SetConfig+0x110>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d007      	beq.n	800c77c <TIM_OC2_SetConfig+0x74>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a2b      	ldr	r2, [pc, #172]	@ (800c81c <TIM_OC2_SetConfig+0x114>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d003      	beq.n	800c77c <TIM_OC2_SetConfig+0x74>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a2a      	ldr	r2, [pc, #168]	@ (800c820 <TIM_OC2_SetConfig+0x118>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d10d      	bne.n	800c798 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	011b      	lsls	r3, r3, #4
 800c78a:	697a      	ldr	r2, [r7, #20]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c796:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a1f      	ldr	r2, [pc, #124]	@ (800c818 <TIM_OC2_SetConfig+0x110>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d013      	beq.n	800c7c8 <TIM_OC2_SetConfig+0xc0>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a1e      	ldr	r2, [pc, #120]	@ (800c81c <TIM_OC2_SetConfig+0x114>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d00f      	beq.n	800c7c8 <TIM_OC2_SetConfig+0xc0>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a1e      	ldr	r2, [pc, #120]	@ (800c824 <TIM_OC2_SetConfig+0x11c>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00b      	beq.n	800c7c8 <TIM_OC2_SetConfig+0xc0>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a1d      	ldr	r2, [pc, #116]	@ (800c828 <TIM_OC2_SetConfig+0x120>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d007      	beq.n	800c7c8 <TIM_OC2_SetConfig+0xc0>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a1c      	ldr	r2, [pc, #112]	@ (800c82c <TIM_OC2_SetConfig+0x124>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d003      	beq.n	800c7c8 <TIM_OC2_SetConfig+0xc0>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a17      	ldr	r2, [pc, #92]	@ (800c820 <TIM_OC2_SetConfig+0x118>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d113      	bne.n	800c7f0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c7ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c7d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	693a      	ldr	r2, [r7, #16]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	699b      	ldr	r3, [r3, #24]
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	621a      	str	r2, [r3, #32]
}
 800c80a:	bf00      	nop
 800c80c:	371c      	adds	r7, #28
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	40012c00 	.word	0x40012c00
 800c81c:	40013400 	.word	0x40013400
 800c820:	40015000 	.word	0x40015000
 800c824:	40014000 	.word	0x40014000
 800c828:	40014400 	.word	0x40014400
 800c82c:	40014800 	.word	0x40014800

0800c830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c830:	b480      	push	{r7}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a1b      	ldr	r3, [r3, #32]
 800c844:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	69db      	ldr	r3, [r3, #28]
 800c856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c85e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f023 0303 	bic.w	r3, r3, #3
 800c86a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	4313      	orrs	r3, r2
 800c874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c87c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	021b      	lsls	r3, r3, #8
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	4313      	orrs	r3, r2
 800c888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a2b      	ldr	r2, [pc, #172]	@ (800c93c <TIM_OC3_SetConfig+0x10c>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d007      	beq.n	800c8a2 <TIM_OC3_SetConfig+0x72>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a2a      	ldr	r2, [pc, #168]	@ (800c940 <TIM_OC3_SetConfig+0x110>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d003      	beq.n	800c8a2 <TIM_OC3_SetConfig+0x72>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4a29      	ldr	r2, [pc, #164]	@ (800c944 <TIM_OC3_SetConfig+0x114>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d10d      	bne.n	800c8be <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c8a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	021b      	lsls	r3, r3, #8
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c8bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4a1e      	ldr	r2, [pc, #120]	@ (800c93c <TIM_OC3_SetConfig+0x10c>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d013      	beq.n	800c8ee <TIM_OC3_SetConfig+0xbe>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c940 <TIM_OC3_SetConfig+0x110>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d00f      	beq.n	800c8ee <TIM_OC3_SetConfig+0xbe>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c948 <TIM_OC3_SetConfig+0x118>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d00b      	beq.n	800c8ee <TIM_OC3_SetConfig+0xbe>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a1c      	ldr	r2, [pc, #112]	@ (800c94c <TIM_OC3_SetConfig+0x11c>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d007      	beq.n	800c8ee <TIM_OC3_SetConfig+0xbe>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a1b      	ldr	r2, [pc, #108]	@ (800c950 <TIM_OC3_SetConfig+0x120>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d003      	beq.n	800c8ee <TIM_OC3_SetConfig+0xbe>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a16      	ldr	r2, [pc, #88]	@ (800c944 <TIM_OC3_SetConfig+0x114>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d113      	bne.n	800c916 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c8f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c8fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	011b      	lsls	r3, r3, #4
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	4313      	orrs	r3, r2
 800c908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	011b      	lsls	r3, r3, #4
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	4313      	orrs	r3, r2
 800c914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	621a      	str	r2, [r3, #32]
}
 800c930:	bf00      	nop
 800c932:	371c      	adds	r7, #28
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	40012c00 	.word	0x40012c00
 800c940:	40013400 	.word	0x40013400
 800c944:	40015000 	.word	0x40015000
 800c948:	40014000 	.word	0x40014000
 800c94c:	40014400 	.word	0x40014400
 800c950:	40014800 	.word	0x40014800

0800c954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	69db      	ldr	r3, [r3, #28]
 800c97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c98e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	021b      	lsls	r3, r3, #8
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	4313      	orrs	r3, r2
 800c99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c9a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	031b      	lsls	r3, r3, #12
 800c9aa:	697a      	ldr	r2, [r7, #20]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a2c      	ldr	r2, [pc, #176]	@ (800ca64 <TIM_OC4_SetConfig+0x110>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d007      	beq.n	800c9c8 <TIM_OC4_SetConfig+0x74>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a2b      	ldr	r2, [pc, #172]	@ (800ca68 <TIM_OC4_SetConfig+0x114>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d003      	beq.n	800c9c8 <TIM_OC4_SetConfig+0x74>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a2a      	ldr	r2, [pc, #168]	@ (800ca6c <TIM_OC4_SetConfig+0x118>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d10d      	bne.n	800c9e4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c9ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	031b      	lsls	r3, r3, #12
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a1f      	ldr	r2, [pc, #124]	@ (800ca64 <TIM_OC4_SetConfig+0x110>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d013      	beq.n	800ca14 <TIM_OC4_SetConfig+0xc0>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a1e      	ldr	r2, [pc, #120]	@ (800ca68 <TIM_OC4_SetConfig+0x114>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d00f      	beq.n	800ca14 <TIM_OC4_SetConfig+0xc0>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a1e      	ldr	r2, [pc, #120]	@ (800ca70 <TIM_OC4_SetConfig+0x11c>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d00b      	beq.n	800ca14 <TIM_OC4_SetConfig+0xc0>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a1d      	ldr	r2, [pc, #116]	@ (800ca74 <TIM_OC4_SetConfig+0x120>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d007      	beq.n	800ca14 <TIM_OC4_SetConfig+0xc0>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a1c      	ldr	r2, [pc, #112]	@ (800ca78 <TIM_OC4_SetConfig+0x124>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d003      	beq.n	800ca14 <TIM_OC4_SetConfig+0xc0>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4a17      	ldr	r2, [pc, #92]	@ (800ca6c <TIM_OC4_SetConfig+0x118>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d113      	bne.n	800ca3c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca1a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ca22:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	695b      	ldr	r3, [r3, #20]
 800ca28:	019b      	lsls	r3, r3, #6
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	019b      	lsls	r3, r3, #6
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	621a      	str	r2, [r3, #32]
}
 800ca56:	bf00      	nop
 800ca58:	371c      	adds	r7, #28
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	40012c00 	.word	0x40012c00
 800ca68:	40013400 	.word	0x40013400
 800ca6c:	40015000 	.word	0x40015000
 800ca70:	40014000 	.word	0x40014000
 800ca74:	40014400 	.word	0x40014400
 800ca78:	40014800 	.word	0x40014800

0800ca7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b087      	sub	sp, #28
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6a1b      	ldr	r3, [r3, #32]
 800ca90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800caaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cac0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	041b      	lsls	r3, r3, #16
 800cac8:	693a      	ldr	r2, [r7, #16]
 800caca:	4313      	orrs	r3, r2
 800cacc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a19      	ldr	r2, [pc, #100]	@ (800cb38 <TIM_OC5_SetConfig+0xbc>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d013      	beq.n	800cafe <TIM_OC5_SetConfig+0x82>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a18      	ldr	r2, [pc, #96]	@ (800cb3c <TIM_OC5_SetConfig+0xc0>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d00f      	beq.n	800cafe <TIM_OC5_SetConfig+0x82>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a17      	ldr	r2, [pc, #92]	@ (800cb40 <TIM_OC5_SetConfig+0xc4>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d00b      	beq.n	800cafe <TIM_OC5_SetConfig+0x82>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a16      	ldr	r2, [pc, #88]	@ (800cb44 <TIM_OC5_SetConfig+0xc8>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d007      	beq.n	800cafe <TIM_OC5_SetConfig+0x82>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a15      	ldr	r2, [pc, #84]	@ (800cb48 <TIM_OC5_SetConfig+0xcc>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d003      	beq.n	800cafe <TIM_OC5_SetConfig+0x82>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4a14      	ldr	r2, [pc, #80]	@ (800cb4c <TIM_OC5_SetConfig+0xd0>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d109      	bne.n	800cb12 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	021b      	lsls	r3, r3, #8
 800cb0c:	697a      	ldr	r2, [r7, #20]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	697a      	ldr	r2, [r7, #20]
 800cb16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	685a      	ldr	r2, [r3, #4]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	621a      	str	r2, [r3, #32]
}
 800cb2c:	bf00      	nop
 800cb2e:	371c      	adds	r7, #28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	40012c00 	.word	0x40012c00
 800cb3c:	40013400 	.word	0x40013400
 800cb40:	40014000 	.word	0x40014000
 800cb44:	40014400 	.word	0x40014400
 800cb48:	40014800 	.word	0x40014800
 800cb4c:	40015000 	.word	0x40015000

0800cb50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b087      	sub	sp, #28
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a1b      	ldr	r3, [r3, #32]
 800cb64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cb7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	021b      	lsls	r3, r3, #8
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cb96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	051b      	lsls	r3, r3, #20
 800cb9e:	693a      	ldr	r2, [r7, #16]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a1a      	ldr	r2, [pc, #104]	@ (800cc10 <TIM_OC6_SetConfig+0xc0>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d013      	beq.n	800cbd4 <TIM_OC6_SetConfig+0x84>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4a19      	ldr	r2, [pc, #100]	@ (800cc14 <TIM_OC6_SetConfig+0xc4>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d00f      	beq.n	800cbd4 <TIM_OC6_SetConfig+0x84>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4a18      	ldr	r2, [pc, #96]	@ (800cc18 <TIM_OC6_SetConfig+0xc8>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d00b      	beq.n	800cbd4 <TIM_OC6_SetConfig+0x84>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4a17      	ldr	r2, [pc, #92]	@ (800cc1c <TIM_OC6_SetConfig+0xcc>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d007      	beq.n	800cbd4 <TIM_OC6_SetConfig+0x84>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4a16      	ldr	r2, [pc, #88]	@ (800cc20 <TIM_OC6_SetConfig+0xd0>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d003      	beq.n	800cbd4 <TIM_OC6_SetConfig+0x84>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a15      	ldr	r2, [pc, #84]	@ (800cc24 <TIM_OC6_SetConfig+0xd4>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d109      	bne.n	800cbe8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cbda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	695b      	ldr	r3, [r3, #20]
 800cbe0:	029b      	lsls	r3, r3, #10
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	685a      	ldr	r2, [r3, #4]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	693a      	ldr	r2, [r7, #16]
 800cc00:	621a      	str	r2, [r3, #32]
}
 800cc02:	bf00      	nop
 800cc04:	371c      	adds	r7, #28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	40012c00 	.word	0x40012c00
 800cc14:	40013400 	.word	0x40013400
 800cc18:	40014000 	.word	0x40014000
 800cc1c:	40014400 	.word	0x40014400
 800cc20:	40014800 	.word	0x40014800
 800cc24:	40015000 	.word	0x40015000

0800cc28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b087      	sub	sp, #28
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	f003 031f 	and.w	r3, r3, #31
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6a1a      	ldr	r2, [r3, #32]
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	43db      	mvns	r3, r3
 800cc4a:	401a      	ands	r2, r3
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6a1a      	ldr	r2, [r3, #32]
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	f003 031f 	and.w	r3, r3, #31
 800cc5a:	6879      	ldr	r1, [r7, #4]
 800cc5c:	fa01 f303 	lsl.w	r3, r1, r3
 800cc60:	431a      	orrs	r2, r3
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	621a      	str	r2, [r3, #32]
}
 800cc66:	bf00      	nop
 800cc68:	371c      	adds	r7, #28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
	...

0800cc74 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d109      	bne.n	800cc98 <HAL_TIMEx_PWMN_Start+0x24>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	bf14      	ite	ne
 800cc90:	2301      	movne	r3, #1
 800cc92:	2300      	moveq	r3, #0
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	e022      	b.n	800ccde <HAL_TIMEx_PWMN_Start+0x6a>
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2b04      	cmp	r3, #4
 800cc9c:	d109      	bne.n	800ccb2 <HAL_TIMEx_PWMN_Start+0x3e>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	bf14      	ite	ne
 800ccaa:	2301      	movne	r3, #1
 800ccac:	2300      	moveq	r3, #0
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	e015      	b.n	800ccde <HAL_TIMEx_PWMN_Start+0x6a>
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	2b08      	cmp	r3, #8
 800ccb6:	d109      	bne.n	800cccc <HAL_TIMEx_PWMN_Start+0x58>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	bf14      	ite	ne
 800ccc4:	2301      	movne	r3, #1
 800ccc6:	2300      	moveq	r3, #0
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	e008      	b.n	800ccde <HAL_TIMEx_PWMN_Start+0x6a>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	bf14      	ite	ne
 800ccd8:	2301      	movne	r3, #1
 800ccda:	2300      	moveq	r3, #0
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d001      	beq.n	800cce6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	e073      	b.n	800cdce <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d104      	bne.n	800ccf6 <HAL_TIMEx_PWMN_Start+0x82>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2202      	movs	r2, #2
 800ccf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ccf4:	e013      	b.n	800cd1e <HAL_TIMEx_PWMN_Start+0xaa>
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	2b04      	cmp	r3, #4
 800ccfa:	d104      	bne.n	800cd06 <HAL_TIMEx_PWMN_Start+0x92>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2202      	movs	r2, #2
 800cd00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd04:	e00b      	b.n	800cd1e <HAL_TIMEx_PWMN_Start+0xaa>
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	2b08      	cmp	r3, #8
 800cd0a:	d104      	bne.n	800cd16 <HAL_TIMEx_PWMN_Start+0xa2>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2202      	movs	r2, #2
 800cd10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cd14:	e003      	b.n	800cd1e <HAL_TIMEx_PWMN_Start+0xaa>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2202      	movs	r2, #2
 800cd1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2204      	movs	r2, #4
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 f9a3 	bl	800d072 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cd3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a25      	ldr	r2, [pc, #148]	@ (800cdd8 <HAL_TIMEx_PWMN_Start+0x164>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d022      	beq.n	800cd8c <HAL_TIMEx_PWMN_Start+0x118>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd4e:	d01d      	beq.n	800cd8c <HAL_TIMEx_PWMN_Start+0x118>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a21      	ldr	r2, [pc, #132]	@ (800cddc <HAL_TIMEx_PWMN_Start+0x168>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d018      	beq.n	800cd8c <HAL_TIMEx_PWMN_Start+0x118>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a20      	ldr	r2, [pc, #128]	@ (800cde0 <HAL_TIMEx_PWMN_Start+0x16c>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d013      	beq.n	800cd8c <HAL_TIMEx_PWMN_Start+0x118>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a1e      	ldr	r2, [pc, #120]	@ (800cde4 <HAL_TIMEx_PWMN_Start+0x170>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d00e      	beq.n	800cd8c <HAL_TIMEx_PWMN_Start+0x118>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a1d      	ldr	r2, [pc, #116]	@ (800cde8 <HAL_TIMEx_PWMN_Start+0x174>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d009      	beq.n	800cd8c <HAL_TIMEx_PWMN_Start+0x118>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a1b      	ldr	r2, [pc, #108]	@ (800cdec <HAL_TIMEx_PWMN_Start+0x178>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d004      	beq.n	800cd8c <HAL_TIMEx_PWMN_Start+0x118>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a1a      	ldr	r2, [pc, #104]	@ (800cdf0 <HAL_TIMEx_PWMN_Start+0x17c>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d115      	bne.n	800cdb8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	689a      	ldr	r2, [r3, #8]
 800cd92:	4b18      	ldr	r3, [pc, #96]	@ (800cdf4 <HAL_TIMEx_PWMN_Start+0x180>)
 800cd94:	4013      	ands	r3, r2
 800cd96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2b06      	cmp	r3, #6
 800cd9c:	d015      	beq.n	800cdca <HAL_TIMEx_PWMN_Start+0x156>
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cda4:	d011      	beq.n	800cdca <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f042 0201 	orr.w	r2, r2, #1
 800cdb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdb6:	e008      	b.n	800cdca <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f042 0201 	orr.w	r2, r2, #1
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	e000      	b.n	800cdcc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	40012c00 	.word	0x40012c00
 800cddc:	40000400 	.word	0x40000400
 800cde0:	40000800 	.word	0x40000800
 800cde4:	40000c00 	.word	0x40000c00
 800cde8:	40013400 	.word	0x40013400
 800cdec:	40014000 	.word	0x40014000
 800cdf0:	40015000 	.word	0x40015000
 800cdf4:	00010007 	.word	0x00010007

0800cdf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d101      	bne.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	e074      	b.n	800cefa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2202      	movs	r2, #2
 800ce1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a34      	ldr	r2, [pc, #208]	@ (800cf08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d009      	beq.n	800ce4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a33      	ldr	r2, [pc, #204]	@ (800cf0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d004      	beq.n	800ce4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a31      	ldr	r2, [pc, #196]	@ (800cf10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d108      	bne.n	800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ce54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ce66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a21      	ldr	r2, [pc, #132]	@ (800cf08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d022      	beq.n	800cece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce90:	d01d      	beq.n	800cece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a1f      	ldr	r2, [pc, #124]	@ (800cf14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d018      	beq.n	800cece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a1d      	ldr	r2, [pc, #116]	@ (800cf18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d013      	beq.n	800cece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a1c      	ldr	r2, [pc, #112]	@ (800cf1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d00e      	beq.n	800cece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a15      	ldr	r2, [pc, #84]	@ (800cf0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d009      	beq.n	800cece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a18      	ldr	r2, [pc, #96]	@ (800cf20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d004      	beq.n	800cece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a11      	ldr	r2, [pc, #68]	@ (800cf10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d10c      	bne.n	800cee8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ced4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	4313      	orrs	r3, r2
 800cede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2201      	movs	r2, #1
 800ceec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	40012c00 	.word	0x40012c00
 800cf0c:	40013400 	.word	0x40013400
 800cf10:	40015000 	.word	0x40015000
 800cf14:	40000400 	.word	0x40000400
 800cf18:	40000800 	.word	0x40000800
 800cf1c:	40000c00 	.word	0x40000c00
 800cf20:	40014000 	.word	0x40014000

0800cf24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d101      	bne.n	800cf40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cf3c:	2302      	movs	r3, #2
 800cf3e:	e078      	b.n	800d032 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	4313      	orrs	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	695b      	ldr	r3, [r3, #20]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	041b      	lsls	r3, r3, #16
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	69db      	ldr	r3, [r3, #28]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a1c      	ldr	r2, [pc, #112]	@ (800d040 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d009      	beq.n	800cfe6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a1b      	ldr	r2, [pc, #108]	@ (800d044 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d004      	beq.n	800cfe6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a19      	ldr	r2, [pc, #100]	@ (800d048 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d11c      	bne.n	800d020 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cff0:	051b      	lsls	r3, r3, #20
 800cff2:	4313      	orrs	r3, r2
 800cff4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	6a1b      	ldr	r3, [r3, #32]
 800d000:	4313      	orrs	r3, r2
 800d002:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d00e:	4313      	orrs	r3, r2
 800d010:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d01c:	4313      	orrs	r3, r2
 800d01e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3714      	adds	r7, #20
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	40012c00 	.word	0x40012c00
 800d044:	40013400 	.word	0x40013400
 800d048:	40015000 	.word	0x40015000

0800d04c <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d062:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d072:	b480      	push	{r7}
 800d074:	b087      	sub	sp, #28
 800d076:	af00      	add	r7, sp, #0
 800d078:	60f8      	str	r0, [r7, #12]
 800d07a:	60b9      	str	r1, [r7, #8]
 800d07c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	f003 030f 	and.w	r3, r3, #15
 800d084:	2204      	movs	r2, #4
 800d086:	fa02 f303 	lsl.w	r3, r2, r3
 800d08a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6a1a      	ldr	r2, [r3, #32]
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	43db      	mvns	r3, r3
 800d094:	401a      	ands	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6a1a      	ldr	r2, [r3, #32]
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	f003 030f 	and.w	r3, r3, #15
 800d0a4:	6879      	ldr	r1, [r7, #4]
 800d0a6:	fa01 f303 	lsl.w	r3, r1, r3
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	621a      	str	r2, [r3, #32]
}
 800d0b0:	bf00      	nop
 800d0b2:	371c      	adds	r7, #28
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <_ZdlPvj>:
 800d0bc:	f000 b811 	b.w	800d0e2 <_ZdlPv>

0800d0c0 <_Znwj>:
 800d0c0:	2801      	cmp	r0, #1
 800d0c2:	bf38      	it	cc
 800d0c4:	2001      	movcc	r0, #1
 800d0c6:	b510      	push	{r4, lr}
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f000 f81c 	bl	800d108 <malloc>
 800d0d0:	b100      	cbz	r0, 800d0d4 <_Znwj+0x14>
 800d0d2:	bd10      	pop	{r4, pc}
 800d0d4:	f000 f808 	bl	800d0e8 <_ZSt15get_new_handlerv>
 800d0d8:	b908      	cbnz	r0, 800d0de <_Znwj+0x1e>
 800d0da:	f000 f80d 	bl	800d0f8 <abort>
 800d0de:	4780      	blx	r0
 800d0e0:	e7f3      	b.n	800d0ca <_Znwj+0xa>

0800d0e2 <_ZdlPv>:
 800d0e2:	f000 b819 	b.w	800d118 <free>
	...

0800d0e8 <_ZSt15get_new_handlerv>:
 800d0e8:	4b02      	ldr	r3, [pc, #8]	@ (800d0f4 <_ZSt15get_new_handlerv+0xc>)
 800d0ea:	6818      	ldr	r0, [r3, #0]
 800d0ec:	f3bf 8f5b 	dmb	ish
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	20000660 	.word	0x20000660

0800d0f8 <abort>:
 800d0f8:	b508      	push	{r3, lr}
 800d0fa:	2006      	movs	r0, #6
 800d0fc:	f000 f8f2 	bl	800d2e4 <raise>
 800d100:	2001      	movs	r0, #1
 800d102:	f7f7 fcad 	bl	8004a60 <_exit>
	...

0800d108 <malloc>:
 800d108:	4b02      	ldr	r3, [pc, #8]	@ (800d114 <malloc+0xc>)
 800d10a:	4601      	mov	r1, r0
 800d10c:	6818      	ldr	r0, [r3, #0]
 800d10e:	f000 b82d 	b.w	800d16c <_malloc_r>
 800d112:	bf00      	nop
 800d114:	2000001c 	.word	0x2000001c

0800d118 <free>:
 800d118:	4b02      	ldr	r3, [pc, #8]	@ (800d124 <free+0xc>)
 800d11a:	4601      	mov	r1, r0
 800d11c:	6818      	ldr	r0, [r3, #0]
 800d11e:	f000 b939 	b.w	800d394 <_free_r>
 800d122:	bf00      	nop
 800d124:	2000001c 	.word	0x2000001c

0800d128 <sbrk_aligned>:
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	4e0f      	ldr	r6, [pc, #60]	@ (800d168 <sbrk_aligned+0x40>)
 800d12c:	460c      	mov	r4, r1
 800d12e:	6831      	ldr	r1, [r6, #0]
 800d130:	4605      	mov	r5, r0
 800d132:	b911      	cbnz	r1, 800d13a <sbrk_aligned+0x12>
 800d134:	f000 f8f2 	bl	800d31c <_sbrk_r>
 800d138:	6030      	str	r0, [r6, #0]
 800d13a:	4621      	mov	r1, r4
 800d13c:	4628      	mov	r0, r5
 800d13e:	f000 f8ed 	bl	800d31c <_sbrk_r>
 800d142:	1c43      	adds	r3, r0, #1
 800d144:	d103      	bne.n	800d14e <sbrk_aligned+0x26>
 800d146:	f04f 34ff 	mov.w	r4, #4294967295
 800d14a:	4620      	mov	r0, r4
 800d14c:	bd70      	pop	{r4, r5, r6, pc}
 800d14e:	1cc4      	adds	r4, r0, #3
 800d150:	f024 0403 	bic.w	r4, r4, #3
 800d154:	42a0      	cmp	r0, r4
 800d156:	d0f8      	beq.n	800d14a <sbrk_aligned+0x22>
 800d158:	1a21      	subs	r1, r4, r0
 800d15a:	4628      	mov	r0, r5
 800d15c:	f000 f8de 	bl	800d31c <_sbrk_r>
 800d160:	3001      	adds	r0, #1
 800d162:	d1f2      	bne.n	800d14a <sbrk_aligned+0x22>
 800d164:	e7ef      	b.n	800d146 <sbrk_aligned+0x1e>
 800d166:	bf00      	nop
 800d168:	20000664 	.word	0x20000664

0800d16c <_malloc_r>:
 800d16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d170:	1ccd      	adds	r5, r1, #3
 800d172:	f025 0503 	bic.w	r5, r5, #3
 800d176:	3508      	adds	r5, #8
 800d178:	2d0c      	cmp	r5, #12
 800d17a:	bf38      	it	cc
 800d17c:	250c      	movcc	r5, #12
 800d17e:	2d00      	cmp	r5, #0
 800d180:	4606      	mov	r6, r0
 800d182:	db01      	blt.n	800d188 <_malloc_r+0x1c>
 800d184:	42a9      	cmp	r1, r5
 800d186:	d904      	bls.n	800d192 <_malloc_r+0x26>
 800d188:	230c      	movs	r3, #12
 800d18a:	6033      	str	r3, [r6, #0]
 800d18c:	2000      	movs	r0, #0
 800d18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d268 <_malloc_r+0xfc>
 800d196:	f000 f869 	bl	800d26c <__malloc_lock>
 800d19a:	f8d8 3000 	ldr.w	r3, [r8]
 800d19e:	461c      	mov	r4, r3
 800d1a0:	bb44      	cbnz	r4, 800d1f4 <_malloc_r+0x88>
 800d1a2:	4629      	mov	r1, r5
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	f7ff ffbf 	bl	800d128 <sbrk_aligned>
 800d1aa:	1c43      	adds	r3, r0, #1
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	d158      	bne.n	800d262 <_malloc_r+0xf6>
 800d1b0:	f8d8 4000 	ldr.w	r4, [r8]
 800d1b4:	4627      	mov	r7, r4
 800d1b6:	2f00      	cmp	r7, #0
 800d1b8:	d143      	bne.n	800d242 <_malloc_r+0xd6>
 800d1ba:	2c00      	cmp	r4, #0
 800d1bc:	d04b      	beq.n	800d256 <_malloc_r+0xea>
 800d1be:	6823      	ldr	r3, [r4, #0]
 800d1c0:	4639      	mov	r1, r7
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	eb04 0903 	add.w	r9, r4, r3
 800d1c8:	f000 f8a8 	bl	800d31c <_sbrk_r>
 800d1cc:	4581      	cmp	r9, r0
 800d1ce:	d142      	bne.n	800d256 <_malloc_r+0xea>
 800d1d0:	6821      	ldr	r1, [r4, #0]
 800d1d2:	1a6d      	subs	r5, r5, r1
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f7ff ffa6 	bl	800d128 <sbrk_aligned>
 800d1dc:	3001      	adds	r0, #1
 800d1de:	d03a      	beq.n	800d256 <_malloc_r+0xea>
 800d1e0:	6823      	ldr	r3, [r4, #0]
 800d1e2:	442b      	add	r3, r5
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	f8d8 3000 	ldr.w	r3, [r8]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	bb62      	cbnz	r2, 800d248 <_malloc_r+0xdc>
 800d1ee:	f8c8 7000 	str.w	r7, [r8]
 800d1f2:	e00f      	b.n	800d214 <_malloc_r+0xa8>
 800d1f4:	6822      	ldr	r2, [r4, #0]
 800d1f6:	1b52      	subs	r2, r2, r5
 800d1f8:	d420      	bmi.n	800d23c <_malloc_r+0xd0>
 800d1fa:	2a0b      	cmp	r2, #11
 800d1fc:	d917      	bls.n	800d22e <_malloc_r+0xc2>
 800d1fe:	1961      	adds	r1, r4, r5
 800d200:	42a3      	cmp	r3, r4
 800d202:	6025      	str	r5, [r4, #0]
 800d204:	bf18      	it	ne
 800d206:	6059      	strne	r1, [r3, #4]
 800d208:	6863      	ldr	r3, [r4, #4]
 800d20a:	bf08      	it	eq
 800d20c:	f8c8 1000 	streq.w	r1, [r8]
 800d210:	5162      	str	r2, [r4, r5]
 800d212:	604b      	str	r3, [r1, #4]
 800d214:	4630      	mov	r0, r6
 800d216:	f000 f82f 	bl	800d278 <__malloc_unlock>
 800d21a:	f104 000b 	add.w	r0, r4, #11
 800d21e:	1d23      	adds	r3, r4, #4
 800d220:	f020 0007 	bic.w	r0, r0, #7
 800d224:	1ac2      	subs	r2, r0, r3
 800d226:	bf1c      	itt	ne
 800d228:	1a1b      	subne	r3, r3, r0
 800d22a:	50a3      	strne	r3, [r4, r2]
 800d22c:	e7af      	b.n	800d18e <_malloc_r+0x22>
 800d22e:	6862      	ldr	r2, [r4, #4]
 800d230:	42a3      	cmp	r3, r4
 800d232:	bf0c      	ite	eq
 800d234:	f8c8 2000 	streq.w	r2, [r8]
 800d238:	605a      	strne	r2, [r3, #4]
 800d23a:	e7eb      	b.n	800d214 <_malloc_r+0xa8>
 800d23c:	4623      	mov	r3, r4
 800d23e:	6864      	ldr	r4, [r4, #4]
 800d240:	e7ae      	b.n	800d1a0 <_malloc_r+0x34>
 800d242:	463c      	mov	r4, r7
 800d244:	687f      	ldr	r7, [r7, #4]
 800d246:	e7b6      	b.n	800d1b6 <_malloc_r+0x4a>
 800d248:	461a      	mov	r2, r3
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	42a3      	cmp	r3, r4
 800d24e:	d1fb      	bne.n	800d248 <_malloc_r+0xdc>
 800d250:	2300      	movs	r3, #0
 800d252:	6053      	str	r3, [r2, #4]
 800d254:	e7de      	b.n	800d214 <_malloc_r+0xa8>
 800d256:	230c      	movs	r3, #12
 800d258:	6033      	str	r3, [r6, #0]
 800d25a:	4630      	mov	r0, r6
 800d25c:	f000 f80c 	bl	800d278 <__malloc_unlock>
 800d260:	e794      	b.n	800d18c <_malloc_r+0x20>
 800d262:	6005      	str	r5, [r0, #0]
 800d264:	e7d6      	b.n	800d214 <_malloc_r+0xa8>
 800d266:	bf00      	nop
 800d268:	20000668 	.word	0x20000668

0800d26c <__malloc_lock>:
 800d26c:	4801      	ldr	r0, [pc, #4]	@ (800d274 <__malloc_lock+0x8>)
 800d26e:	f000 b88f 	b.w	800d390 <__retarget_lock_acquire_recursive>
 800d272:	bf00      	nop
 800d274:	200007a8 	.word	0x200007a8

0800d278 <__malloc_unlock>:
 800d278:	4801      	ldr	r0, [pc, #4]	@ (800d280 <__malloc_unlock+0x8>)
 800d27a:	f000 b88a 	b.w	800d392 <__retarget_lock_release_recursive>
 800d27e:	bf00      	nop
 800d280:	200007a8 	.word	0x200007a8

0800d284 <memset>:
 800d284:	4402      	add	r2, r0
 800d286:	4603      	mov	r3, r0
 800d288:	4293      	cmp	r3, r2
 800d28a:	d100      	bne.n	800d28e <memset+0xa>
 800d28c:	4770      	bx	lr
 800d28e:	f803 1b01 	strb.w	r1, [r3], #1
 800d292:	e7f9      	b.n	800d288 <memset+0x4>

0800d294 <_raise_r>:
 800d294:	291f      	cmp	r1, #31
 800d296:	b538      	push	{r3, r4, r5, lr}
 800d298:	4605      	mov	r5, r0
 800d29a:	460c      	mov	r4, r1
 800d29c:	d904      	bls.n	800d2a8 <_raise_r+0x14>
 800d29e:	2316      	movs	r3, #22
 800d2a0:	6003      	str	r3, [r0, #0]
 800d2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d2aa:	b112      	cbz	r2, 800d2b2 <_raise_r+0x1e>
 800d2ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2b0:	b94b      	cbnz	r3, 800d2c6 <_raise_r+0x32>
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f000 f830 	bl	800d318 <_getpid_r>
 800d2b8:	4622      	mov	r2, r4
 800d2ba:	4601      	mov	r1, r0
 800d2bc:	4628      	mov	r0, r5
 800d2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2c2:	f000 b817 	b.w	800d2f4 <_kill_r>
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d00a      	beq.n	800d2e0 <_raise_r+0x4c>
 800d2ca:	1c59      	adds	r1, r3, #1
 800d2cc:	d103      	bne.n	800d2d6 <_raise_r+0x42>
 800d2ce:	2316      	movs	r3, #22
 800d2d0:	6003      	str	r3, [r0, #0]
 800d2d2:	2001      	movs	r0, #1
 800d2d4:	e7e7      	b.n	800d2a6 <_raise_r+0x12>
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d2dc:	4620      	mov	r0, r4
 800d2de:	4798      	blx	r3
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	e7e0      	b.n	800d2a6 <_raise_r+0x12>

0800d2e4 <raise>:
 800d2e4:	4b02      	ldr	r3, [pc, #8]	@ (800d2f0 <raise+0xc>)
 800d2e6:	4601      	mov	r1, r0
 800d2e8:	6818      	ldr	r0, [r3, #0]
 800d2ea:	f7ff bfd3 	b.w	800d294 <_raise_r>
 800d2ee:	bf00      	nop
 800d2f0:	2000001c 	.word	0x2000001c

0800d2f4 <_kill_r>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	4d07      	ldr	r5, [pc, #28]	@ (800d314 <_kill_r+0x20>)
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	4611      	mov	r1, r2
 800d300:	602b      	str	r3, [r5, #0]
 800d302:	f7f7 fb9d 	bl	8004a40 <_kill>
 800d306:	1c43      	adds	r3, r0, #1
 800d308:	d102      	bne.n	800d310 <_kill_r+0x1c>
 800d30a:	682b      	ldr	r3, [r5, #0]
 800d30c:	b103      	cbz	r3, 800d310 <_kill_r+0x1c>
 800d30e:	6023      	str	r3, [r4, #0]
 800d310:	bd38      	pop	{r3, r4, r5, pc}
 800d312:	bf00      	nop
 800d314:	200007a4 	.word	0x200007a4

0800d318 <_getpid_r>:
 800d318:	f7f7 bb8a 	b.w	8004a30 <_getpid>

0800d31c <_sbrk_r>:
 800d31c:	b538      	push	{r3, r4, r5, lr}
 800d31e:	4d06      	ldr	r5, [pc, #24]	@ (800d338 <_sbrk_r+0x1c>)
 800d320:	2300      	movs	r3, #0
 800d322:	4604      	mov	r4, r0
 800d324:	4608      	mov	r0, r1
 800d326:	602b      	str	r3, [r5, #0]
 800d328:	f7f7 fba6 	bl	8004a78 <_sbrk>
 800d32c:	1c43      	adds	r3, r0, #1
 800d32e:	d102      	bne.n	800d336 <_sbrk_r+0x1a>
 800d330:	682b      	ldr	r3, [r5, #0]
 800d332:	b103      	cbz	r3, 800d336 <_sbrk_r+0x1a>
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	bd38      	pop	{r3, r4, r5, pc}
 800d338:	200007a4 	.word	0x200007a4

0800d33c <__errno>:
 800d33c:	4b01      	ldr	r3, [pc, #4]	@ (800d344 <__errno+0x8>)
 800d33e:	6818      	ldr	r0, [r3, #0]
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	2000001c 	.word	0x2000001c

0800d348 <__libc_init_array>:
 800d348:	b570      	push	{r4, r5, r6, lr}
 800d34a:	4d0d      	ldr	r5, [pc, #52]	@ (800d380 <__libc_init_array+0x38>)
 800d34c:	4c0d      	ldr	r4, [pc, #52]	@ (800d384 <__libc_init_array+0x3c>)
 800d34e:	1b64      	subs	r4, r4, r5
 800d350:	10a4      	asrs	r4, r4, #2
 800d352:	2600      	movs	r6, #0
 800d354:	42a6      	cmp	r6, r4
 800d356:	d109      	bne.n	800d36c <__libc_init_array+0x24>
 800d358:	4d0b      	ldr	r5, [pc, #44]	@ (800d388 <__libc_init_array+0x40>)
 800d35a:	4c0c      	ldr	r4, [pc, #48]	@ (800d38c <__libc_init_array+0x44>)
 800d35c:	f000 f864 	bl	800d428 <_init>
 800d360:	1b64      	subs	r4, r4, r5
 800d362:	10a4      	asrs	r4, r4, #2
 800d364:	2600      	movs	r6, #0
 800d366:	42a6      	cmp	r6, r4
 800d368:	d105      	bne.n	800d376 <__libc_init_array+0x2e>
 800d36a:	bd70      	pop	{r4, r5, r6, pc}
 800d36c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d370:	4798      	blx	r3
 800d372:	3601      	adds	r6, #1
 800d374:	e7ee      	b.n	800d354 <__libc_init_array+0xc>
 800d376:	f855 3b04 	ldr.w	r3, [r5], #4
 800d37a:	4798      	blx	r3
 800d37c:	3601      	adds	r6, #1
 800d37e:	e7f2      	b.n	800d366 <__libc_init_array+0x1e>
 800d380:	0800d460 	.word	0x0800d460
 800d384:	0800d460 	.word	0x0800d460
 800d388:	0800d460 	.word	0x0800d460
 800d38c:	0800d480 	.word	0x0800d480

0800d390 <__retarget_lock_acquire_recursive>:
 800d390:	4770      	bx	lr

0800d392 <__retarget_lock_release_recursive>:
 800d392:	4770      	bx	lr

0800d394 <_free_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	4605      	mov	r5, r0
 800d398:	2900      	cmp	r1, #0
 800d39a:	d041      	beq.n	800d420 <_free_r+0x8c>
 800d39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3a0:	1f0c      	subs	r4, r1, #4
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	bfb8      	it	lt
 800d3a6:	18e4      	addlt	r4, r4, r3
 800d3a8:	f7ff ff60 	bl	800d26c <__malloc_lock>
 800d3ac:	4a1d      	ldr	r2, [pc, #116]	@ (800d424 <_free_r+0x90>)
 800d3ae:	6813      	ldr	r3, [r2, #0]
 800d3b0:	b933      	cbnz	r3, 800d3c0 <_free_r+0x2c>
 800d3b2:	6063      	str	r3, [r4, #4]
 800d3b4:	6014      	str	r4, [r2, #0]
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3bc:	f7ff bf5c 	b.w	800d278 <__malloc_unlock>
 800d3c0:	42a3      	cmp	r3, r4
 800d3c2:	d908      	bls.n	800d3d6 <_free_r+0x42>
 800d3c4:	6820      	ldr	r0, [r4, #0]
 800d3c6:	1821      	adds	r1, r4, r0
 800d3c8:	428b      	cmp	r3, r1
 800d3ca:	bf01      	itttt	eq
 800d3cc:	6819      	ldreq	r1, [r3, #0]
 800d3ce:	685b      	ldreq	r3, [r3, #4]
 800d3d0:	1809      	addeq	r1, r1, r0
 800d3d2:	6021      	streq	r1, [r4, #0]
 800d3d4:	e7ed      	b.n	800d3b2 <_free_r+0x1e>
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	b10b      	cbz	r3, 800d3e0 <_free_r+0x4c>
 800d3dc:	42a3      	cmp	r3, r4
 800d3de:	d9fa      	bls.n	800d3d6 <_free_r+0x42>
 800d3e0:	6811      	ldr	r1, [r2, #0]
 800d3e2:	1850      	adds	r0, r2, r1
 800d3e4:	42a0      	cmp	r0, r4
 800d3e6:	d10b      	bne.n	800d400 <_free_r+0x6c>
 800d3e8:	6820      	ldr	r0, [r4, #0]
 800d3ea:	4401      	add	r1, r0
 800d3ec:	1850      	adds	r0, r2, r1
 800d3ee:	4283      	cmp	r3, r0
 800d3f0:	6011      	str	r1, [r2, #0]
 800d3f2:	d1e0      	bne.n	800d3b6 <_free_r+0x22>
 800d3f4:	6818      	ldr	r0, [r3, #0]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	6053      	str	r3, [r2, #4]
 800d3fa:	4408      	add	r0, r1
 800d3fc:	6010      	str	r0, [r2, #0]
 800d3fe:	e7da      	b.n	800d3b6 <_free_r+0x22>
 800d400:	d902      	bls.n	800d408 <_free_r+0x74>
 800d402:	230c      	movs	r3, #12
 800d404:	602b      	str	r3, [r5, #0]
 800d406:	e7d6      	b.n	800d3b6 <_free_r+0x22>
 800d408:	6820      	ldr	r0, [r4, #0]
 800d40a:	1821      	adds	r1, r4, r0
 800d40c:	428b      	cmp	r3, r1
 800d40e:	bf04      	itt	eq
 800d410:	6819      	ldreq	r1, [r3, #0]
 800d412:	685b      	ldreq	r3, [r3, #4]
 800d414:	6063      	str	r3, [r4, #4]
 800d416:	bf04      	itt	eq
 800d418:	1809      	addeq	r1, r1, r0
 800d41a:	6021      	streq	r1, [r4, #0]
 800d41c:	6054      	str	r4, [r2, #4]
 800d41e:	e7ca      	b.n	800d3b6 <_free_r+0x22>
 800d420:	bd38      	pop	{r3, r4, r5, pc}
 800d422:	bf00      	nop
 800d424:	20000668 	.word	0x20000668

0800d428 <_init>:
 800d428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42a:	bf00      	nop
 800d42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d42e:	bc08      	pop	{r3}
 800d430:	469e      	mov	lr, r3
 800d432:	4770      	bx	lr

0800d434 <_fini>:
 800d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d436:	bf00      	nop
 800d438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d43a:	bc08      	pop	{r3}
 800d43c:	469e      	mov	lr, r3
 800d43e:	4770      	bx	lr
